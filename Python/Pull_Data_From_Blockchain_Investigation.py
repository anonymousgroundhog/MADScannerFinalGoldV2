import os, nltk, pandas as pd, graphviz, numpy as np, time, StateMachine, Helper, Blockchain

from nltk import bigrams
from termcolor import colored, cprint
from web3 import Web3, EthereumTesterProvider

def Label_Dataframe_Rows(df):
    labels = []
    for index, row in df.iterrows():
        labels.append(row['App_Class'].split('.')[1])
    df['App_Label'] = labels
    return(df)

def Open_File_And_Generate_Dataframe(this_path):
    helper = Helper.Helper()
    print("\n"+this_path)
    app_name_list = []
    app_hash_list = []
    app_class_list = []
    app_method_list = []
    app_ad_id_list = []

    with open(this_path) as file:
        lines = [line.rstrip() for line in file]
        print("\n\nLines are: "+str(lines))
        while lines[0].__contains__("---------") and len(lines) > 1:
            del lines[0]
        # if lines[0].__contains__("---------"):
        #     del lines[0]
        # if lines[0].__contains__("---------"):
        #     del lines[0]
        # if lines[0].__contains__("---------"):
        #     del lines[0]
    for item in lines:
        content = item.split(":")
        content_to_manipulate=content.pop()
        content_to_manipulate_list = content_to_manipulate.split("---")
        print(content_to_manipulate_list) 
        if len(app_name_list) > 4:  
            app_name_list.append(content_to_manipulate_list[0])
            app_hash_list.append(content_to_manipulate_list[1])
            app_class_list.append(content_to_manipulate_list[2])
            app_method_list.append(content_to_manipulate_list[3])
            app_ad_id_list.append(content_to_manipulate_list[4])

    data = {
        'App_Name': app_name_list,
        'App_Hash': app_hash_list,
        'App_Class': app_class_list,
        'App_Method':app_method_list,
        'App_Ad_ID':app_ad_id_list
    }
    df = pd.DataFrame(data)
    
    # filtered_df = df.query( 'App_Method == ["onCreate", "setContentView", "setAdListener", "initialize", "findViewById", "loadAd", "onAdImpression", "onAdClicked", "onAdLoaded"]' )
    filtered_df = df.query( 'App_Method == ["setContentView", "setAdListener", "initialize", "onAdImpression", "onAdClicked", "onAdLoaded", "onAdClosed"]' )
    print(filtered_df)
    unique_apps=pd.unique(filtered_df[['App_Name']].values.ravel())

    for app_name in unique_apps:
        print("\nApp Name:" + app_name)
        rslt_df = filtered_df[filtered_df['App_Name'] == app_name]
        # print(rslt_df)
        transitions=rslt_df[['App_Method', 'App_Ad_ID']]
        
        transitions = transitions.loc[~((transitions['App_Ad_ID'] == 'null') & ((transitions['App_Method'] == 'onAdLoaded') | 
                                                                        (transitions['App_Method'] == 'onAdImpression')| 
                                                                        (transitions['App_Method'] == 'onAdClicked')))]
        
        transitions['Graph'] = np.nan
        transitions = transitions.reset_index(drop=True)
        set_setContentView = set(np.where(transitions.App_Method == 'setContentView')[0])
        set_setAdListener = set(np.where(transitions.App_Method == 'setAdListener')[0])
        set_initialize = set(np.where(transitions.App_Method == 'initialize')[0])

        counter1 = 0
        for loc in sorted(set_setContentView):
            counter1=counter1+1
            transitions.at[loc,'Graph'] = counter1
        
        set_empty = set(np.where(pd.isna(transitions['Graph']))[0])
        counter2 = 0
        for loc in sorted(set_empty):
            loc2=loc-1
            col_list = transitions["Graph"].values.tolist()
            # print('length:', transitions[transitions.columns[0]].count())
            if transitions[transitions.columns[0]].count() == 1:
                counter2 = counter2 + 1
                transitions.at[loc,'Graph'] = counter2
            elif col_list[loc2] != np.nan:
                # print("Prev Val ",col_list[loc2])
                transitions.at[loc,'Graph'] = col_list[loc2]
            else:
                # print("Prev Val ",col_list[loc2])
                counter2 = counter2 + 1
                transitions.at[loc,'Graph'] = counter2

        # Set states and add new graph for each
        print("Unique graph numbers:",transitions['Graph'].unique())
        for graph in transitions['Graph'].unique():
            print("Graph: ", graph)
            state_machine = StateMachine.StateMachine()
            state_machine.add_title("App Testing"+str(graph))
            state_machine.add_states()
            rslt_df = transitions[transitions['Graph'] == graph]
            this_transitions=list(helper.sliding_window_iter(rslt_df['App_Method'], 2))
            this_advertisement_id=list(helper.sliding_window_iter(rslt_df['App_Ad_ID'], 2))
            print(rslt_df)
            print(this_transitions)
            print(this_advertisement_id)
            for trans in this_transitions:
                print(trans[0], " ",trans[1])
                trans_determ = state_machine.determine_transition(trans)
                if(trans_determ != None):
                    print("Trans:"+str(trans_determ))
                    state_machine.add_dot_edge(trans_determ[0], trans_determ[1], trans_determ[2])
            print(state_machine.digraph)
            state_machine.save_as_pdf(this_path.replace(".txt","").split("/").pop()+"_"+app_name+"_"+str(graph))


os.system('clear')
blockchain = Blockchain.Blockchain()
blockchain.Connect()
blockchain.Set_Sender_Address('0xdE2ED5049eb256D14d5F88b77bc041C77daf0702')
blockchain.Set_Private_key('0xf189036b58739d7b93eb7a2404e609aa1a483f7aaa034b04cfa697bf6133c2f7')
blockchain.Set_Contract_Address('0x9dFb3b84DD0043DA281Ab572ed43421F0Fa0CE43')
blockchain.Set_ABI('[ { "inputs": [ { "internalType": "string", "name": "Transition_1", "type": "string" }, { "internalType": "string", "name": "Transition_2", "type": "string" } ], "name": "Check_Transition", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "Setup_Model", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "string", "name": "appId", "type": "string" }, { "internalType": "string", "name": "logClass", "type": "string" }, { "internalType": "string", "name": "logLibrary", "type": "string" }, { "internalType": "string", "name": "logMethod", "type": "string" }, { "internalType": "string", "name": "logDateAndTime", "type": "string" } ], "name": "addLog", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "string", "name": "this_transition", "type": "string" } ], "name": "addValidModelTransitions", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "string", "name": "this_transition", "type": "string" } ], "name": "addValidTransitions", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "clearValidModelTransitions", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "getLogIds", "outputs": [ { "internalType": "string[]", "name": "", "type": "string[]" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "string", "name": "appId", "type": "string" } ], "name": "getLogs", "outputs": [ { "components": [ { "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "string", "name": "log_class", "type": "string" }, { "internalType": "string", "name": "log_library", "type": "string" }, { "internalType": "string", "name": "log_method", "type": "string" }, { "internalType": "string", "name": "log_date_and_time", "type": "string" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" } ], "internalType": "struct MultiAppLogTracker.Log[]", "name": "", "type": "tuple[]" } ], "stateMutability": "view", "type": "function" } ]')

blockchain.Set_Contract_Instance()



helper = Helper.Helper()
this_apps = helper.unique(blockchain.Return_Available_Log_IDs())
lst_app_names = []
lst_app_classes = []
lst_app_libraries = []
lst_app_methods = []
lst_app_dates = []

for app in this_apps:
	all_blockchain_results = blockchain.Read_Data(app)
	for item in all_blockchain_results:
		app_library=item[1]
		app_class=item[2]
		app_method = item[3]
		app_date = item[4]
		block_timestamp = item[5]
		lst_app_names.append(app)
		if len(app_date) != '':
			lst_app_dates.append(app_date)
			lst_app_libraries.append(app_library)
			lst_app_classes.append(app_class)
			lst_app_methods.append(app_method)
		else:
			lst_app_dates.append('')
			lst_app_libraries.append('')
			lst_app_classes.append('')
			lst_app_methods.append('')

data = {
        'App_Name': lst_app_names,
        'App_Class': lst_app_classes,
        'App_Library': lst_app_libraries,
        'App_Method': lst_app_methods,
        'App_Date': lst_app_dates
    }
all_data_df = pd.DataFrame(data)
print(all_data_df[['App_Name', 'App_Library', 'App_Method']])

Apps_To_Investigate_List = ['1E1BAEDD9C891CCECFDA3C44403FC1939A7F4E58718206F4906DA1496CE2EDE3', '21DAA6D8842416C88632B3916ADB11FD95733A4CEC313895D3A485E79325AB7E', '2D1704971F9B4588D4EA6A78420FE3D6082F21BE84111DEF8CA8CA568B678659', '017D4ED98A1C94CD6B7F1C5ACDD5178C1C485CE3F616741C9A9535868362F077', '118B0A0B73D2059E8222953A19FE1430E58379F37511BB35EF848EAB2D4AE22C', '145ADA450E95C53673C6C674BB20A1F40C3D0B946F53C92F2AFD4D2F7ADC048F', '23A507DF956A35DE9E8291F523076136572A743767F198052AB269DC608F56BA', '2DE738ED4CF90D90356C5E438DF6F56705565FC9FB9CD0F5D50AA0C05C33FA19', '1F449BE024E0B3BD47974E53FBC1526FF00B73A95E56E5F31EB11A772BFFCCCD', '1C4A01582AE49DF4C892F585386B6ED0FFB6F6489F4C428634A54958578B6892', '09E5FEA220D9CBCD5ADE35DA5635E6DCB5856FE67A06627FD3DCF99DA6674D2D', '1D800FA79D9A7B15FAD199B796E1424E279C047A1A8AC34BB791E8B5A1E22231', '2466BBC72F8EE6836ECD22770FE65DCAE5C335F81B6F78C11D4DF38C449B96DB', '05B2499AB58C66C3EB6FB1098B79EB29521FEC658ACCF92E87BA13F01590FE42', '2963E47D7BEB2FD85B26CA771BAC3205665F1E71B08BE452CB8705540FF3C0B0', '07F006DC007E55DF653CFAA46FB90BC9B94E337E625FA660E9999984E1EF26BA', '2E1D4E980AD8DBFABD430D46C9229EE04E9959DA60B255FF3D4C880176361592', '09009B636CC5E7A91E92FD5422D168A1EAA6B47495E00739DAEA3D68B81C656B', '2AA2B48A87CCEE7FABE4353FD30D5A52D81D4D07B66BD4303F53C1F6677E8FFA', '00FC170CD85FA88130DC11BF3627B9E1A30801DBB5C556E76A2F871C3D50F4B7', '2540B571F900A4BA90FFF2EA7526015C7E49E3CD6AC050D684C46A34F3BE3A10', '1F27302F01262DC9641912871907719829735B6E8BB0BB5A87530C3E4EB20645', '2550EFD5EA3F9AC751B787F15630D240A28F0995328A0007720B43562A8958E7', '0B9FD147202CAB302C4A1E0F83379BBDE840ADF496CC13BCEB5554A8A2BB2ED2', '302ADA10BC989E4DA5680DA66507A7845E429E1891AB2E474DAD5A9AE79BBEFA', '2BD6A9A975D6DDB322104A35181AB018D2DA45F9FF2C09AE40C4598C985FA43B', '15C52213250ECBE4D72C6FEEB5B8B8F0704835EEFD9B6F935A96FC9FD79DCF0E', '01E1C2E6074A7384751EA493FCCAFCAB8808FAE512DDD494AC5B79A06023735C', '0BC167335F1F593ECD96CC06043241B2CBFD87D6F3DC511FABF9CE8C5B5F6B40', '07CD496037AE25FE132C0C4D7BD49742A8754AAC7D42839A96B62736054F6EB3', '15810FC5837F5532B0348FC29557FE1E3872F909E01333CF6D9D8D25A09C5A8B', '1694177A89D82C3AAA439440AA9E4E849648EB12013597DCF48BA9FCDE2447D6', '2E21E23EF46D9C4773EAEEF05749491C8E032C7F134EF6011A3D922A7DA693FE', '1E799A837ECEDA82A190671DD971366B4569DAA9E772F4BBAD2ABBF2E7547BCD', '0990BA7EC78020682A0673E81A2E57B08CB63BE0E73234C443BCA08C8F6C2415', '0BBDC7794DCD4CC129EE7EBE91682866ADF3F7120D00B811F9D5BF25CF74BF50', '0FA1D9C3A2E3A6C1D7BDAB69D33DF7EC1D5F8B613E215F70DDC71CDAB65377DD', '11906DBB5DD1E1A24FC5CF9AAB69DC9433FBC74E92A1B30096299D1762D77BE0', '2D1D76CAEF282E40AE76FCAD2FFA94BD18690ABD652E804A6562AE9020345109', '0559D579917E00B2675167D3BA2BB9D794932F463CAE3D7ADA002A59B89C7C75', '010AB247E00EE314A8CCE50BC1B3F467130E62F0BB2942DFB307A687F911A1CA', '030E96078A1F51ECFDA52B45AE14BBB14DA688B71081CE54603BE3EC7CC09B87', '1E43514B4794CFF314C114A5D7DEC7996130565E0CB00C3EA0F3EF16D0384589', '28CBC519EEC2AFE1D06F4B1EF60C99ECEE8DAB1A7B8397CC0A150135AC46BE0F', '142339349DFC436BD74D1AD189EBA624AC42C2831C91E5020D7FCB96A1D0F8C9', '0556B2B90930D86ACA22C620A54398BC4997F44B26F0128FE7371FF308742C9C', '03611A7335CF67AC1D035631BA8830B7D8C5964F25E3F274B0B6F455DBE598CC', '191A34649C719D3F356C0E68FEB42F6AFEA8DA09E54397FFB33A33ED05127F98', '15B009B41E7ED5B851A28993FE8F240447791A0F1709B625EBF86FC4E807C1B2', '042A333E3346409AB6A37975414CF6E3841FB0F7307830019810DF260E3D8D14', '15F4DFFBBB9826762117802BC9225193EF0A474D327F89183ECBE7C5D2F9C90E', '11D14D96556D7A4D018D168AAA134B133762493ED2A6393F732C7BBDDD5C28B4', '1DB36FBD53691E1E127EB177D8798C4DA21ADEFA0E8F5B06779067CFD429D150', '0DD4EBD647CFCA65828945BD9400CF608D08F1F87D34FB91AD189C8E37B15F78', '0311BF9C8362A953247EB62B081059C23437B5850AE413CAF0285C67A1CDD52E', '2C51987AC19F73FDE30043CD6114540EAC2AAC3FB85B18CD08850A0567A4C5A3', '216A1EC3DB9994A980DFA264BA2D5294CF5658A2D5AFB6DAFAFBA5B6D22193CB', '12F0C9B2289C2456CC908DB683E1A0F093F665618FEC886F1F75824908112685', '1CE8B67EE4F34D8A6E6F8AC8713BFFCB6D8F09102F6CAD100308881FF324964A', '18E054204E46D6BB75F56BF425B39F826A6EF0C4C8B5CEA82794C6F1242B360E', '0C8785EED1A921AFA7E192A5FED8DEF187BB4E891A9C070F14DAFFEF17F79EA9', '1F986835F422708AAA5B8B051B83E6B1E555AA4C482F9DBAE5DF0F13B87D6F76', '310541F66DB937C2B12DD0FBAE40E1C5BD1164B1E17D4992D6170B6B62724D86', '11E158E5C7D32666A753F0E69A8E546D9B44E83F0FF66DFDE0DD311A415D120F', '13B12D561F5F6916A330C0635EF42852B5D7D894929890DC1768DEF202114880', '1E73C89FD19F57A9634D0EF8B7AB3A1DC9D26207CCAF2F37BEEE8EDB8E848F76', '00984D6086B3A5965B6A96A558E41984317726B5ED28D28D208F8194BC51A70D', '2027C421BF945905033D8789ACAA74C5305316CE9C7181EFA1BAB402E2F158C4', '039F18DCD6DA69C78F467773CC539B81F4EDF39DF203248ED8A0ED0A50FF3566', '2F86CD4D4A36AC8F8C8D52D4C3DA26DCEAA23B9754506653EFB4F89555F9C8F0', '2E7B746350310D2D6EC168653A6125F7E8B073F90B39F69B18C54908D872EE3E', '00F2A654C723DE8B4E8917E33B2729F3C3F75BF4580FE2F6D362A3A2E17D9A01', '2321C4CFED8D7E6A71990F2AB886B98DC0A16247E06E05D71886C2A810C59A9D', '19A93F2C43933F1B943D75EDB471F7BB38BEBA605F8355848E0572B2E8736A97', '2B7BE5D1025AE9F48D365BB191A31A526796B2BC1F85D2461B2F891470513351', '309513548825F883DE046B0BE8E6ABA7DD6B99CB8D7EDF7A9834C4F594F16A09', '1A9BF9EABCBD0E8FB07C67FCC4131F904B0183F94B6393814E41ED869A2641E4', '119E47FD4F156061DBA4473613BC7C94B8B091044755D2390E70286414D7C656', '0CC3F1F7CC479857B21914ED79C489CAABEA0DC6E1DFE9B21134D9FD42951BBD', '02515B1154BD5D878E667D493DF346B4C39EA5C47D07F5C528625FC321F42F28', '12D873B4EC25E021CBC386129B10A684169DD0962749637C9867EFEAC36A4742', '2E3C9055AF0A7F37DDC7877DCAA9D5427508BCCCB6DA9532FC6F7EC057B39DF5', '13B2EAA2F2E879ED69DEFF6716E1C176CFF958825BC16A097872E6353F214A4F', '003483FF2A74BF9B2AA6CC20850DF8D0EA0EEDC16089E6B65159D692157E658C', '14ACDE5B581C8031C81B199648DD65C8549B19920414D51B0CD9F6B85CF4B6EE', '2CDA9850E073E5212B28F569580C6DE667C8890751B0E0E43CADCF9297FE5B91', '06FC9365495DC4B95694C4313A4FD2308CBC7301FC79BD7A8B079036A49F982A', '2CB095CA1396551AE46103574BA6470D258614142EED784D71E4B7795662165B', '0720AEDEF3D2C2B02548F7922A0A3663B31D85E470C0EE09476BC3789DDF5BA9', '107F0F6E316DF01FB4C62C2671941304C474BA8F2E2F13C1B4855968156678AE', '265CB6765009008BA36C0261AF8F785613A3D7F082E852098CC9422C331ABA95', '124B59E0D0B52EB74D03B91D7D03DC90699702C5DA8D7AD7056A4A3B74F015FD', '04563983602E74883C8BA771A3F01CBC0244E285D8524CDA26A2A620861C5FCF', '1EF71C1E11D4163446B8E303A0AF444387CE8B051917D2C7F5FE28C458B44644', '153C729BD24862EB3A0FFD785344760DE34482153B83C0432970E425C5FD6399', '00D219EEEB874BCC341869EF45C794E382AA3614CB90752BE5172543F4886F68', '0E7640395EC9CD241429B8B4679595293EC39947F6866884A74DA1681E58C17D', '15BE8128AF75CEDA8F9E8A10CC27750D11BE264D5B075FEA13658E3A41A5CE12', '164A6D55572C8DDC25CC43E6AA0E8DF0751B8C7322D7313CEEAB98556AB279F6', '18FEA43C717D7FB0CE663E4D63FAE97C1A1BC4481FB7928FE77D9108CD665274', '27948DE94F5099EBE68C6BCF30E5A46FF178084B195D5497AF31501E33163374', '1D1094028D6D533F7F7F3E5F9D8B094EAE1935573DE51BD6A96B5EBAFCD4244A', '0892E4973BA627EEC8BFCBB495D54CAC90BFBEDBE696210FEFB44D1590E56260', '26C9193B989249B5B367E6AB10BD628858C8DFC31C50C5294EF1B4E46178F9F2', '2EA90DD72F206B53070E41DB45F4DD214C94CA23B50F0EAF918166151CBC5D71', '2D1BB8DFC6D9F16EA9E94BF928A0457D007D3D410698210E7B77AFD9E200EEE0', '0AC6E4ABD31A8170FAD329C7A1DB9BFA06CC879168BBD5037862DBF2968CF1E5', '2B1D37A9DEB71D25600C4F82B67496CB8E78A5FB95E6E8BE25F1D33CBCEA8FD8', '1ECE109D46629F76A1FC1CB07C3BA49348E332BE6E148D5F0F0F6F6CDA79D239', '2837A4166C2E6884119E451081EFEC223491CC8177CDFB6ECC92EB3693A333E0', '1E7D5931BCFD588801715FBE3D0AEC724A891D98941334B62C9828BD4F53356C', '2325BCD1B9460D842B1D7BA9730BC30FB51D24430C470907640CD2ACEF48B2D1', '0C2C7416A213684422BE8D35D97CFDC120AFF3FACAD48841A1962DDA062E4D2A', '2CF9869A05B18DF684A636BDB382B41D4D9B34FC98D256673EB6A16342C97AE6', '209943B80D67E5453F7A551271A2BDE36EDD1DA7A8564D7F197CBE4320B32E51', '1C462F2C07F412540084995B8D1E925D2EE4C824B6829C9870123F94F3678189', '24CA225B9DCA004E5ABDFE78729CB899C604DF184A8099FEEA33DCB07D294136', '0FE9BF614FAA68A14E5D739163533A2C80411F5C6DAE3D459A69E2AEE28E513C', '1FEB7E6DD377ED31C3829E0CD54BD0C683B1A4A60673F4E77AA5336BFD714E70', '29DE697235B30C2C43942FF40AAE85EE26574004961AF8AEEEA1852187EF3020', '1D0458E9C2EC9939D7E7127739BE6D9E30F7A062406846CB948967905759BA9C', '10F252B1DED5430799A57928B8B6300C15B445431F50F221103DDC7C4367EE39', '24E7F0FB989948C6EE92FAA8D3848BE1DDDEB6548837FBA8EBAC1D2E8124046A', '11D1C122145BDE93ED06F7CA84D4007E33297946B8D11F4518AD3B21EE6BAB31', '280AE6EC81C9B72B4381F9A179330DE245AFE3A48B499AE6227310F4E4E9ABD8', '2C338A77F0EFF6B811433351889D2574CDB6F56D93E6806FFE03FCDE2F8C863F', '01BA2F79C03D0A33CCCE905CE7895EB00A9403C20E6C99F40DD48A6DE39B45D8', '0468A367CA1F5ECFBE35DEB6081C814400FE119AA94924A0C6E6F7D64D7F4BDF', '1A277ECE817DCF1F7BB1E0F75A9A94637CAD740F13CCAA6EDCD6361EC91E01B5', '233E1C9BC76DA49003484AD56171AAB33617D2F6D4E3C76AACA96D4DB344DDE6', '04BE5B23D7FF6ADBFE77B45CA026D6E40240E56C6F66EA1EA7CFD32E53084A8F', '287B6F2C6397416520E661BB3F1CB55F0C36CAB7438953DEC2796EA5BF6F11CD', '0069A3CFFC419660BF6D820E3D4B2337C5EB94E07C3867AB0FA5A3106E7DA51A', '2D59A689D64F7AF69B149BE35568C0B74E4C69D81484ACB5CB9E81DFFB65E9C1', '05744341A9B46C7C8439D8AC4BF3B76679C4A04AAB68A09F6CC77313CEAB4A3C', '09D2ADF8AF1448A5E98D9E09F76218E3AF6A4D585FBA3B20B120E95740C5FC03', '0756B6591AB4D68BEB02519787D55BEB716E17E2566EDBEA11F89D440FD1F210', '30A26B91F31D9221BB31EEB9B857F230FD491E2425252AD342D77B1FA71CD54E', '0A1A5DB42BD4972BBCECE984B011E325A592382B94BB5C9BACF3746F7D91147D', '0DFC4B4676053AF9FAAC8D7AEBDF949F6A028B6B144207C6AC968557663F833C', '11756D4B2A80ABE277FE9A96E42A06DE95DC81925D09BE16B727C8D44E870567', '1CEFF81546664D4EA1F1B686205E0EBCDB249C25C767F0694EA8E100E8359D68', '0D5964685629803FC33767835B0962508E5C1A0DCB8AA84E9BD7DA7AA947C3F5', '07FEDACF80C0B72F0B5D351FF3CE2CA34D6FB6724DABC85296C9D411984ED572', '14BFF18B072C20B908197B9CE16C3271F7CCB77B5ED13C92C8853D6ED2626C07', '09FDCA79DFB030B9852E8F145CC95BAB24E6A41A4010A61419F3D2D67CA59409', '030EF0496C4C59FD351061787CA8F3BA3B0D5FFC9DEE2E35C2420C7224C3498C', '1A8812BC583CD77C61EE641165A561C3F1828CE1EC41F3BFA8939B9515E24EE6', '295EAF8C49997AF6D32F4C775D847DAAA508A1B0E2524107863DB962C82ABA44', '0556E17A9892691512447C4E89D8D8C392E8746155468C6BC4A85DDEBCB76DE4', '1D7E323A47F13930262612E7A6A3F22C2486F3DACA1C372B479928FCFEA13812', '18860F3D8E1598A80F50684E0C37AF47C6AFF876E49E8956BAFA17EF054A5189', '248233C4E61912FDF59AA96976A09267888CC0855AFE781967F6BBB125E67B9E', '0C01126C72E8CEABB6727ED1CCCC82A365AEAA416BE21DAC5661597AB7037B6B', '2B89A45769DA200B5FCEAE4DBB324433A3D4FE769C6EF4DBF3268086C6B117DB', '1D3CED5DCD129E8986880A7BD402DBFAB7526479BCAD43BBBBFCAD5993B6A9C3', '0616132048A34DA92A0407DAD8051B17D01BB367CB9A061D0EDC9688464DEB79', '1F46EEA098D2A7EAE85E1266E8C76D0D7193CB4F50D423124B1BAF86AE05F28F', '289D184CFA91766A77BCD2ACB1B04B2B43298FD04FC63D53399FBEA17824AF0C', '20A95375B51FC9C3028E9A543DF7F4A9A4DA974E3B76F504ABC92EF78CE385DF', '078CA089A3511D2E2F82EF3F66EFE2A23B0BF786CEEE662E456E9A367C55DF38', '28711F0B11F243F675CE4797989802005F8486B5CDCD20CDEB7B86D763B77A54', '1CF0BDEA7AB44EB59F3D4A046D5AF95C0B6FD9BE5410C2C389ED60964BAFC6A0', '25CEBDA7144AB1598B255FB4F19D65D6DD7100CBC5D28F485DBC5C810586C535', '21DE132B5A7F8C917F2756C5FCC9A4F7B560767A6729A583B4A9DA41A99A3F2C', '1A9CC52FFA460B0DE8DE03146A10FE2F21BC45FAB16C4A075C82CB65841BA548', '23FF4C956C11311C8F5FB245DE565B22F65E41C9CC7FC65D314919B422A99411', '22D28D2BC215F43A6CC0DAA7B22B2658C46B82C9369429357337508BFA8807A4', '16E7655E59B6300C942B7046874066C58EBE9E693AC9FEA6AC18CEE70B784440', '1916052011DC8571318294199390366F000DDA5EBA146A81CEB5B08F61BA68CF', '13ECECA2F8339B480E6AF479466F705315CF5F466FD6E9BBF307AB9FF687A35A', '17FB60F59D5AB15FAB02945701E912CBA850E7064D4F2A7525F3DF99153FAF9F', '1F57C4DF7B09DEEB7ACAD2C8FBC346DC3FBCE10A7DC50A2ACF7DF5F9305F9563', '1155FC5D3EA8FFF10600DDD9696B635CE626F4C1805014A7A735C941AF3ACCA7', '0DD61CB1F71AE9AFF6A8DC67DEA84CBD0317E3AEF95C875A8E022EC8267EF695', '26AAF9B4E19ADDFE9B5C0EAE1493B2F776F46CFC3560695F9ABF2B13BBD95D8D', '2CA414340473F9E706848CC75EE3D8A58B1FBE33A8B0E60EE0BB30B877A7B8D5', '2873C666BA20A54C7C09CCE96C907AA747001AFE24DE1C2073B421C06428C87B', '1D6D5914E759858C09CDC39D810E6E6D6AFADDE33838D24E91352E8A6EDF04C0', '1B07D9F74D1F37072C571BCC83E128354F6E64F41A04922F2E7106E4935F1999', '1710F9B6FBA8F6B78E95C258A1E570129538FEF0A5228F4B6FF88D9F764A1761', '045FB01901FACD54184B0C6B356D8B8C211395223582B9E6328C32C06D82F9DC', '139EFFEF73BB73666B137D7AD239E37D373A9D0B299A627FB29214BDBC0FCF56', '17C90C42DC54C6F2B2970F9ADC597B8D0E0E23739F0C1E966E3D0B2246206211', '14536D79FCE9D20832BC5C9F0089C27B6E2A4D74984746F8B73DF4174944BB46', '09CD6CB943D00DA5DD7DBD72B8168CCD3AB2ED22F9E0696B3AF49C792DF76AB4', '09D077DA067D3015961E3B5C7B707DEFA2580BC24A1D83EA45FDE3834B337FBD', '30B2A892E57B6B1B81F216D92CA3BFC938E42C66B730EF4A6C95CF4FB3F45B22', '27D133FC7A65F333C33F5B09DC7C22E045ECF55201B9FD55A8E0AF6EBF69DFE6', '2F6F1D8D6B745F4C509728D664EF1F7E3A5BF34A617688E43B374CDCBE9B81D6', '08FA73DD95B9598ACB90FBA9F486D4D80CC5958C8C5AD3B52FFA8960A76B1CDB', '01652162929349036544D043B0CBD44A8BAFD8D9A8728713EB89C4613E011945', '2F7D55474AE14FE77F8EDD6423C903F34D55567EA091719B0AE893529AD3FA3A', '0F53FAF0074182771A42D9AE64CC73F4729F4BE5140A256C7A71D17442A2184A', '05C9575AADFBC41A1205580E3BF5CC7091719E4CFDC0A4245D6E6180163DE260', '0BD886C6E8A6FA90340EC5EAB4170401705E51AF07BA6E782C4D1CCD6CBFC652', '03B6EBB3E4FA431476FC2DE565D1F27464CD0888AC06A9551DB036CBD08EEE1E', '279C30661CFA2C0A915EAF725005C137D5FB59457E0AFE104F26F671DA43784A', '302CEE2916BF52FF22A4D85B2543F443810544C46CB1CF3332902C6E16222A28', '0F3C5767CE8818265193F277A0EF380F24A0CABAB46708F069760E536D520F4A', '3106D384E9FDEFEB339D95BCC413E380E3A1B52D0DF50BD68E70064FF77A8F92', '1E39D49E91CE52EE30D15E9B0C4678E1E36C643CAF33304E92B9A02FBFA10FE0', '02B94928D67D4332E5822551565CAC0F538786E363B5C88ADFCDC5FA3AC4D017', '27D43BA2D38658BA723A6770493D0372149875CBC30C1077215FCBA694E96630', '057648D2CE06030E7B00B8F87677F7217554077E3951526F2FB6855343D9CAE5', '1F74DA3BFAE3380E3CA6DD1C01F62C2064DA32C545D9B6853B8624F3A4481801', '1B55E9BD0E523F66139A7811076B0F1B960F7ED0C656EB2DDA184C140B4554E9', '2C2426F665796E28B39B0321735F461929087B43DDB19CCB1320824D1EE4220F', '01EBBFB03B02FA3ED81334887B4EF5DD230F7048670F9F42AF58749B4603353B', '101AE6217698A8A9639BDFD13C30B6C4188AA6E92F4A9E365515BD3C5A6C4B0E', '1909E8577D22FB50F0097539715121F79C5CD65120BD0AFF5BC96C1BCC113331', '0954EF92C1566EE62AD4E3E577F8DB47D7D580A1AB22E47FE47459E890BF1492', '04B55C05DA0CC75BCEDEE5A61289B8C6DA73764F0421FD2A6D478B593873FEF9', '2CBCDDA3D9009C7AA0E0F67D6C6F1CE8066DCD43156998F011F43BBBA1995456', '0FA172AAAA843942AF03778634DC45433A2BDEA771D6F0F4FE480C143A96D1A4', '2A017E6D55DDFA7CF9ED13051102E1D047844D8B9DE3AE0DE52CE88797205D6D', '2669166FD902967B9507DDD14213E8B4D4CAAF98520D2304945863D865159740', '19B3C283B02B627DA6CFEDD2EA6CF1A14A7DBEA1237BD0E14651C5FD8AC9A25C', '09509DE54153392FC539B67E19340D419594A7FB8351DF1A17B506A78702C6BB', '0E667B936058F63A23D5FED9614A7295CA4B9ECD4AE54AA5FA07B6F9C7157522', '196E1AEEA1661ECD7FB95DBD5DCA3D4932B6639DC296F37E6CE1B1B4F8671798', '04EAD1F782E5C69FBDF2EC7E047A370D42928F3EAA662AC28BA1E6D3A7DEB55A', '2AFFF128854F6EC359AC70D416479D0152C7C117EA74EBC5FDCB2DD49E0B3B7B', '14AC97388908279AF51B99EF3A4E6CE65160A486FD0EF8D00169E23AF45FFE21', '20A778F1104627C0FD0C7401A1DCEF1AF435C2D6A17526545843A5C659EF896B', '09EA968FFDAE0E2D5B276CF11AD3C954FB0511723AD1B0BAAC323E48647C7C67', '09F160988025C302ACCAC9547D0401AF7546828CEF4F69D32B6E82FF9C480533', '261174ED5BD681055DEE52503349EC2B21D385CBA3C4212A7F13B7853866420B', '0A314847B470AD90939C28458878782C7D190F3829A100DD7E1DCD8E8D63BB6E', '0AC84F757215C58C2786F7ECEEA5EE0958C0BCEB5480F3DE010014980351C7BB', '26149C983B76C67F87FC29F28266F768B9B9F0683295C7E50AD3E9713B3BF957', '09A412A3FE89B5D79B6320F5285C5856F41A9B9FB2C74672A9D3B97EA7D83B0A', '0B1B3B57D4EC963151790231716767ABBEC6E8CA15CAB38ED0C9AE46068FE54F', '117459F0A80FF4DE97B6B696E4B05512E5E9BA28BEFB23DF0F50891CB80B0C15', '1873ECE29725A1793752EF5AEBC716B58D0FE723F70FC80BA5A27932B09AF4F3']

for app in Apps_To_Investigate_List:
    cprint('\n' + app, 'cyan')
    filtered_df = all_data_df[all_data_df['App_Name'] == app]
    filtered_df = filtered_df [filtered_df ['App_Library'].str.contains('google')]
    # print(filtered_df[['App_Method']])
    for item in list(bigrams(filtered_df['App_Method'].tolist())):
          t1 = item[0]
          t2 = item[1]
          if not t1.__contains__('zz') and not t2.__contains__('zz'):
              print(t1, ' ->', t2)
          # print(blockchain.Validate_Transitions(t1, t2))



# for app in this_apps:
# 	cprint('\n' + app, 'cyan')
# 	filtered_df = all_data_df[all_data_df['App_Name'] == app]
# 	filtered_df = filtered_df [filtered_df ['App_Library'].str.contains('google')]
# 	#print(filtered_df[['App_Method']])
# 	#print(list(bigrams(filtered_df['App_Method'].tolist())))
# 	for item in list(bigrams(filtered_df['App_Method'].tolist())):
# 		t1 = item[0]
# 		t2 = item[1]
# 		print(t1, ' ->', t2)
# 		print(blockchain.Validate_Transitions(t1, t2))

