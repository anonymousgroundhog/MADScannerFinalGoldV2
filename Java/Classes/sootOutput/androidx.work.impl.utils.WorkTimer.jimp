public class androidx.work.impl.utils.WorkTimer extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final java.util.concurrent.ThreadFactory mBackgroundThreadFactory;
    private final java.util.concurrent.ScheduledExecutorService mExecutorService;
    final java.util.Map mListeners;
    final java.lang.Object mLock;
    final java.util.Map mTimerMap;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = androidx.work.Logger.tagWithPrefix("WorkTimer");

        androidx.work.impl.utils.WorkTimer.TAG = $r0;

        return;
    }

    public void <init>()
    {
        androidx.work.impl.utils.WorkTimer r0;
        androidx.work.impl.utils.WorkTimer$1 $r2;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.util.HashMap $r3;
        java.lang.Object $r4;

        r0 := @this;

        specialinvoke r0.<init>();

        $r2 = new androidx.work.impl.utils.WorkTimer$1;

        specialinvoke $r2.<init>(r0);

        r0.mBackgroundThreadFactory = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<init>();

        r0.mTimerMap = $r3;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<init>();

        r0.mListeners = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<init>();

        r0.mLock = $r4;

        $r1 = java.util.concurrent.Executors.newSingleThreadScheduledExecutor($r2);

        r0.mExecutorService = $r1;

        return;
    }

    public java.util.concurrent.ScheduledExecutorService getExecutorService()
    {
        java.util.concurrent.ScheduledExecutorService r1;
        androidx.work.impl.utils.WorkTimer r0;

        r0 := @this;

        r1 = r0.mExecutorService;

        return r1;
    }

    public java.util.Map getListeners()
    {
        java.lang.Throwable $r1;
        androidx.work.impl.utils.WorkTimer r0;
        java.util.Map r2;

        r0 := @this;

        entermonitor r0;

     label1:
        r2 = r0.mListeners;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Map getTimerMap()
    {
        java.lang.Throwable $r1;
        androidx.work.impl.utils.WorkTimer r0;
        java.util.Map r2;

        r0 := @this;

        entermonitor r0;

     label1:
        r2 = r0.mTimerMap;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onDestroy()
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        androidx.work.impl.utils.WorkTimer r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mExecutorService;

        $z0 = interfaceinvoke $r1.isShutdown();

        if $z0 != 0 goto label1;

        $r1 = r0.mExecutorService;

        interfaceinvoke $r1.shutdownNow();

     label1:
        return;
    }

    public void startTimer(java.lang.String, long, androidx.work.impl.utils.WorkTimer$TimeLimitExceededListener)
    {
        java.lang.Throwable r13;
        androidx.work.impl.utils.WorkTimer r0;
        java.lang.Object[] $r6;
        long $l0;
        java.util.concurrent.TimeUnit $r12;
        androidx.work.Logger $r4;
        androidx.work.impl.utils.WorkTimer$WorkTimerRunnable r9;
        androidx.work.impl.utils.WorkTimer$TimeLimitExceededListener $r2;
        java.lang.Throwable[] $r8;
        java.util.Map $r10;
        java.util.concurrent.ScheduledExecutorService $r11;
        java.lang.Object $r3;
        java.lang.String $r1, $r5, $r7;

        r0 := @this;

        $r1 := @parameter0;

        $l0 := @parameter1;

        $r2 := @parameter2;

        $r3 = r0.mLock;

        entermonitor $r3;

     label1:
        $r4 = androidx.work.Logger.get();

        $r5 = androidx.work.impl.utils.WorkTimer.TAG;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        $r7 = java.lang.String.format("Starting timer for %s", $r6);

        $r8 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r5, $r7, $r8);

        virtualinvoke r0.stopTimer($r1);

        r9 = new androidx.work.impl.utils.WorkTimer$WorkTimerRunnable;

        specialinvoke r9.<init>(r0, $r1);

        $r10 = r0.mTimerMap;

        interfaceinvoke $r10.put($r1, r9);

        $r10 = r0.mListeners;

        interfaceinvoke $r10.put($r1, $r2);

        $r11 = r0.mExecutorService;

        $r12 = java.util.concurrent.TimeUnit.MILLISECONDS;

        interfaceinvoke $r11.schedule(r9, $l0, $r12);

        exitmonitor $r3;

     label2:
        return;

     label3:
        r13 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw r13;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void stopTimer(java.lang.String)
    {
        java.lang.Throwable r11;
        androidx.work.impl.utils.WorkTimer r0;
        java.lang.Object[] $r8;
        androidx.work.Logger $r7;
        androidx.work.impl.utils.WorkTimer$WorkTimerRunnable r6;
        java.util.Map r4;
        java.lang.Throwable[] $r10;
        java.lang.Object $r2, $r5;
        java.lang.String $r1, $r3, $r9;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mLock;

        entermonitor $r2;

     label1:
        r4 = r0.mTimerMap;

        $r5 = interfaceinvoke r4.remove($r1);

        r6 = (androidx.work.impl.utils.WorkTimer$WorkTimerRunnable) $r5;

        if r6 == null goto label2;

        $r7 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.utils.WorkTimer.TAG;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r1;

        $r9 = java.lang.String.format("Stopping timer for %s", $r8);

        $r10 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r7.debug($r3, $r9, $r10);

        r4 = r0.mListeners;

        interfaceinvoke r4.remove($r1);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        r11 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
