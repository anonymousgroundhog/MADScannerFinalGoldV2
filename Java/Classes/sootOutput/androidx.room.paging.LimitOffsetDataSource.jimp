public abstract class androidx.room.paging.LimitOffsetDataSource extends androidx.paging.PositionalDataSource
{
    private final java.lang.String mCountQuery;
    private final androidx.room.RoomDatabase mDb;
    private final boolean mInTransaction;
    private final java.lang.String mLimitOffsetQuery;
    private final androidx.room.InvalidationTracker$Observer mObserver;
    private final androidx.room.RoomSQLiteQuery mSourceQuery;

    protected transient void <init>(androidx.room.RoomDatabase, androidx.room.RoomSQLiteQuery, boolean, java.lang.String[])
    {
        androidx.room.InvalidationTracker $r7;
        androidx.room.RoomSQLiteQuery $r2;
        androidx.room.RoomDatabase $r1;
        java.lang.String[] $r3;
        androidx.room.paging.LimitOffsetDataSource$1 $r6;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        androidx.room.paging.LimitOffsetDataSource r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $z0 := @parameter2;

        $r3 := @parameter3;

        specialinvoke r0.<init>();

        r0.mDb = $r1;

        r0.mSourceQuery = $r2;

        r0.mInTransaction = $z0;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r4 = virtualinvoke $r4.append("SELECT COUNT(*) FROM ( ");

        $r5 = virtualinvoke $r2.getSql();

        $r4 = virtualinvoke $r4.append($r5);

        $r4 = virtualinvoke $r4.append(" )");

        $r5 = virtualinvoke $r4.toString();

        r0.mCountQuery = $r5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r4 = virtualinvoke $r4.append("SELECT * FROM ( ");

        $r5 = virtualinvoke $r2.getSql();

        $r4 = virtualinvoke $r4.append($r5);

        $r4 = virtualinvoke $r4.append(" ) LIMIT ? OFFSET ?");

        $r5 = virtualinvoke $r4.toString();

        r0.mLimitOffsetQuery = $r5;

        $r6 = new androidx.room.paging.LimitOffsetDataSource$1;

        specialinvoke $r6.<init>(r0, $r3);

        r0.mObserver = $r6;

        $r7 = virtualinvoke $r1.getInvalidationTracker();

        virtualinvoke $r7.addWeakObserver($r6);

        return;
    }

    protected transient void <init>(androidx.room.RoomDatabase, androidx.sqlite.db.SupportSQLiteQuery, boolean, java.lang.String[])
    {
        androidx.room.RoomSQLiteQuery $r4;
        androidx.room.RoomDatabase $r1;
        androidx.sqlite.db.SupportSQLiteQuery $r2;
        java.lang.String[] $r3;
        androidx.room.paging.LimitOffsetDataSource r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $z0 := @parameter2;

        $r3 := @parameter3;

        $r4 = androidx.room.RoomSQLiteQuery.copyFrom($r2);

        specialinvoke r0.<init>($r1, $r4, $z0, $r3);

        return;
    }

    private androidx.room.RoomSQLiteQuery getSQLiteQuery(int, int)
    {
        androidx.room.RoomSQLiteQuery $r2, $r3;
        long $l3;
        int $i0, $i1, $i2;
        java.lang.String r1;
        androidx.room.paging.LimitOffsetDataSource r0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        r1 = r0.mLimitOffsetQuery;

        $r2 = r0.mSourceQuery;

        $i2 = virtualinvoke $r2.getArgCount();

        $i2 = $i2 + 2;

        $r2 = androidx.room.RoomSQLiteQuery.acquire(r1, $i2);

        $r3 = r0.mSourceQuery;

        virtualinvoke $r2.copyArgumentsFrom($r3);

        $i2 = virtualinvoke $r2.getArgCount();

        $i2 = $i2 + -1;

        $l3 = (long) $i1;

        virtualinvoke $r2.bindLong($i2, $l3);

        $i1 = virtualinvoke $r2.getArgCount();

        $l3 = (long) $i0;

        virtualinvoke $r2.bindLong($i1, $l3);

        return $r2;
    }

    protected abstract java.util.List convertRows(android.database.Cursor);

    public int countItems()
    {
        java.lang.Throwable $r6;
        androidx.room.RoomSQLiteQuery r2, r3;
        androidx.room.RoomDatabase r4;
        int $i0;
        java.lang.String r1;
        androidx.room.paging.LimitOffsetDataSource r0;
        android.database.Cursor $r5;
        boolean $z0;

        r0 := @this;

        r1 = r0.mCountQuery;

        r2 = r0.mSourceQuery;

        $i0 = virtualinvoke r2.getArgCount();

        r2 = androidx.room.RoomSQLiteQuery.acquire(r1, $i0);

        r3 = r0.mSourceQuery;

        virtualinvoke r2.copyArgumentsFrom(r3);

        r4 = r0.mDb;

        $r5 = virtualinvoke r4.query(r2);

     label1:
        $z0 = interfaceinvoke $r5.moveToFirst();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $i0 = interfaceinvoke $r5.getInt(0);

     label4:
        interfaceinvoke $r5.close();

        virtualinvoke r2.release();

        return $i0;

     label5:
        interfaceinvoke $r5.close();

        virtualinvoke r2.release();

        return 0;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke $r5.close();

        virtualinvoke r2.release();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public boolean isInvalid()
    {
        androidx.room.InvalidationTracker $r2;
        androidx.room.RoomDatabase $r1;
        androidx.room.paging.LimitOffsetDataSource r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDb;

        $r2 = virtualinvoke $r1.getInvalidationTracker();

        virtualinvoke $r2.refreshVersionsSync();

        $z0 = specialinvoke r0.isInvalid();

        return $z0;
    }

    public void loadInitial(androidx.paging.PositionalDataSource$LoadInitialParams, androidx.paging.PositionalDataSource$LoadInitialCallback)
    {
        java.lang.Throwable r9;
        androidx.room.RoomSQLiteQuery r5, $r7;
        androidx.room.RoomDatabase $r3;
        androidx.paging.PositionalDataSource$LoadInitialParams $r1;
        java.util.List $r4;
        int i0, $i1, $i2, $i3;
        androidx.paging.PositionalDataSource$LoadInitialCallback r2;
        androidx.room.paging.LimitOffsetDataSource r0;
        android.database.Cursor r6, $r8;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        $r4 = java.util.Collections.emptyList();

        i0 = 0;

        r5 = null;

        r6 = null;

        $r3 = r0.mDb;

        virtualinvoke $r3.beginTransaction();

     label01:
        $i1 = virtualinvoke r0.countItems();

     label02:
        if $i1 == 0 goto label10;

     label03:
        $i2 = androidx.room.paging.LimitOffsetDataSource.computeInitialLoadPosition($r1, $i1);

     label04:
        i0 = $i2;

     label05:
        $i3 = androidx.room.paging.LimitOffsetDataSource.computeInitialLoadSize($r1, $i2, $i1);

        $r7 = specialinvoke r0.getSQLiteQuery($i2, $i3);

     label06:
        r5 = $r7;

     label07:
        $r3 = r0.mDb;

        $r8 = virtualinvoke $r3.query($r7);

     label08:
        r6 = $r8;

     label09:
        $r4 = virtualinvoke r0.convertRows($r8);

        $r3 = r0.mDb;

        virtualinvoke $r3.setTransactionSuccessful();

     label10:
        if r6 == null goto label11;

        interfaceinvoke r6.close();

     label11:
        $r3 = r0.mDb;

        virtualinvoke $r3.endTransaction();

        if r5 == null goto label12;

        virtualinvoke r5.release();

     label12:
        virtualinvoke r2.onResult($r4, i0, $i1);

        return;

     label13:
        r9 := @caughtexception;

        if r6 == null goto label14;

        interfaceinvoke r6.close();

     label14:
        $r3 = r0.mDb;

        virtualinvoke $r3.endTransaction();

        if r5 == null goto label15;

        virtualinvoke r5.release();

     label15:
        throw r9;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
    }

    public java.util.List loadRange(int, int)
    {
        java.lang.Throwable r6, r7;
        androidx.room.RoomSQLiteQuery $r1;
        androidx.room.RoomDatabase r2;
        java.util.List $r5;
        int $i0, $i1;
        androidx.room.paging.LimitOffsetDataSource r0;
        boolean z0;
        android.database.Cursor r3, $r4;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $r1 = specialinvoke r0.getSQLiteQuery($i0, $i1);

        z0 = r0.mInTransaction;

        if z0 == 0 goto label08;

        r2 = r0.mDb;

        virtualinvoke r2.beginTransaction();

        r3 = null;

     label01:
        r2 = r0.mDb;

        $r4 = virtualinvoke r2.query($r1);

     label02:
        r3 = $r4;

     label03:
        $r5 = virtualinvoke r0.convertRows($r4);

        r2 = r0.mDb;

        virtualinvoke r2.setTransactionSuccessful();

     label04:
        if $r4 == null goto label05;

        interfaceinvoke $r4.close();

     label05:
        r2 = r0.mDb;

        virtualinvoke r2.endTransaction();

        virtualinvoke $r1.release();

        return $r5;

     label06:
        r6 := @caughtexception;

        if r3 == null goto label07;

        interfaceinvoke r3.close();

     label07:
        r2 = r0.mDb;

        virtualinvoke r2.endTransaction();

        virtualinvoke $r1.release();

        throw r6;

     label08:
        r2 = r0.mDb;

        r3 = virtualinvoke r2.query($r1);

     label09:
        $r5 = virtualinvoke r0.convertRows(r3);

     label10:
        interfaceinvoke r3.close();

        virtualinvoke $r1.release();

        return $r5;

     label11:
        r7 := @caughtexception;

        interfaceinvoke r3.close();

        virtualinvoke $r1.release();

        throw r7;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void loadRange(androidx.paging.PositionalDataSource$LoadRangeParams, androidx.paging.PositionalDataSource$LoadRangeCallback)
    {
        androidx.paging.PositionalDataSource$LoadRangeCallback r2;
        java.util.List $r3;
        int $i0, $i1;
        androidx.paging.PositionalDataSource$LoadRangeParams $r1;
        androidx.room.paging.LimitOffsetDataSource r0;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        $i1 = $r1.startPosition;

        $i0 = $r1.loadSize;

        $r3 = virtualinvoke r0.loadRange($i1, $i0);

        virtualinvoke r2.onResult($r3);

        return;
    }
}
