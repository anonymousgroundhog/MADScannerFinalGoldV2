public class androidx.arch.core.executor.DefaultTaskExecutor extends androidx.arch.core.executor.TaskExecutor
{
    private final java.util.concurrent.ExecutorService mDiskIO;
    private final java.lang.Object mLock;
    private volatile android.os.Handler mMainHandler;

    public void <init>()
    {
        androidx.arch.core.executor.DefaultTaskExecutor$1 $r3;
        java.lang.Object $r2;
        java.util.concurrent.ExecutorService $r1;
        androidx.arch.core.executor.DefaultTaskExecutor r0;

        r0 := @this;

        specialinvoke r0.<init>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<init>();

        r0.mLock = $r2;

        $r3 = new androidx.arch.core.executor.DefaultTaskExecutor$1;

        specialinvoke $r3.<init>(r0);

        $r1 = java.util.concurrent.Executors.newFixedThreadPool(4, $r3);

        r0.mDiskIO = $r1;

        return;
    }

    private static android.os.Handler createAsync(android.os.Looper)
    {
        java.lang.IllegalAccessException r12;
        java.lang.Object[] $r6;
        java.lang.NoSuchMethodException r10;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r5;
        java.lang.reflect.InvocationTargetException r9;
        android.os.Looper $r0;
        android.os.Handler $r1;
        int i0;
        java.lang.InstantiationException r11;
        java.lang.Boolean $r7;
        java.lang.Class r2, $r4;
        java.lang.Object $r8;

        $r0 := @parameter0;

        i0 = android.os.Build$VERSION.SDK_INT;

        if i0 < 28 goto label01;

        $r1 = android.os.Handler.createAsync($r0);

        return $r1;

     label01:
        r2 = class "Landroid/os/Handler;";

        $r3 = newarray (java.lang.Class)[3];

        $r3[0] = class "Landroid/os/Looper;";

        $r3[1] = class "Landroid/os/Handler$Callback;";

        $r4 = java.lang.Boolean.TYPE;

        $r3[2] = $r4;

     label02:
        $r5 = virtualinvoke r2.getDeclaredConstructor($r3);

     label03:
        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = $r0;

        $r6[1] = null;

     label04:
        $r7 = java.lang.Boolean.valueOf(1);

     label05:
        $r6[2] = $r7;

     label06:
        $r8 = virtualinvoke $r5.newInstance($r6);

     label07:
        $r1 = (android.os.Handler) $r8;

        return $r1;

     label08:
        r9 := @caughtexception;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<init>($r0);

        return $r1;

     label09:
        r10 := @caughtexception;

        goto label12;

     label10:
        r11 := @caughtexception;

        goto label12;

     label11:
        r12 := @caughtexception;

     label12:
        $r1 = new android.os.Handler;

        specialinvoke $r1.<init>($r0);

        return $r1;

        catch java.lang.IllegalAccessException from label02 to label03 with label11;
        catch java.lang.IllegalAccessException from label04 to label05 with label11;
        catch java.lang.IllegalAccessException from label06 to label07 with label11;
        catch java.lang.InstantiationException from label02 to label03 with label10;
        catch java.lang.InstantiationException from label04 to label05 with label10;
        catch java.lang.InstantiationException from label06 to label07 with label10;
        catch java.lang.NoSuchMethodException from label02 to label03 with label09;
        catch java.lang.NoSuchMethodException from label04 to label05 with label09;
        catch java.lang.NoSuchMethodException from label06 to label07 with label09;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label08;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label08;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        java.lang.Runnable $r1;
        java.util.concurrent.ExecutorService $r2;
        androidx.arch.core.executor.DefaultTaskExecutor r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDiskIO;

        interfaceinvoke $r2.execute($r1);

        return;
    }

    public boolean isMainThread()
    {
        android.os.Looper $r1;
        java.lang.Thread $r2, $r3;
        androidx.arch.core.executor.DefaultTaskExecutor r0;

        r0 := @this;

        $r1 = android.os.Looper.getMainLooper();

        $r2 = virtualinvoke $r1.getThread();

        $r3 = java.lang.Thread.currentThread();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        java.lang.Throwable $r5;
        android.os.Handler $r2;
        android.os.Looper $r4;
        java.lang.Object $r3;
        java.lang.Runnable $r1;
        androidx.arch.core.executor.DefaultTaskExecutor r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mMainHandler;

        if $r2 != null goto label6;

        $r3 = r0.mLock;

        entermonitor $r3;

     label1:
        $r2 = r0.mMainHandler;

        if $r2 != null goto label2;

        $r4 = android.os.Looper.getMainLooper();

        $r2 = androidx.arch.core.executor.DefaultTaskExecutor.createAsync($r4);

        r0.mMainHandler = $r2;

     label2:
        exitmonitor $r3;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r5;

     label6:
        $r2 = r0.mMainHandler;

        virtualinvoke $r2.post($r1);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
