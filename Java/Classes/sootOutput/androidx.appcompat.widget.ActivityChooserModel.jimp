class androidx.appcompat.widget.ActivityChooserModel extends android.database.DataSetObservable
{
    static final java.lang.String ATTRIBUTE_ACTIVITY;
    static final java.lang.String ATTRIBUTE_TIME;
    static final java.lang.String ATTRIBUTE_WEIGHT;
    static final boolean DEBUG;
    private static final int DEFAULT_ACTIVITY_INFLATION;
    private static final float DEFAULT_HISTORICAL_RECORD_WEIGHT;
    public static final java.lang.String DEFAULT_HISTORY_FILE_NAME;
    public static final int DEFAULT_HISTORY_MAX_LENGTH;
    private static final java.lang.String HISTORY_FILE_EXTENSION;
    private static final int INVALID_INDEX;
    static final java.lang.String LOG_TAG;
    static final java.lang.String TAG_HISTORICAL_RECORD;
    static final java.lang.String TAG_HISTORICAL_RECORDS;
    private static final java.util.Map sDataModelRegistry;
    private static final java.lang.Object sRegistryLock;
    private final java.util.List mActivities;
    private androidx.appcompat.widget.ActivityChooserModel$OnChooseActivityListener mActivityChoserModelPolicy;
    private androidx.appcompat.widget.ActivityChooserModel$ActivitySorter mActivitySorter;
    boolean mCanReadHistoricalData;
    final android.content.Context mContext;
    private final java.util.List mHistoricalRecords;
    private boolean mHistoricalRecordsChanged;
    final java.lang.String mHistoryFileName;
    private int mHistoryMaxSize;
    private final java.lang.Object mInstanceLock;
    private android.content.Intent mIntent;
    private boolean mReadShareHistoryCalled;
    private boolean mReloadActivities;

    static void <clinit>()
    {
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;
        java.lang.String $r0;

        $r1 = class "Landroidx/appcompat/widget/ActivityChooserModel;";

        $r0 = virtualinvoke $r1.getSimpleName();

        androidx.appcompat.widget.ActivityChooserModel.LOG_TAG = $r0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<init>();

        androidx.appcompat.widget.ActivityChooserModel.sRegistryLock = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<init>();

        androidx.appcompat.widget.ActivityChooserModel.sDataModelRegistry = $r3;

        return;
    }

    private void <init>(android.content.Context, java.lang.String)
    {
        android.content.Context $r1;
        androidx.appcompat.widget.ActivityChooserModel$DefaultSorter $r5;
        java.util.ArrayList $r4;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6;
        java.lang.String $r2;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        specialinvoke r0.<init>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<init>();

        r0.mInstanceLock = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<init>();

        r0.mActivities = $r4;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<init>();

        r0.mHistoricalRecords = $r4;

        $r5 = new androidx.appcompat.widget.ActivityChooserModel$DefaultSorter;

        specialinvoke $r5.<init>();

        r0.mActivitySorter = $r5;

        r0.mHistoryMaxSize = 50;

        r0.mCanReadHistoricalData = 1;

        r0.mReadShareHistoryCalled = 0;

        r0.mHistoricalRecordsChanged = 1;

        r0.mReloadActivities = 0;

        $r1 = virtualinvoke $r1.getApplicationContext();

        r0.mContext = $r1;

        $z0 = android.text.TextUtils.isEmpty($r2);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.endsWith(".xml");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r6 = virtualinvoke $r6.append($r2);

        $r6 = virtualinvoke $r6.append(".xml");

        $r2 = virtualinvoke $r6.toString();

        r0.mHistoryFileName = $r2;

        return;

     label1:
        r0.mHistoryFileName = $r2;

        return;
    }

    private boolean addHistoricalRecord(androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord)
    {
        java.util.List r2;
        androidx.appcompat.widget.ActivityChooserModel r0;
        androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mHistoricalRecords;

        $z0 = interfaceinvoke r2.add($r1);

        if $z0 == 0 goto label1;

        r0.mHistoricalRecordsChanged = 1;

        specialinvoke r0.pruneExcessiveHistoricalRecordsIfNeeded();

        specialinvoke r0.persistHistoricalDataIfNeeded();

        specialinvoke r0.sortActivitiesIfNeeded();

        virtualinvoke r0.notifyChanged();

     label1:
        return $z0;
    }

    private void ensureConsistentState()
    {
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0, $z1;

        r0 := @this;

        $z0 = specialinvoke r0.loadActivitiesIfNeeded();

        $z1 = specialinvoke r0.readHistoricalDataIfNeeded();

        $z0 = $z0 | $z1;

        specialinvoke r0.pruneExcessiveHistoricalRecordsIfNeeded();

        if $z0 == 0 goto label1;

        specialinvoke r0.sortActivitiesIfNeeded();

        virtualinvoke r0.notifyChanged();

     label1:
        return;
    }

    public static androidx.appcompat.widget.ActivityChooserModel get(android.content.Context, java.lang.String)
    {
        java.lang.Throwable $r7;
        android.content.Context $r0;
        java.util.Map $r5;
        java.lang.Object $r2, $r4;
        java.lang.String $r1;
        androidx.appcompat.widget.ActivityChooserModel $r3, r6;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 = androidx.appcompat.widget.ActivityChooserModel.sRegistryLock;

        entermonitor $r2;

     label1:
        $r5 = androidx.appcompat.widget.ActivityChooserModel.sDataModelRegistry;

        $r4 = interfaceinvoke $r5.get($r1);

        r6 = (androidx.appcompat.widget.ActivityChooserModel) $r4;

        if r6 != null goto label2;

        $r3 = new androidx.appcompat.widget.ActivityChooserModel;

        specialinvoke $r3.<init>($r0, $r1);

        r6 = $r3;

        interfaceinvoke $r5.put($r1, $r3);

     label2:
        exitmonitor $r2;

     label3:
        return r6;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean loadActivitiesIfNeeded()
    {
        android.content.Context r4;
        android.content.pm.PackageManager $r5;
        android.content.Intent r3;
        androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo $r2;
        android.content.pm.ResolveInfo r8;
        java.util.List $r1, $r6;
        int $i0, i1;
        java.lang.Object $r7;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean z0;

        r0 := @this;

        z0 = r0.mReloadActivities;

        if z0 == 0 goto label3;

        r3 = r0.mIntent;

        if r3 == null goto label3;

        r0.mReloadActivities = 0;

        $r1 = r0.mActivities;

        interfaceinvoke $r1.clear();

        r4 = r0.mContext;

        $r5 = virtualinvoke r4.getPackageManager();

        r3 = r0.mIntent;

        $r6 = virtualinvoke $r5.queryIntentActivities(r3, 0);

        $i0 = interfaceinvoke $r6.size();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r7 = interfaceinvoke $r6.get(i1);

        r8 = (android.content.pm.ResolveInfo) $r7;

        $r1 = r0.mActivities;

        $r2 = new androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo;

        specialinvoke $r2.<init>(r8);

        interfaceinvoke $r1.add($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return 1;

     label3:
        return 0;
    }

    private void persistHistoricalDataIfNeeded()
    {
        java.lang.IllegalStateException $r7;
        java.lang.Object[] $r5;
        java.util.concurrent.Executor $r1;
        java.util.ArrayList $r6;
        java.util.List $r2;
        androidx.appcompat.widget.ActivityChooserModel$PersistHistoryAsyncTask $r4;
        java.lang.String $r3;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.mReadShareHistoryCalled;

        if $z0 == 0 goto label2;

        $z0 = r0.mHistoricalRecordsChanged;

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.mHistoricalRecordsChanged = 0;

        $r3 = r0.mHistoryFileName;

        $z0 = android.text.TextUtils.isEmpty($r3);

        if $z0 != 0 goto label3;

        $r4 = new androidx.appcompat.widget.ActivityChooserModel$PersistHistoryAsyncTask;

        specialinvoke $r4.<init>(r0);

        $r1 = android.os.AsyncTask.THREAD_POOL_EXECUTOR;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = new java.util.ArrayList;

        $r2 = r0.mHistoricalRecords;

        specialinvoke $r6.<init>($r2);

        $r5[0] = $r6;

        $r3 = r0.mHistoryFileName;

        $r5[1] = $r3;

        virtualinvoke $r4.executeOnExecutor($r1, $r5);

        return;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<init>("No preceding call to #readHistoricalData");

        throw $r7;

     label3:
        return;
    }

    private void pruneExcessiveHistoricalRecordsIfNeeded()
    {
        java.util.List r1;
        int $i0, i1;
        java.lang.Object $r2;
        androidx.appcompat.widget.ActivityChooserModel r0;
        androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord $r3;

        r0 := @this;

        r1 = r0.mHistoricalRecords;

        $i0 = interfaceinvoke r1.size();

        i1 = r0.mHistoryMaxSize;

        $i0 = $i0 - i1;

        if $i0 > 0 goto label1;

        return;

     label1:
        r0.mHistoricalRecordsChanged = 1;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        r1 = r0.mHistoricalRecords;

        $r2 = interfaceinvoke r1.remove(0);

        $r3 = (androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord) $r2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private boolean readHistoricalDataIfNeeded()
    {
        java.lang.String $r1;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.mCanReadHistoricalData;

        if $z0 == 0 goto label1;

        $z0 = r0.mHistoricalRecordsChanged;

        if $z0 == 0 goto label1;

        $r1 = r0.mHistoryFileName;

        $z0 = android.text.TextUtils.isEmpty($r1);

        if $z0 != 0 goto label1;

        r0.mCanReadHistoricalData = 0;

        r0.mReadShareHistoryCalled = 1;

        specialinvoke r0.readHistoricalDataImpl();

        return 1;

     label1:
        return 0;
    }

    private void readHistoricalDataImpl()
    {
        java.lang.Throwable r9;
        android.content.Context r1;
        long $l1;
        int i0;
        java.lang.String r2, $r5;
        org.xmlpull.v1.XmlPullParser $r4;
        boolean $z0;
        java.io.IOException r10, r12, r13;
        java.io.FileInputStream $r3;
        java.io.FileNotFoundException r14;
        org.xmlpull.v1.XmlPullParserException $r8;
        java.util.List r6;
        float $f0;
        java.lang.StringBuilder $r11;
        androidx.appcompat.widget.ActivityChooserModel r0;
        androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord r7;

        r0 := @this;

        r1 = r0.mContext;

        r2 = r0.mHistoryFileName;

     label01:
        $r3 = virtualinvoke r1.openFileInput(r2);

     label02:
        $r4 = android.util.Xml.newPullParser();

        interfaceinvoke $r4.setInput($r3, "UTF-8");

     label03:
        i0 = 0;

     label04:
        if i0 == 1 goto label07;

        if i0 == 2 goto label07;

     label05:
        i0 = interfaceinvoke $r4.next();

     label06:
        goto label04;

     label07:
        r2 = "historical-records";

     label08:
        $r5 = interfaceinvoke $r4.getName();

        $z0 = virtualinvoke r2.equals($r5);

     label09:
        if $z0 == 0 goto label28;

     label10:
        r6 = r0.mHistoricalRecords;

     label11:
        interfaceinvoke r6.clear();

     label12:
        i0 = interfaceinvoke $r4.next();

     label13:
        if i0 != 1 goto label16;

        if $r3 == null goto label43;

     label14:
        virtualinvoke $r3.close();

     label15:
        goto label41;

     label16:
        if i0 == 3 goto label12;

        if i0 != 4 goto label17;

        goto label12;

     label17:
        r2 = interfaceinvoke $r4.getName();

     label18:
        $r5 = "historical-record";

     label19:
        $z0 = virtualinvoke $r5.equals(r2);

     label20:
        if $z0 == 0 goto label25;

     label21:
        r2 = interfaceinvoke $r4.getAttributeValue(null, "activity");

        $r5 = interfaceinvoke $r4.getAttributeValue(null, "time");

        $l1 = java.lang.Long.parseLong($r5);

        $r5 = interfaceinvoke $r4.getAttributeValue(null, "weight");

        $f0 = java.lang.Float.parseFloat($r5);

     label22:
        r7 = new androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord;

     label23:
        specialinvoke r7.<init>(r2, $l1, $f0);

        interfaceinvoke r6.add(r7);

     label24:
        goto label12;

     label25:
        $r8 = new org.xmlpull.v1.XmlPullParserException;

     label26:
        specialinvoke $r8.<init>("Share records file not well-formed.");

     label27:
        throw $r8;

     label28:
        $r8 = new org.xmlpull.v1.XmlPullParserException;

     label29:
        specialinvoke $r8.<init>("Share records file does not start with historical-records tag.");

     label30:
        throw $r8;

     label31:
        r9 := @caughtexception;

        goto label44;

     label32:
        r10 := @caughtexception;

     label33:
        r2 = androidx.appcompat.widget.ActivityChooserModel.LOG_TAG;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r11 = virtualinvoke $r11.append("Error reading historical recrod file: ");

        $r5 = r0.mHistoryFileName;

        $r11 = virtualinvoke $r11.append($r5);

        $r5 = virtualinvoke $r11.toString();

        android.util.Log.e(r2, $r5, r10);

     label34:
        if $r3 == null goto label50;

     label35:
        virtualinvoke $r3.close();

     label36:
        goto label41;

     label37:
        $r8 := @caughtexception;

     label38:
        r2 = androidx.appcompat.widget.ActivityChooserModel.LOG_TAG;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r11 = virtualinvoke $r11.append("Error reading historical recrod file: ");

        $r5 = r0.mHistoryFileName;

        $r11 = virtualinvoke $r11.append($r5);

        $r5 = virtualinvoke $r11.toString();

        android.util.Log.e(r2, $r5, $r8);

     label39:
        if $r3 == null goto label50;

     label40:
        virtualinvoke $r3.close();

     label41:
        return;

     label42:
        r12 := @caughtexception;

        goto label41;

     label43:
        return;

     label44:
        if $r3 == null goto label48;

     label45:
        virtualinvoke $r3.close();

     label46:
        goto label48;

     label47:
        r13 := @caughtexception;

     label48:
        throw r9;

     label49:
        r14 := @caughtexception;

     label50:
        return;

        catch java.io.FileNotFoundException from label01 to label02 with label49;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label13 with label37;
        catch java.io.IOException from label02 to label03 with label32;
        catch java.io.IOException from label05 to label06 with label32;
        catch java.io.IOException from label08 to label09 with label32;
        catch java.io.IOException from label11 to label13 with label32;
        catch java.lang.Throwable from label02 to label03 with label31;
        catch java.lang.Throwable from label05 to label06 with label31;
        catch java.lang.Throwable from label08 to label09 with label31;
        catch java.lang.Throwable from label10 to label13 with label31;
        catch java.io.IOException from label14 to label15 with label42;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label28 with label37;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label31 with label37;
        catch java.io.IOException from label17 to label18 with label32;
        catch java.io.IOException from label19 to label20 with label32;
        catch java.io.IOException from label21 to label22 with label32;
        catch java.io.IOException from label23 to label24 with label32;
        catch java.io.IOException from label26 to label27 with label32;
        catch java.io.IOException from label29 to label30 with label32;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch java.lang.Throwable from label21 to label24 with label31;
        catch java.lang.Throwable from label25 to label31 with label31;
        catch java.lang.Throwable from label33 to label34 with label31;
        catch java.io.IOException from label35 to label36 with label42;
        catch java.lang.Throwable from label38 to label39 with label31;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.io.IOException from label45 to label46 with label47;
    }

    private boolean sortActivitiesIfNeeded()
    {
        java.util.List $r2, $r4;
        androidx.appcompat.widget.ActivityChooserModel$ActivitySorter $r3;
        android.content.Intent $r1;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0;

        r0 := @this;

        $r3 = r0.mActivitySorter;

        if $r3 == null goto label1;

        $r1 = r0.mIntent;

        if $r1 == null goto label1;

        $r2 = r0.mActivities;

        $z0 = interfaceinvoke $r2.isEmpty();

        if $z0 != 0 goto label1;

        $r2 = r0.mHistoricalRecords;

        $z0 = interfaceinvoke $r2.isEmpty();

        if $z0 != 0 goto label1;

        $r3 = r0.mActivitySorter;

        $r1 = r0.mIntent;

        $r2 = r0.mActivities;

        $r4 = r0.mHistoricalRecords;

        $r4 = java.util.Collections.unmodifiableList($r4);

        interfaceinvoke $r3.sort($r1, $r2, $r4);

        return 1;

     label1:
        return 0;
    }

    public android.content.Intent chooseActivity(int)
    {
        java.lang.Throwable r14;
        android.content.Intent r3, r11;
        long $l1;
        androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo r6;
        int $i0;
        android.content.pm.ActivityInfo r8;
        java.lang.String r9, r10;
        boolean $z0;
        androidx.appcompat.widget.ActivityChooserModel$OnChooseActivityListener r12;
        android.content.ComponentName r2;
        android.content.pm.ResolveInfo r7;
        java.util.List r4;
        java.lang.Object $r1, $r5;
        androidx.appcompat.widget.ActivityChooserModel r0;
        androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord r13;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        r3 = r0.mIntent;

        if r3 != null goto label3;

        exitmonitor $r1;

     label2:
        return null;

     label3:
        specialinvoke r0.ensureConsistentState();

        r4 = r0.mActivities;

        $r5 = interfaceinvoke r4.get($i0);

        r6 = (androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo) $r5;

        r2 = new android.content.ComponentName;

        r7 = r6.resolveInfo;

        r8 = r7.activityInfo;

        r9 = r8.packageName;

        r7 = r6.resolveInfo;

        r8 = r7.activityInfo;

        r10 = r8.name;

        specialinvoke r2.<init>(r9, r10);

        r3 = new android.content.Intent;

        r11 = r0.mIntent;

        specialinvoke r3.<init>(r11);

        virtualinvoke r3.setComponent(r2);

        r12 = r0.mActivityChoserModelPolicy;

        if r12 == null goto label5;

        r11 = new android.content.Intent;

        specialinvoke r11.<init>(r3);

        r12 = r0.mActivityChoserModelPolicy;

        $z0 = interfaceinvoke r12.onChooseActivity(r0, r11);

        if $z0 == 0 goto label5;

        exitmonitor $r1;

     label4:
        return null;

     label5:
        r13 = new androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord;

        $l1 = java.lang.System.currentTimeMillis();

        specialinvoke r13.<init>(r2, $l1, 1.0F);

        specialinvoke r0.addHistoricalRecord(r13);

        exitmonitor $r1;

     label6:
        return r3;

     label7:
        r14 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw r14;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.content.pm.ResolveInfo getActivity(int)
    {
        java.lang.Throwable $r5;
        androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo $r4;
        android.content.pm.ResolveInfo r6;
        java.util.List $r3;
        int $i0;
        java.lang.Object $r1, $r2;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        specialinvoke r0.ensureConsistentState();

        $r3 = r0.mActivities;

        $r2 = interfaceinvoke $r3.get($i0);

        $r4 = (androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo) $r2;

        r6 = $r4.resolveInfo;

        exitmonitor $r1;

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getActivityCount()
    {
        java.lang.Throwable $r3;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        specialinvoke r0.ensureConsistentState();

        $r2 = r0.mActivities;

        $i0 = interfaceinvoke $r2.size();

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getActivityIndex(android.content.pm.ResolveInfo)
    {
        java.lang.Throwable r7;
        androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo r6;
        android.content.pm.ResolveInfo $r1, $r2;
        java.util.List r4;
        int $i0, i1;
        java.lang.Object $r3, $r5;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mInstanceLock;

        entermonitor $r3;

     label1:
        specialinvoke r0.ensureConsistentState();

        r4 = r0.mActivities;

        $i0 = interfaceinvoke r4.size();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label5;

        $r5 = interfaceinvoke r4.get(i1);

        r6 = (androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo) $r5;

        $r2 = r6.resolveInfo;

        if $r2 != $r1 goto label4;

        exitmonitor $r3;

     label3:
        return i1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        exitmonitor $r3;

     label6:
        return -1;

     label7:
        r7 := @caughtexception;

        exitmonitor $r3;

     label8:
        goto label9;

     label9:
        throw r7;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.content.pm.ResolveInfo getDefaultActivity()
    {
        java.lang.Throwable $r5;
        androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo $r4;
        android.content.pm.ResolveInfo r6;
        java.util.List $r2;
        java.lang.Object $r1, $r3;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        specialinvoke r0.ensureConsistentState();

        $r2 = r0.mActivities;

        $z0 = interfaceinvoke $r2.isEmpty();

        if $z0 != 0 goto label3;

        $r2 = r0.mActivities;

        $r3 = interfaceinvoke $r2.get(0);

        $r4 = (androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo) $r3;

        r6 = $r4.resolveInfo;

        exitmonitor $r1;

     label2:
        return r6;

     label3:
        exitmonitor $r1;

     label4:
        return null;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getHistoryMaxSize()
    {
        java.lang.Throwable $r2;
        int i0;
        java.lang.Object $r1;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        i0 = r0.mHistoryMaxSize;

        exitmonitor $r1;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getHistorySize()
    {
        java.lang.Throwable $r3;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        specialinvoke r0.ensureConsistentState();

        $r2 = r0.mHistoricalRecords;

        $i0 = interfaceinvoke $r2.size();

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.content.Intent getIntent()
    {
        java.lang.Throwable $r2;
        java.lang.Object $r1;
        android.content.Intent r3;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        r3 = r0.mIntent;

        exitmonitor $r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setActivitySorter(androidx.appcompat.widget.ActivityChooserModel$ActivitySorter)
    {
        java.lang.Throwable $r4;
        androidx.appcompat.widget.ActivityChooserModel$ActivitySorter $r1, $r3;
        java.lang.Object $r2;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mInstanceLock;

        entermonitor $r2;

     label1:
        $r3 = r0.mActivitySorter;

        if $r3 != $r1 goto label3;

        exitmonitor $r2;

     label2:
        return;

     label3:
        r0.mActivitySorter = $r1;

        $z0 = specialinvoke r0.sortActivitiesIfNeeded();

        if $z0 == 0 goto label4;

        virtualinvoke r0.notifyChanged();

     label4:
        exitmonitor $r2;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setDefaultActivity(int)
    {
        java.lang.Throwable r12;
        long $l1;
        androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo r4, r5;
        int $i0;
        android.content.pm.ActivityInfo r8;
        java.lang.String r9, $r10;
        android.content.ComponentName r6;
        android.content.pm.ResolveInfo r7;
        java.util.List r2;
        float f0, f1;
        java.lang.Object $r1, $r3;
        androidx.appcompat.widget.ActivityChooserModel r0;
        androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord r11;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        specialinvoke r0.ensureConsistentState();

        r2 = r0.mActivities;

        $r3 = interfaceinvoke r2.get($i0);

        r4 = (androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo) $r3;

        r2 = r0.mActivities;

        $r3 = interfaceinvoke r2.get(0);

        r5 = (androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo) $r3;

        if r5 == null goto label2;

        f0 = r5.weight;

        f1 = r4.weight;

        f0 = f0 - f1;

        f0 = f0 + 5.0F;

        goto label3;

     label2:
        f0 = 1.0F;

     label3:
        r6 = new android.content.ComponentName;

        r7 = r4.resolveInfo;

        r8 = r7.activityInfo;

        r9 = r8.packageName;

        r7 = r4.resolveInfo;

        r8 = r7.activityInfo;

        $r10 = r8.name;

        specialinvoke r6.<init>(r9, $r10);

        r11 = new androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord;

        $l1 = java.lang.System.currentTimeMillis();

        specialinvoke r11.<init>(r6, $l1, f0);

        specialinvoke r0.addHistoricalRecord(r11);

        exitmonitor $r1;

     label4:
        return;

     label5:
        r12 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw r12;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setHistoryMaxSize(int)
    {
        java.lang.Throwable $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        androidx.appcompat.widget.ActivityChooserModel r0;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mInstanceLock;

        entermonitor $r1;

     label1:
        $i1 = r0.mHistoryMaxSize;

        if $i1 != $i0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        r0.mHistoryMaxSize = $i0;

        specialinvoke r0.pruneExcessiveHistoricalRecordsIfNeeded();

        $z0 = specialinvoke r0.sortActivitiesIfNeeded();

        if $z0 == 0 goto label4;

        virtualinvoke r0.notifyChanged();

     label4:
        exitmonitor $r1;

     label5:
        return;

     label6:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setIntent(android.content.Intent)
    {
        java.lang.Throwable $r4;
        android.content.Intent $r1, $r3;
        java.lang.Object $r2;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mInstanceLock;

        entermonitor $r2;

     label1:
        $r3 = r0.mIntent;

        if $r3 != $r1 goto label3;

        exitmonitor $r2;

     label2:
        return;

     label3:
        r0.mIntent = $r1;

        r0.mReloadActivities = 1;

        specialinvoke r0.ensureConsistentState();

        exitmonitor $r2;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setOnChooseActivityListener(androidx.appcompat.widget.ActivityChooserModel$OnChooseActivityListener)
    {
        java.lang.Throwable $r3;
        androidx.appcompat.widget.ActivityChooserModel$OnChooseActivityListener $r1;
        java.lang.Object $r2;
        androidx.appcompat.widget.ActivityChooserModel r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mInstanceLock;

        entermonitor $r2;

     label1:
        r0.mActivityChoserModelPolicy = $r1;

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
