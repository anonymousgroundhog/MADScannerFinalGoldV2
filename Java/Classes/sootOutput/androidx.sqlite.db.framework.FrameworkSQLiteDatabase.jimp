class androidx.sqlite.db.framework.FrameworkSQLiteDatabase extends java.lang.Object implements androidx.sqlite.db.SupportSQLiteDatabase
{
    private static final java.lang.String[] CONFLICT_VALUES;
    private static final java.lang.String[] EMPTY_STRING_ARRAY;
    private final android.database.sqlite.SQLiteDatabase mDelegate;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[6];

        $r0[0] = "";

        $r0[1] = " OR ROLLBACK ";

        $r0[2] = " OR ABORT ";

        $r0[3] = " OR FAIL ";

        $r0[4] = " OR IGNORE ";

        $r0[5] = " OR REPLACE ";

        androidx.sqlite.db.framework.FrameworkSQLiteDatabase.CONFLICT_VALUES = $r0;

        $r0 = newarray (java.lang.String)[0];

        androidx.sqlite.db.framework.FrameworkSQLiteDatabase.EMPTY_STRING_ARRAY = $r0;

        return;
    }

    void <init>(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mDelegate = $r1;

        return;
    }

    public void beginTransaction()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.beginTransaction();

        return;
    }

    public void beginTransactionNonExclusive()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.beginTransactionNonExclusive();

        return;
    }

    public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
    {
        android.database.sqlite.SQLiteDatabase $r2;
        android.database.sqlite.SQLiteTransactionListener $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegate;

        virtualinvoke $r2.beginTransactionWithListener($r1);

        return;
    }

    public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
    {
        android.database.sqlite.SQLiteDatabase $r2;
        android.database.sqlite.SQLiteTransactionListener $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegate;

        virtualinvoke $r2.beginTransactionWithListenerNonExclusive($r1);

        return;
    }

    public void close() throws java.io.IOException
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.close();

        return;
    }

    public androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteStatement $r2;
        android.database.sqlite.SQLiteDatabase $r4;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteStatement $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = new androidx.sqlite.db.framework.FrameworkSQLiteStatement;

        $r4 = r0.mDelegate;

        $r3 = virtualinvoke $r4.compileStatement($r1);

        specialinvoke $r2.<init>($r3);

        return $r2;
    }

    public int delete(java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        int $i0;
        java.lang.StringBuilder r4, r5;
        java.lang.String $r1, $r2;
        androidx.sqlite.db.SupportSQLiteStatement $r6;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<init>();

        r4 = virtualinvoke r4.append("DELETE FROM ");

        r4 = virtualinvoke r4.append($r1);

        $z0 = android.text.TextUtils.isEmpty($r2);

        if $z0 == 0 goto label1;

        $r1 = "";

        goto label2;

     label1:
        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<init>();

        r5 = virtualinvoke r5.append(" WHERE ");

        r5 = virtualinvoke r5.append($r2);

        $r1 = virtualinvoke r5.toString();

     label2:
        r4 = virtualinvoke r4.append($r1);

        $r1 = virtualinvoke r4.toString();

        $r6 = virtualinvoke r0.compileStatement($r1);

        androidx.sqlite.db.SimpleSQLiteQuery.bind($r6, $r3);

        $i0 = interfaceinvoke $r6.executeUpdateDelete();

        return $i0;
    }

    public void disableWriteAheadLogging()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.disableWriteAheadLogging();

        return;
    }

    public boolean enableWriteAheadLogging()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.enableWriteAheadLogging();

        return $z0;
    }

    public void endTransaction()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.endTransaction();

        return;
    }

    public void execSQL(java.lang.String) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegate;

        virtualinvoke $r2.execSQL($r1);

        return;
    }

    public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.Object[] $r2;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = r0.mDelegate;

        virtualinvoke $r3.execSQL($r1, $r2);

        return;
    }

    public java.util.List getAttachedDbs()
    {
        android.database.sqlite.SQLiteDatabase $r2;
        java.util.List $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r2 = r0.mDelegate;

        $r1 = virtualinvoke $r2.getAttachedDbs();

        return $r1;
    }

    public long getMaximumSize()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        long $l0;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $l0 = virtualinvoke $r1.getMaximumSize();

        return $l0;
    }

    public long getPageSize()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        long $l0;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $l0 = virtualinvoke $r1.getPageSize();

        return $l0;
    }

    public java.lang.String getPath()
    {
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r2 = r0.mDelegate;

        $r1 = virtualinvoke $r2.getPath();

        return $r1;
    }

    public int getVersion()
    {
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $i0 = virtualinvoke $r1.getVersion();

        return $i0;
    }

    public boolean inTransaction()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.inTransaction();

        return $z0;
    }

    public long insert(java.lang.String, int, android.content.ContentValues) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        int $i0;
        long $l1;
        java.lang.String $r1;
        android.content.ContentValues $r2;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r2 := @parameter2;

        $r3 = r0.mDelegate;

        $l1 = virtualinvoke $r3.insertWithOnConflict($r1, null, $r2, $i0);

        return $l1;
    }

    public boolean isDatabaseIntegrityOk()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.isDatabaseIntegrityOk();

        return $z0;
    }

    public boolean isDbLockedByCurrentThread()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.isDbLockedByCurrentThread();

        return $z0;
    }

    boolean isDelegate(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r1, $r2;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegate;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isOpen()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.isOpen();

        return $z0;
    }

    public boolean isReadOnly()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.isReadOnly();

        return $z0;
    }

    public boolean isWriteAheadLoggingEnabled()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.isWriteAheadLoggingEnabled();

        return $z0;
    }

    public boolean needUpgrade(int)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        int $i0;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.needUpgrade($i0);

        return $z0;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)
    {
        android.database.sqlite.SQLiteDatabase $r4;
        androidx.sqlite.db.SupportSQLiteQuery $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String[] $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$1 $r2;
        java.lang.String $r5;
        android.database.Cursor $r6;

        r0 := @this;

        $r1 := @parameter0;

        $r4 = r0.mDelegate;

        $r2 = new androidx.sqlite.db.framework.FrameworkSQLiteDatabase$1;

        specialinvoke $r2.<init>(r0, $r1);

        $r5 = interfaceinvoke $r1.getSql();

        $r3 = androidx.sqlite.db.framework.FrameworkSQLiteDatabase.EMPTY_STRING_ARRAY;

        $r6 = virtualinvoke $r4.rawQueryWithFactory($r2, $r5, $r3, null);

        return $r6;
    }

    public android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase$2 $r3;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        android.os.CancellationSignal $r2;
        java.lang.String[] $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        androidx.sqlite.db.SupportSQLiteQuery $r1;
        java.lang.String $r6;
        android.database.Cursor $r7;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r5 = r0.mDelegate;

        $r3 = new androidx.sqlite.db.framework.FrameworkSQLiteDatabase$2;

        specialinvoke $r3.<init>(r0, $r1);

        $r6 = interfaceinvoke $r1.getSql();

        $r4 = androidx.sqlite.db.framework.FrameworkSQLiteDatabase.EMPTY_STRING_ARRAY;

        $r7 = virtualinvoke $r5.rawQueryWithFactory($r3, $r6, $r4, null, $r2);

        return $r7;
    }

    public android.database.Cursor query(java.lang.String)
    {
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String $r1;
        android.database.Cursor $r2;
        androidx.sqlite.db.SimpleSQLiteQuery $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke $r3.<init>($r1);

        $r2 = virtualinvoke r0.query($r3);

        return $r2;
    }

    public android.database.Cursor query(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r2;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String $r1;
        android.database.Cursor $r3;
        androidx.sqlite.db.SimpleSQLiteQuery $r4;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r4 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke $r4.<init>($r1, $r2);

        $r3 = virtualinvoke r0.query($r4);

        return $r3;
    }

    public void setForeignKeyConstraintsEnabled(boolean)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.setForeignKeyConstraintsEnabled($z0);

        return;
    }

    public void setLocale(java.util.Locale)
    {
        android.database.sqlite.SQLiteDatabase $r2;
        java.util.Locale $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegate;

        virtualinvoke $r2.setLocale($r1);

        return;
    }

    public void setMaxSqlCacheSize(int)
    {
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.setMaxSqlCacheSize($i0);

        return;
    }

    public long setMaximumSize(long)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        long $l0;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $l0 := @parameter0;

        $r1 = r0.mDelegate;

        $l0 = virtualinvoke $r1.setMaximumSize($l0);

        return $l0;
    }

    public void setPageSize(long)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        long $l0;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $l0 := @parameter0;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.setPageSize($l0);

        return;
    }

    public void setTransactionSuccessful()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.setTransactionSuccessful();

        return;
    }

    public void setVersion(int)
    {
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDelegate;

        virtualinvoke $r1.setVersion($i0);

        return;
    }

    public int update(java.lang.String, int, android.content.ContentValues, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r4, r5;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        java.lang.String[] r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r1, $r3, r8;
        androidx.sqlite.db.SupportSQLiteStatement $r12;
        boolean $z0;
        java.util.Iterator $r10;
        java.util.Set $r9;
        java.lang.IllegalArgumentException r13;
        java.lang.StringBuilder r6;
        java.lang.Object $r11;
        android.content.ContentValues $r2;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r2 := @parameter2;

        $r3 := @parameter3;

        $r4 := @parameter4;

        if $r2 == null goto label10;

        $i1 = virtualinvoke $r2.size();

        if $i1 == 0 goto label10;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<init>(120);

        virtualinvoke r6.append("UPDATE ");

        r7 = androidx.sqlite.db.framework.FrameworkSQLiteDatabase.CONFLICT_VALUES;

        r8 = r7[$i0];

        virtualinvoke r6.append(r8);

        virtualinvoke r6.append($r1);

        virtualinvoke r6.append(" SET ");

        $i0 = virtualinvoke $r2.size();

        if $r4 != null goto label01;

        $i1 = $i0;

        goto label02;

     label01:
        $i1 = lengthof $r4;

        $i1 = $i1 + $i0;

     label02:
        r5 = newarray (java.lang.Object)[$i1];

        i2 = 0;

        $r9 = virtualinvoke $r2.keySet();

        $r10 = interfaceinvoke $r9.iterator();

     label03:
        $z0 = interfaceinvoke $r10.hasNext();

        if $z0 == 0 goto label06;

        $r11 = interfaceinvoke $r10.next();

        $r1 = (java.lang.String) $r11;

        if i2 <= 0 goto label04;

        r8 = ",";

        goto label05;

     label04:
        r8 = "";

     label05:
        virtualinvoke r6.append(r8);

        virtualinvoke r6.append($r1);

        $r11 = virtualinvoke $r2.get($r1);

        r5[i2] = $r11;

        virtualinvoke r6.append("=?");

        i2 = i2 + 1;

        goto label03;

     label06:
        if $r4 == null goto label08;

        i2 = $i0;

     label07:
        if i2 >= $i1 goto label08;

        i3 = i2 - $i0;

        $r11 = $r4[i3];

        r5[i2] = $r11;

        i2 = i2 + 1;

        goto label07;

     label08:
        $z0 = android.text.TextUtils.isEmpty($r3);

        if $z0 != 0 goto label09;

        virtualinvoke r6.append(" WHERE ");

        virtualinvoke r6.append($r3);

     label09:
        $r1 = virtualinvoke r6.toString();

        $r12 = virtualinvoke r0.compileStatement($r1);

        androidx.sqlite.db.SimpleSQLiteQuery.bind($r12, r5);

        $i0 = interfaceinvoke $r12.executeUpdateDelete();

        return $i0;

     label10:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<init>("Empty values");

        goto label11;

     label11:
        throw r13;
    }

    public boolean yieldIfContendedSafely()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.yieldIfContendedSafely();

        return $z0;
    }

    public boolean yieldIfContendedSafely(long)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        androidx.sqlite.db.framework.FrameworkSQLiteDatabase r0;
        long $l0;
        boolean $z0;

        r0 := @this;

        $l0 := @parameter0;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.yieldIfContendedSafely($l0);

        return $z0;
    }
}
