class androidx.work.impl.WorkDatabase_Impl$1 extends androidx.room.RoomOpenHelper$Delegate
{
    final androidx.work.impl.WorkDatabase_Impl this$0;

    void <init>(androidx.work.impl.WorkDatabase_Impl, int)
    {
        androidx.work.impl.WorkDatabase_Impl $r1;
        int $i0;
        androidx.work.impl.WorkDatabase_Impl$1 r0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        r0.this$0 = $r1;

        specialinvoke r0.<init>($i0);

        return;
    }

    public void createAllTables(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.work.impl.WorkDatabase_Impl$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this;

        $r1 := @parameter0;

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS `Dependency` (`work_spec_id` TEXT NOT NULL, `prerequisite_id` TEXT NOT NULL, PRIMARY KEY(`work_spec_id`, `prerequisite_id`), FOREIGN KEY(`work_spec_id`) REFERENCES `WorkSpec`(`id`) ON UPDATE CASCADE ON DELETE CASCADE , FOREIGN KEY(`prerequisite_id`) REFERENCES `WorkSpec`(`id`) ON UPDATE CASCADE ON DELETE CASCADE )");

        interfaceinvoke $r1.execSQL("CREATE INDEX IF NOT EXISTS `index_Dependency_work_spec_id` ON `Dependency` (`work_spec_id`)");

        interfaceinvoke $r1.execSQL("CREATE INDEX IF NOT EXISTS `index_Dependency_prerequisite_id` ON `Dependency` (`prerequisite_id`)");

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS `WorkSpec` (`id` TEXT NOT NULL, `state` INTEGER NOT NULL, `worker_class_name` TEXT NOT NULL, `input_merger_class_name` TEXT, `input` BLOB NOT NULL, `output` BLOB NOT NULL, `initial_delay` INTEGER NOT NULL, `interval_duration` INTEGER NOT NULL, `flex_duration` INTEGER NOT NULL, `run_attempt_count` INTEGER NOT NULL, `backoff_policy` INTEGER NOT NULL, `backoff_delay_duration` INTEGER NOT NULL, `period_start_time` INTEGER NOT NULL, `minimum_retention_duration` INTEGER NOT NULL, `schedule_requested_at` INTEGER NOT NULL, `run_in_foreground` INTEGER NOT NULL, `out_of_quota_policy` INTEGER NOT NULL, `required_network_type` INTEGER, `requires_charging` INTEGER NOT NULL, `requires_device_idle` INTEGER NOT NULL, `requires_battery_not_low` INTEGER NOT NULL, `requires_storage_not_low` INTEGER NOT NULL, `trigger_content_update_delay` INTEGER NOT NULL, `trigger_max_content_delay` INTEGER NOT NULL, `content_uri_triggers` BLOB, PRIMARY KEY(`id`))");

        interfaceinvoke $r1.execSQL("CREATE INDEX IF NOT EXISTS `index_WorkSpec_schedule_requested_at` ON `WorkSpec` (`schedule_requested_at`)");

        interfaceinvoke $r1.execSQL("CREATE INDEX IF NOT EXISTS `index_WorkSpec_period_start_time` ON `WorkSpec` (`period_start_time`)");

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS `WorkTag` (`tag` TEXT NOT NULL, `work_spec_id` TEXT NOT NULL, PRIMARY KEY(`tag`, `work_spec_id`), FOREIGN KEY(`work_spec_id`) REFERENCES `WorkSpec`(`id`) ON UPDATE CASCADE ON DELETE CASCADE )");

        interfaceinvoke $r1.execSQL("CREATE INDEX IF NOT EXISTS `index_WorkTag_work_spec_id` ON `WorkTag` (`work_spec_id`)");

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS `SystemIdInfo` (`work_spec_id` TEXT NOT NULL, `system_id` INTEGER NOT NULL, PRIMARY KEY(`work_spec_id`), FOREIGN KEY(`work_spec_id`) REFERENCES `WorkSpec`(`id`) ON UPDATE CASCADE ON DELETE CASCADE )");

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS `WorkName` (`name` TEXT NOT NULL, `work_spec_id` TEXT NOT NULL, PRIMARY KEY(`name`, `work_spec_id`), FOREIGN KEY(`work_spec_id`) REFERENCES `WorkSpec`(`id`) ON UPDATE CASCADE ON DELETE CASCADE )");

        interfaceinvoke $r1.execSQL("CREATE INDEX IF NOT EXISTS `index_WorkName_work_spec_id` ON `WorkName` (`work_spec_id`)");

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS `WorkProgress` (`work_spec_id` TEXT NOT NULL, `progress` BLOB NOT NULL, PRIMARY KEY(`work_spec_id`), FOREIGN KEY(`work_spec_id`) REFERENCES `WorkSpec`(`id`) ON UPDATE CASCADE ON DELETE CASCADE )");

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS `Preference` (`key` TEXT NOT NULL, `long_value` INTEGER, PRIMARY KEY(`key`))");

        interfaceinvoke $r1.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");

        interfaceinvoke $r1.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, \'c103703e120ae8cc73c9248622f3cd1e\')");

        return;
    }

    public void dropAllTables(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        java.util.List $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        androidx.work.impl.WorkDatabase_Impl r2;
        int i0, $i1;
        androidx.work.impl.WorkDatabase_Impl$1 r0;
        androidx.room.RoomDatabase$Callback $r5;
        java.lang.Object $r4;

        r0 := @this;

        $r1 := @parameter0;

        interfaceinvoke $r1.execSQL("DROP TABLE IF EXISTS `Dependency`");

        interfaceinvoke $r1.execSQL("DROP TABLE IF EXISTS `WorkSpec`");

        interfaceinvoke $r1.execSQL("DROP TABLE IF EXISTS `WorkTag`");

        interfaceinvoke $r1.execSQL("DROP TABLE IF EXISTS `SystemIdInfo`");

        interfaceinvoke $r1.execSQL("DROP TABLE IF EXISTS `WorkName`");

        interfaceinvoke $r1.execSQL("DROP TABLE IF EXISTS `WorkProgress`");

        interfaceinvoke $r1.execSQL("DROP TABLE IF EXISTS `Preference`");

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$000(r2);

        if $r3 == null goto label2;

        i0 = 0;

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$100(r2);

        $i1 = interfaceinvoke $r3.size();

     label1:
        if i0 >= $i1 goto label2;

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$200(r2);

        $r4 = interfaceinvoke $r3.get(i0);

        $r5 = (androidx.room.RoomDatabase$Callback) $r4;

        virtualinvoke $r5.onDestructiveMigration($r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    protected void onCreate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        java.util.List $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        androidx.work.impl.WorkDatabase_Impl r2;
        int i0, $i1;
        androidx.work.impl.WorkDatabase_Impl$1 r0;
        androidx.room.RoomDatabase$Callback $r5;
        java.lang.Object $r4;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$300(r2);

        if $r3 == null goto label2;

        i0 = 0;

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$400(r2);

        $i1 = interfaceinvoke $r3.size();

     label1:
        if i0 >= $i1 goto label2;

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$500(r2);

        $r4 = interfaceinvoke $r3.get(i0);

        $r5 = (androidx.room.RoomDatabase$Callback) $r4;

        virtualinvoke $r5.onCreate($r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void onOpen(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        java.util.List $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        androidx.work.impl.WorkDatabase_Impl r2;
        int i0, $i1;
        androidx.work.impl.WorkDatabase_Impl$1 r0;
        androidx.room.RoomDatabase$Callback $r5;
        java.lang.Object $r4;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.this$0;

        androidx.work.impl.WorkDatabase_Impl.access$602(r2, $r1);

        interfaceinvoke $r1.execSQL("PRAGMA foreign_keys = ON");

        r2 = r0.this$0;

        androidx.work.impl.WorkDatabase_Impl.access$700(r2, $r1);

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$800(r2);

        if $r3 == null goto label2;

        i0 = 0;

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$900(r2);

        $i1 = interfaceinvoke $r3.size();

     label1:
        if i0 >= $i1 goto label2;

        r2 = r0.this$0;

        $r3 = androidx.work.impl.WorkDatabase_Impl.access$1000(r2);

        $r4 = interfaceinvoke $r3.get(i0);

        $r5 = (androidx.room.RoomDatabase$Callback) $r4;

        virtualinvoke $r5.onOpen($r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void onPostMigrate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.work.impl.WorkDatabase_Impl$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this;

        $r1 := @parameter0;

        return;
    }

    public void onPreMigrate(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.work.impl.WorkDatabase_Impl$1 r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this;

        $r1 := @parameter0;

        androidx.room.util.DBUtil.dropFtsSyncTriggers($r1);

        return;
    }

    protected androidx.room.RoomOpenHelper$ValidationResult onValidateSchema(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.util.TableInfo$ForeignKey r5;
        androidx.room.util.TableInfo r11, $r12;
        java.util.HashMap r2;
        java.lang.String[] $r6;
        java.util.HashSet r4, r9;
        androidx.room.RoomOpenHelper$ValidationResult r13;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        androidx.work.impl.WorkDatabase_Impl$1 r0;
        java.lang.String $r15;
        boolean $z0;
        androidx.room.util.TableInfo$Column r3;
        java.util.List $r7, $r8;
        androidx.room.util.TableInfo$Index r10;
        java.lang.StringBuilder r14;

        r0 := @this;

        $r1 := @parameter0;

        r2 = new java.util.HashMap;

        specialinvoke r2.<init>(2);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("work_spec_id", "TEXT", 1, 1, null, 1);

        virtualinvoke r2.put("work_spec_id", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("prerequisite_id", "TEXT", 1, 2, null, 1);

        virtualinvoke r2.put("prerequisite_id", r3);

        r4 = new java.util.HashSet;

        specialinvoke r4.<init>(2);

        r5 = new androidx.room.util.TableInfo$ForeignKey;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "id";

        $r8 = java.util.Arrays.asList($r6);

        specialinvoke r5.<init>("WorkSpec", "CASCADE", "CASCADE", $r7, $r8);

        virtualinvoke r4.add(r5);

        r5 = new androidx.room.util.TableInfo$ForeignKey;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "prerequisite_id";

        $r7 = java.util.Arrays.asList($r6);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "id";

        $r8 = java.util.Arrays.asList($r6);

        specialinvoke r5.<init>("WorkSpec", "CASCADE", "CASCADE", $r7, $r8);

        virtualinvoke r4.add(r5);

        r9 = new java.util.HashSet;

        specialinvoke r9.<init>(2);

        r10 = new androidx.room.util.TableInfo$Index;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        specialinvoke r10.<init>("index_Dependency_work_spec_id", 0, $r7);

        virtualinvoke r9.add(r10);

        r10 = new androidx.room.util.TableInfo$Index;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "prerequisite_id";

        $r7 = java.util.Arrays.asList($r6);

        specialinvoke r10.<init>("index_Dependency_prerequisite_id", 0, $r7);

        virtualinvoke r9.add(r10);

        r11 = new androidx.room.util.TableInfo;

        specialinvoke r11.<init>("Dependency", r2, r4, r9);

        $r12 = androidx.room.util.TableInfo.read($r1, "Dependency");

        $z0 = virtualinvoke r11.equals($r12);

        if $z0 != 0 goto label1;

        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<init>();

        r14 = virtualinvoke r14.append("Dependency(androidx.work.impl.model.Dependency).\n Expected:\n");

        r14 = virtualinvoke r14.append(r11);

        r14 = virtualinvoke r14.append("\n Found:\n");

        r14 = virtualinvoke r14.append($r12);

        $r15 = virtualinvoke r14.toString();

        specialinvoke r13.<init>(0, $r15);

        return r13;

     label1:
        r2 = new java.util.HashMap;

        specialinvoke r2.<init>(25);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("id", "TEXT", 1, 1, null, 1);

        virtualinvoke r2.put("id", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("state", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("state", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("worker_class_name", "TEXT", 1, 0, null, 1);

        virtualinvoke r2.put("worker_class_name", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("input_merger_class_name", "TEXT", 0, 0, null, 1);

        virtualinvoke r2.put("input_merger_class_name", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("input", "BLOB", 1, 0, null, 1);

        virtualinvoke r2.put("input", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("output", "BLOB", 1, 0, null, 1);

        virtualinvoke r2.put("output", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("initial_delay", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("initial_delay", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("interval_duration", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("interval_duration", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("flex_duration", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("flex_duration", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("run_attempt_count", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("run_attempt_count", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("backoff_policy", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("backoff_policy", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("backoff_delay_duration", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("backoff_delay_duration", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("period_start_time", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("period_start_time", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("minimum_retention_duration", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("minimum_retention_duration", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("schedule_requested_at", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("schedule_requested_at", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("run_in_foreground", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("run_in_foreground", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("out_of_quota_policy", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("out_of_quota_policy", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("required_network_type", "INTEGER", 0, 0, null, 1);

        virtualinvoke r2.put("required_network_type", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("requires_charging", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("requires_charging", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("requires_device_idle", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("requires_device_idle", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("requires_battery_not_low", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("requires_battery_not_low", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("requires_storage_not_low", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("requires_storage_not_low", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("trigger_content_update_delay", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("trigger_content_update_delay", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("trigger_max_content_delay", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("trigger_max_content_delay", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("content_uri_triggers", "BLOB", 0, 0, null, 1);

        virtualinvoke r2.put("content_uri_triggers", r3);

        r4 = new java.util.HashSet;

        specialinvoke r4.<init>(0);

        r9 = new java.util.HashSet;

        specialinvoke r9.<init>(2);

        r10 = new androidx.room.util.TableInfo$Index;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "schedule_requested_at";

        $r7 = java.util.Arrays.asList($r6);

        specialinvoke r10.<init>("index_WorkSpec_schedule_requested_at", 0, $r7);

        virtualinvoke r9.add(r10);

        r10 = new androidx.room.util.TableInfo$Index;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "period_start_time";

        $r7 = java.util.Arrays.asList($r6);

        specialinvoke r10.<init>("index_WorkSpec_period_start_time", 0, $r7);

        virtualinvoke r9.add(r10);

        r11 = new androidx.room.util.TableInfo;

        specialinvoke r11.<init>("WorkSpec", r2, r4, r9);

        $r12 = androidx.room.util.TableInfo.read($r1, "WorkSpec");

        $z0 = virtualinvoke r11.equals($r12);

        if $z0 != 0 goto label2;

        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<init>();

        r14 = virtualinvoke r14.append("WorkSpec(androidx.work.impl.model.WorkSpec).\n Expected:\n");

        r14 = virtualinvoke r14.append(r11);

        r14 = virtualinvoke r14.append("\n Found:\n");

        r14 = virtualinvoke r14.append($r12);

        $r15 = virtualinvoke r14.toString();

        specialinvoke r13.<init>(0, $r15);

        return r13;

     label2:
        r2 = new java.util.HashMap;

        specialinvoke r2.<init>(2);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("tag", "TEXT", 1, 1, null, 1);

        virtualinvoke r2.put("tag", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("work_spec_id", "TEXT", 1, 2, null, 1);

        virtualinvoke r2.put("work_spec_id", r3);

        r4 = new java.util.HashSet;

        specialinvoke r4.<init>(1);

        r5 = new androidx.room.util.TableInfo$ForeignKey;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "id";

        $r8 = java.util.Arrays.asList($r6);

        specialinvoke r5.<init>("WorkSpec", "CASCADE", "CASCADE", $r7, $r8);

        virtualinvoke r4.add(r5);

        r9 = new java.util.HashSet;

        specialinvoke r9.<init>(1);

        r10 = new androidx.room.util.TableInfo$Index;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        specialinvoke r10.<init>("index_WorkTag_work_spec_id", 0, $r7);

        virtualinvoke r9.add(r10);

        r11 = new androidx.room.util.TableInfo;

        specialinvoke r11.<init>("WorkTag", r2, r4, r9);

        $r12 = androidx.room.util.TableInfo.read($r1, "WorkTag");

        $z0 = virtualinvoke r11.equals($r12);

        if $z0 != 0 goto label3;

        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<init>();

        r14 = virtualinvoke r14.append("WorkTag(androidx.work.impl.model.WorkTag).\n Expected:\n");

        r14 = virtualinvoke r14.append(r11);

        r14 = virtualinvoke r14.append("\n Found:\n");

        r14 = virtualinvoke r14.append($r12);

        $r15 = virtualinvoke r14.toString();

        specialinvoke r13.<init>(0, $r15);

        return r13;

     label3:
        r2 = new java.util.HashMap;

        specialinvoke r2.<init>(2);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("work_spec_id", "TEXT", 1, 1, null, 1);

        virtualinvoke r2.put("work_spec_id", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("system_id", "INTEGER", 1, 0, null, 1);

        virtualinvoke r2.put("system_id", r3);

        r4 = new java.util.HashSet;

        specialinvoke r4.<init>(1);

        r5 = new androidx.room.util.TableInfo$ForeignKey;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "id";

        $r8 = java.util.Arrays.asList($r6);

        specialinvoke r5.<init>("WorkSpec", "CASCADE", "CASCADE", $r7, $r8);

        virtualinvoke r4.add(r5);

        r9 = new java.util.HashSet;

        specialinvoke r9.<init>(0);

        r11 = new androidx.room.util.TableInfo;

        specialinvoke r11.<init>("SystemIdInfo", r2, r4, r9);

        $r12 = androidx.room.util.TableInfo.read($r1, "SystemIdInfo");

        $z0 = virtualinvoke r11.equals($r12);

        if $z0 != 0 goto label4;

        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<init>();

        r14 = virtualinvoke r14.append("SystemIdInfo(androidx.work.impl.model.SystemIdInfo).\n Expected:\n");

        r14 = virtualinvoke r14.append(r11);

        r14 = virtualinvoke r14.append("\n Found:\n");

        r14 = virtualinvoke r14.append($r12);

        $r15 = virtualinvoke r14.toString();

        specialinvoke r13.<init>(0, $r15);

        return r13;

     label4:
        r2 = new java.util.HashMap;

        specialinvoke r2.<init>(2);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("name", "TEXT", 1, 1, null, 1);

        virtualinvoke r2.put("name", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("work_spec_id", "TEXT", 1, 2, null, 1);

        virtualinvoke r2.put("work_spec_id", r3);

        r4 = new java.util.HashSet;

        specialinvoke r4.<init>(1);

        r5 = new androidx.room.util.TableInfo$ForeignKey;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "id";

        $r8 = java.util.Arrays.asList($r6);

        specialinvoke r5.<init>("WorkSpec", "CASCADE", "CASCADE", $r7, $r8);

        virtualinvoke r4.add(r5);

        r9 = new java.util.HashSet;

        specialinvoke r9.<init>(1);

        r10 = new androidx.room.util.TableInfo$Index;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        specialinvoke r10.<init>("index_WorkName_work_spec_id", 0, $r7);

        virtualinvoke r9.add(r10);

        r11 = new androidx.room.util.TableInfo;

        specialinvoke r11.<init>("WorkName", r2, r4, r9);

        $r12 = androidx.room.util.TableInfo.read($r1, "WorkName");

        $z0 = virtualinvoke r11.equals($r12);

        if $z0 != 0 goto label5;

        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<init>();

        r14 = virtualinvoke r14.append("WorkName(androidx.work.impl.model.WorkName).\n Expected:\n");

        r14 = virtualinvoke r14.append(r11);

        r14 = virtualinvoke r14.append("\n Found:\n");

        r14 = virtualinvoke r14.append($r12);

        $r15 = virtualinvoke r14.toString();

        specialinvoke r13.<init>(0, $r15);

        return r13;

     label5:
        r2 = new java.util.HashMap;

        specialinvoke r2.<init>(2);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("work_spec_id", "TEXT", 1, 1, null, 1);

        virtualinvoke r2.put("work_spec_id", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("progress", "BLOB", 1, 0, null, 1);

        virtualinvoke r2.put("progress", r3);

        r4 = new java.util.HashSet;

        specialinvoke r4.<init>(1);

        r5 = new androidx.room.util.TableInfo$ForeignKey;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "work_spec_id";

        $r7 = java.util.Arrays.asList($r6);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "id";

        $r8 = java.util.Arrays.asList($r6);

        specialinvoke r5.<init>("WorkSpec", "CASCADE", "CASCADE", $r7, $r8);

        virtualinvoke r4.add(r5);

        r9 = new java.util.HashSet;

        specialinvoke r9.<init>(0);

        r11 = new androidx.room.util.TableInfo;

        specialinvoke r11.<init>("WorkProgress", r2, r4, r9);

        $r12 = androidx.room.util.TableInfo.read($r1, "WorkProgress");

        $z0 = virtualinvoke r11.equals($r12);

        if $z0 != 0 goto label6;

        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<init>();

        r14 = virtualinvoke r14.append("WorkProgress(androidx.work.impl.model.WorkProgress).\n Expected:\n");

        r14 = virtualinvoke r14.append(r11);

        r14 = virtualinvoke r14.append("\n Found:\n");

        r14 = virtualinvoke r14.append($r12);

        $r15 = virtualinvoke r14.toString();

        specialinvoke r13.<init>(0, $r15);

        return r13;

     label6:
        r2 = new java.util.HashMap;

        specialinvoke r2.<init>(2);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("key", "TEXT", 1, 1, null, 1);

        virtualinvoke r2.put("key", r3);

        r3 = new androidx.room.util.TableInfo$Column;

        specialinvoke r3.<init>("long_value", "INTEGER", 0, 0, null, 1);

        virtualinvoke r2.put("long_value", r3);

        r4 = new java.util.HashSet;

        specialinvoke r4.<init>(0);

        r9 = new java.util.HashSet;

        specialinvoke r9.<init>(0);

        r11 = new androidx.room.util.TableInfo;

        specialinvoke r11.<init>("Preference", r2, r4, r9);

        $r12 = androidx.room.util.TableInfo.read($r1, "Preference");

        $z0 = virtualinvoke r11.equals($r12);

        if $z0 != 0 goto label7;

        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<init>();

        r14 = virtualinvoke r14.append("Preference(androidx.work.impl.model.Preference).\n Expected:\n");

        r14 = virtualinvoke r14.append(r11);

        r14 = virtualinvoke r14.append("\n Found:\n");

        r14 = virtualinvoke r14.append($r12);

        $r15 = virtualinvoke r14.toString();

        specialinvoke r13.<init>(0, $r15);

        return r13;

     label7:
        r13 = new androidx.room.RoomOpenHelper$ValidationResult;

        specialinvoke r13.<init>(1, null);

        return r13;
    }
}
