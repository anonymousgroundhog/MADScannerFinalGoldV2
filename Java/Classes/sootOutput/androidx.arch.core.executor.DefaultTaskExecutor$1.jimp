class androidx.arch.core.executor.DefaultTaskExecutor$1 extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private static final java.lang.String THREAD_NAME_STEM;
    private final java.util.concurrent.atomic.AtomicInteger mThreadId;
    final androidx.arch.core.executor.DefaultTaskExecutor this$0;

    void <init>(androidx.arch.core.executor.DefaultTaskExecutor)
    {
        androidx.arch.core.executor.DefaultTaskExecutor$1 r0;
        java.util.concurrent.atomic.AtomicInteger $r2;
        androidx.arch.core.executor.DefaultTaskExecutor $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.this$0 = $r1;

        specialinvoke r0.<init>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<init>(0);

        r0.mThreadId = $r2;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.Object[] $r3;
        java.lang.Runnable $r1;
        java.lang.Integer $r5;
        androidx.arch.core.executor.DefaultTaskExecutor$1 r0;
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.lang.Thread r2;
        int $i0;
        java.lang.String $r6;

        r0 := @this;

        $r1 := @parameter0;

        r2 = new java.lang.Thread;

        specialinvoke r2.<init>($r1);

        $r3 = newarray (java.lang.Object)[1];

        $r4 = r0.mThreadId;

        $i0 = virtualinvoke $r4.getAndIncrement();

        $r5 = java.lang.Integer.valueOf($i0);

        $r3[0] = $r5;

        $r6 = java.lang.String.format("arch_disk_io_%d", $r3);

        virtualinvoke r2.setName($r6);

        return r2;
    }
}
