class androidx.work.impl.background.systemjob.SystemJobInfoConverter extends java.lang.Object
{
    static final java.lang.String EXTRA_IS_PERIODIC;
    static final java.lang.String EXTRA_WORK_SPEC_ID;
    private static final java.lang.String TAG;
    private final android.content.ComponentName mWorkServiceComponent;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = androidx.work.Logger.tagWithPrefix("SystemJobInfoConverter");

        androidx.work.impl.background.systemjob.SystemJobInfoConverter.TAG = $r0;

        return;
    }

    void <init>(android.content.Context)
    {
        androidx.work.impl.background.systemjob.SystemJobInfoConverter r0;
        android.content.Context $r1;
        android.content.ComponentName $r2;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        $r1 = virtualinvoke $r1.getApplicationContext();

        $r2 = new android.content.ComponentName;

        specialinvoke $r2.<init>($r1, class "Landroidx/work/impl/background/systemjob/SystemJobService;");

        r0.mWorkServiceComponent = $r2;

        return;
    }

    private static android.app.job.JobInfo$TriggerContentUri convertContentUriTrigger(androidx.work.ContentUriTriggers$Trigger)
    {
        androidx.work.ContentUriTriggers$Trigger $r0;
        byte b0;
        android.app.job.JobInfo$TriggerContentUri $r1;
        android.net.Uri $r2;
        boolean $z0;

        $r0 := @parameter0;

        $z0 = virtualinvoke $r0.shouldTriggerForDescendants();

        if $z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        $r1 = new android.app.job.JobInfo$TriggerContentUri;

        $r2 = virtualinvoke $r0.getUri();

        specialinvoke $r1.<init>($r2, b0);

        return $r1;
    }

    static int convertNetworkType(androidx.work.NetworkType)
    {
        androidx.work.NetworkType $r0;
        java.lang.Object[] $r4;
        androidx.work.Logger $r2;
        int[] $r1;
        java.lang.Throwable[] $r6;
        int $i0;
        java.lang.String $r3, $r5;

        $r0 := @parameter0;

        $r1 = androidx.work.impl.background.systemjob.SystemJobInfoConverter$1.$SwitchMap$androidx$work$NetworkType;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        goto label7;

     label2:
        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 26 goto label7;

        return 4;

     label3:
        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 24 goto label7;

        return 3;

     label4:
        return 2;

     label5:
        return 1;

     label6:
        return 0;

     label7:
        $r2 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.background.systemjob.SystemJobInfoConverter.TAG;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r0;

        $r5 = java.lang.String.format("API version too low. Cannot convert network type value %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug($r3, $r5, $r6);

        return 1;
    }

    static void setRequiredNetwork(android.app.job.JobInfo$Builder, androidx.work.NetworkType)
    {
        androidx.work.NetworkType $r1, r2;
        int i0;
        android.app.job.JobInfo$Builder $r0;
        android.net.NetworkRequest $r4;
        android.net.NetworkRequest$Builder r3;

        $r0 := @parameter0;

        $r1 := @parameter1;

        i0 = android.os.Build$VERSION.SDK_INT;

        if i0 < 30 goto label1;

        r2 = androidx.work.NetworkType.TEMPORARILY_UNMETERED;

        if $r1 != r2 goto label1;

        r3 = new android.net.NetworkRequest$Builder;

        specialinvoke r3.<init>();

        r3 = virtualinvoke r3.addCapability(25);

        $r4 = virtualinvoke r3.build();

        virtualinvoke $r0.setRequiredNetwork($r4);

        return;

     label1:
        i0 = androidx.work.impl.background.systemjob.SystemJobInfoConverter.convertNetworkType($r1);

        virtualinvoke $r0.setRequiredNetworkType(i0);

        return;
    }

    android.app.job.JobInfo convert(androidx.work.impl.model.WorkSpec, int)
    {
        androidx.work.NetworkType $r7;
        androidx.work.BackoffPolicy r8, r9;
        androidx.work.Constraints r2;
        androidx.work.impl.background.systemjob.SystemJobInfoConverter r0;
        long l2, $l3;
        androidx.work.impl.model.WorkSpec $r1;
        byte b1;
        int $i0;
        android.os.PersistableBundle r3, $r17;
        android.app.job.JobInfo $r16;
        java.lang.String $r4;
        boolean $z0, $z1;
        androidx.work.ContentUriTriggers$Trigger r14;
        java.util.Iterator $r12;
        android.content.ComponentName r6;
        android.app.job.JobInfo$TriggerContentUri $r15;
        java.util.Set $r11;
        androidx.work.ContentUriTriggers $r10;
        java.lang.Object $r13;
        android.app.job.JobInfo$Builder r5, $r18;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        r2 = $r1.constraints;

        $r17 = new android.os.PersistableBundle;

        r3 = $r17;

        specialinvoke $r17.<init>();

        $r4 = $r1.id;

        virtualinvoke r3.putString("EXTRA_WORK_SPEC_ID", $r4);

        $z0 = virtualinvoke $r1.isPeriodic();

        virtualinvoke r3.putBoolean("EXTRA_IS_PERIODIC", $z0);

        $r18 = new android.app.job.JobInfo$Builder;

        r6 = r0.mWorkServiceComponent;

        specialinvoke $r18.<init>($i0, r6);

        $z0 = virtualinvoke r2.requiresCharging();

        r5 = virtualinvoke $r18.setRequiresCharging($z0);

        $z0 = virtualinvoke r2.requiresDeviceIdle();

        r5 = virtualinvoke r5.setRequiresDeviceIdle($z0);

        r5 = virtualinvoke r5.setExtras(r3);

        $r7 = virtualinvoke r2.getRequiredNetworkType();

        androidx.work.impl.background.systemjob.SystemJobInfoConverter.setRequiredNetwork(r5, $r7);

        $z0 = virtualinvoke r2.requiresDeviceIdle();

        if $z0 != 0 goto label03;

        r8 = $r1.backoffPolicy;

        r9 = androidx.work.BackoffPolicy.LINEAR;

        if r8 != r9 goto label01;

        b1 = 0;

        goto label02;

     label01:
        b1 = 1;

     label02:
        l2 = $r1.backoffDelayDuration;

        virtualinvoke r5.setBackoffCriteria(l2, b1);

     label03:
        l2 = virtualinvoke $r1.calculateNextRunTime();

        $l3 = java.lang.System.currentTimeMillis();

        l2 = l2 - $l3;

        l2 = java.lang.Math.max(l2, 0L);

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 > 28 goto label04;

        virtualinvoke r5.setMinimumLatency(l2);

        goto label06;

     label04:
        b1 = l2 cmp 0L;

        $i0 = (int) b1;

        if $i0 <= 0 goto label05;

        virtualinvoke r5.setMinimumLatency(l2);

        goto label06;

     label05:
        $z0 = $r1.expedited;

        if $z0 != 0 goto label06;

        virtualinvoke r5.setImportantWhileForeground(1);

     label06:
        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 24 goto label09;

        $z0 = virtualinvoke r2.hasContentUriTriggers();

        if $z0 == 0 goto label09;

        $r10 = virtualinvoke r2.getContentUriTriggers();

        $r11 = virtualinvoke $r10.getTriggers();

        $r12 = interfaceinvoke $r11.iterator();

     label07:
        $z0 = interfaceinvoke $r12.hasNext();

        if $z0 == 0 goto label08;

        $r13 = interfaceinvoke $r12.next();

        r14 = (androidx.work.ContentUriTriggers$Trigger) $r13;

        $r15 = androidx.work.impl.background.systemjob.SystemJobInfoConverter.convertContentUriTrigger(r14);

        virtualinvoke r5.addTriggerContentUri($r15);

        goto label07;

     label08:
        l2 = virtualinvoke r2.getTriggerContentUpdateDelay();

        virtualinvoke r5.setTriggerContentUpdateDelay(l2);

        l2 = virtualinvoke r2.getTriggerMaxContentDelay();

        virtualinvoke r5.setTriggerContentMaxDelay(l2);

     label09:
        virtualinvoke r5.setPersisted(0);

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 26 goto label10;

        $z0 = virtualinvoke r2.requiresBatteryNotLow();

        virtualinvoke r5.setRequiresBatteryNotLow($z0);

        $z0 = virtualinvoke r2.requiresStorageNotLow();

        virtualinvoke r5.setRequiresStorageNotLow($z0);

     label10:
        $i0 = $r1.runAttemptCount;

        if $i0 <= 0 goto label11;

        $z0 = 1;

        goto label12;

     label11:
        $z0 = 0;

     label12:
        $z1 = androidx.core.os.BuildCompat.isAtLeastS();

        if $z1 == 0 goto label13;

        $z1 = $r1.expedited;

        if $z1 == 0 goto label13;

        if $z0 != 0 goto label13;

        virtualinvoke r5.setExpedited(1);

     label13:
        $r16 = virtualinvoke r5.build();

        return $r16;
    }
}
