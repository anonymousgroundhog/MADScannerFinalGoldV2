public abstract class androidx.concurrent.futures.AbstractResolvableFuture extends java.lang.Object implements com.google.common.util.concurrent.ListenableFuture
{
    static final androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper ATOMIC_HELPER;
    static final boolean GENERATE_CANCELLATION_CAUSES;
    private static final java.lang.Object NULL;
    private static final long SPIN_THRESHOLD_NANOS;
    private static final java.util.logging.Logger log;
    volatile androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners;
    volatile java.lang.Object value;
    volatile androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters;

    static void <clinit>()
    {
        java.lang.Throwable r4;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper r10;
        androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper r11;
        androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper $r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5, $r6, $r7, $r8, $r9;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r12;
        java.lang.Class r2;
        java.lang.Object r13;
        java.lang.String $r1;
        boolean $z0;

        $r1 = java.lang.System.getProperty("guava.concurrent.generate_cancellation_cause", "false");

        $z0 = java.lang.Boolean.parseBoolean($r1);

        androidx.concurrent.futures.AbstractResolvableFuture.GENERATE_CANCELLATION_CAUSES = $z0;

        r2 = class "Landroidx/concurrent/futures/AbstractResolvableFuture;";

        $r1 = virtualinvoke r2.getName();

        $r3 = java.util.logging.Logger.getLogger($r1);

        androidx.concurrent.futures.AbstractResolvableFuture.log = $r3;

        r4 = null;

     label1:
        $r0 = new androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper;

        $r5 = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(class "Landroidx/concurrent/futures/AbstractResolvableFuture$Waiter;", class "Ljava/lang/Thread;", "thread");

        $r6 = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(class "Landroidx/concurrent/futures/AbstractResolvableFuture$Waiter;", class "Landroidx/concurrent/futures/AbstractResolvableFuture$Waiter;", "next");

        $r7 = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(class "Landroidx/concurrent/futures/AbstractResolvableFuture;", class "Landroidx/concurrent/futures/AbstractResolvableFuture$Waiter;", "waiters");

        $r8 = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(class "Landroidx/concurrent/futures/AbstractResolvableFuture;", class "Landroidx/concurrent/futures/AbstractResolvableFuture$Listener;", "listeners");

        $r9 = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(class "Landroidx/concurrent/futures/AbstractResolvableFuture;", class "Ljava/lang/Object;", "value");

        specialinvoke $r0.<init>($r5, $r6, $r7, $r8, $r9);

     label2:
        r10 = $r0;

        goto label4;

     label3:
        r4 := @caughtexception;

        r11 = new androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper;

        specialinvoke r11.<init>();

        r10 = r11;

     label4:
        androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER = r10;

        if r4 == null goto label5;

        $r3 = androidx.concurrent.futures.AbstractResolvableFuture.log;

        $r12 = java.util.logging.Level.SEVERE;

        virtualinvoke $r3.log($r12, "SafeAtomicHelper is broken!", r4);

     label5:
        r13 = new java.lang.Object;

        specialinvoke r13.<init>();

        androidx.concurrent.futures.AbstractResolvableFuture.NULL = r13;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void <init>()
    {
        androidx.concurrent.futures.AbstractResolvableFuture r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    private void addDoneString(java.lang.StringBuilder)
    {
        java.lang.Throwable $r9;
        java.util.concurrent.CancellationException r7;
        java.lang.RuntimeException r5;
        java.util.concurrent.ExecutionException r8;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.StringBuilder $r1, $r3;
        java.lang.Object $r2;
        java.lang.Class $r6;
        java.lang.String $r4;

        r0 := @this;

        $r1 := @parameter0;

     label1:
        $r2 = androidx.concurrent.futures.AbstractResolvableFuture.getUninterruptibly(r0);

        $r3 = virtualinvoke $r1.append("SUCCESS, result=[");

        $r4 = specialinvoke r0.userObjectToString($r2);

        $r3 = virtualinvoke $r3.append($r4);

        virtualinvoke $r3.append("]");

     label2:
        return;

     label3:
        r5 := @caughtexception;

        $r1 = virtualinvoke $r1.append("UNKNOWN, cause=[");

        $r6 = virtualinvoke r5.getClass();

        $r1 = virtualinvoke $r1.append($r6);

        virtualinvoke $r1.append(" thrown from get()]");

        return;

     label4:
        r7 := @caughtexception;

        virtualinvoke $r1.append("CANCELLED");

        goto label6;

     label5:
        r8 := @caughtexception;

        $r1 = virtualinvoke $r1.append("FAILURE, cause=[");

        $r9 = virtualinvoke r8.getCause();

        $r1 = virtualinvoke $r1.append($r9);

        virtualinvoke $r1.append("]");

     label6:
        return;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label5;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private static java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        java.lang.String $r0;
        java.util.concurrent.CancellationException r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        r2 = new java.util.concurrent.CancellationException;

        specialinvoke r2.<init>($r0);

        virtualinvoke r2.initCause($r1);

        return r2;
    }

    static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0;

        if r0 == null goto label1;

        return r0;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<init>();

        throw $r1;
    }

    private androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$Listener $r1, r2, r4;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper r3;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

     label1:
        r2 = r0.listeners;

        r3 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        r4 = androidx.concurrent.futures.AbstractResolvableFuture$Listener.TOMBSTONE;

        $z0 = virtualinvoke r3.casListeners(r0, r2, r4);

        if $z0 == 0 goto label1;

     label2:
        if r2 == null goto label3;

        r4 = r2;

        r2 = r2.next;

        r4.next = $r1;

        $r1 = r4;

        goto label2;

     label3:
        return $r1;
    }

    static void complete(androidx.concurrent.futures.AbstractResolvableFuture)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$Listener r0, r3;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r7;
        com.google.common.util.concurrent.ListenableFuture r6;
        java.util.concurrent.Executor r8;
        java.lang.Runnable r1;
        androidx.concurrent.futures.AbstractResolvableFuture$SetFuture r4;
        androidx.concurrent.futures.AbstractResolvableFuture r2;
        java.lang.Object r5;
        boolean z0;

        r2 := @parameter0;

        r3 = null;

     label1:
        specialinvoke r2.releaseWaiters();

        virtualinvoke r2.afterDone();

        r3 = specialinvoke r2.clearListeners(r3);

     label2:
        if r3 == null goto label5;

        r0 = r3;

        r3 = r3.next;

        r1 = r0.task;

        z0 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        if z0 == 0 goto label4;

        r4 = (androidx.concurrent.futures.AbstractResolvableFuture$SetFuture) r1;

        r2 = r4.owner;

        r5 = r2.value;

        if r5 != r4 goto label3;

        r6 = r4.future;

        r5 = androidx.concurrent.futures.AbstractResolvableFuture.getFutureValue(r6);

        $r7 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        z0 = virtualinvoke $r7.casValue(r2, r4, r5);

        if z0 == 0 goto label3;

        goto label1;

     label3:
        goto label2;

     label4:
        r8 = r0.executor;

        androidx.concurrent.futures.AbstractResolvableFuture.executeListener(r1, r8);

        goto label2;

     label5:
        return;
    }

    private static void executeListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r1;
        java.lang.StringBuilder $r5;
        java.lang.RuntimeException r2;
        java.lang.String $r6;
        java.util.logging.Logger $r3;
        java.lang.Runnable $r0;
        java.util.logging.Level $r4;

        $r0 := @parameter0;

        $r1 := @parameter1;

     label1:
        interfaceinvoke $r1.execute($r0);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = androidx.concurrent.futures.AbstractResolvableFuture.log;

        $r4 = java.util.logging.Level.SEVERE;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r5 = virtualinvoke $r5.append("RuntimeException while executing runnable ");

        $r5 = virtualinvoke $r5.append($r0);

        $r5 = virtualinvoke $r5.append(" with executor ");

        $r5 = virtualinvoke $r5.append($r1);

        $r6 = virtualinvoke $r5.toString();

        virtualinvoke $r3.log($r4, $r6, r2);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private java.lang.Object getDoneValue(java.lang.Object) throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r6;
        androidx.concurrent.futures.AbstractResolvableFuture$Failure $r5;
        java.util.concurrent.CancellationException $r2;
        androidx.concurrent.futures.AbstractResolvableFuture$Cancellation r7;
        java.util.concurrent.ExecutionException r4;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object $r1, r3;
        boolean z0;

        r0 := @this;

        $r1 := @parameter0;

        z0 = $r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        if z0 != 0 goto label3;

        z0 = $r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$Failure;

        if z0 != 0 goto label2;

        r3 = androidx.concurrent.futures.AbstractResolvableFuture.NULL;

        if $r1 != r3 goto label1;

        return null;

     label1:
        return $r1;

     label2:
        r4 = new java.util.concurrent.ExecutionException;

        $r5 = (androidx.concurrent.futures.AbstractResolvableFuture$Failure) $r1;

        $r6 = $r5.exception;

        specialinvoke r4.<init>($r6);

        throw r4;

     label3:
        r7 = (androidx.concurrent.futures.AbstractResolvableFuture$Cancellation) $r1;

        $r6 = r7.cause;

        $r2 = androidx.concurrent.futures.AbstractResolvableFuture.cancellationExceptionWithCause("Task was cancelled.", $r6);

        throw $r2;
    }

    static java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)
    {
        java.lang.Throwable $r4;
        androidx.concurrent.futures.AbstractResolvableFuture$Failure r6;
        com.google.common.util.concurrent.ListenableFuture r0;
        java.util.concurrent.CancellationException r7;
        androidx.concurrent.futures.AbstractResolvableFuture$Cancellation r3, $r5;
        java.lang.IllegalArgumentException $r8;
        java.util.concurrent.ExecutionException r11;
        androidx.concurrent.futures.AbstractResolvableFuture r1;
        java.lang.Object r2;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        boolean z0, z1;

        r0 := @parameter0;

        z0 = r0 instanceof androidx.concurrent.futures.AbstractResolvableFuture;

        if z0 == 0 goto label03;

        r1 = (androidx.concurrent.futures.AbstractResolvableFuture) r0;

        r2 = r1.value;

        z0 = r2 instanceof androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        if z0 == 0 goto label12;

        r3 = (androidx.concurrent.futures.AbstractResolvableFuture$Cancellation) r2;

        z0 = r3.wasInterrupted;

        if z0 == 0 goto label12;

        $r4 = r3.cause;

        if $r4 == null goto label01;

        $r5 = new androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        $r4 = r3.cause;

        specialinvoke $r5.<init>(0, $r4);

        goto label02;

     label01:
        $r5 = androidx.concurrent.futures.AbstractResolvableFuture$Cancellation.CAUSELESS_CANCELLED;

     label02:
        return $r5;

     label03:
        z0 = interfaceinvoke r0.isCancelled();

        z1 = androidx.concurrent.futures.AbstractResolvableFuture.GENERATE_CANCELLATION_CAUSES;

        z1 = z1 ^ 1;

        z1 = z1 & z0;

        if z1 == 0 goto label04;

        r3 = androidx.concurrent.futures.AbstractResolvableFuture$Cancellation.CAUSELESS_CANCELLED;

        return r3;

     label04:
        r2 = androidx.concurrent.futures.AbstractResolvableFuture.getUninterruptibly(r0);

     label05:
        if r2 != null goto label07;

     label06:
        r2 = androidx.concurrent.futures.AbstractResolvableFuture.NULL;

     label07:
        return r2;

     label08:
        $r4 := @caughtexception;

        r6 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure;

        specialinvoke r6.<init>($r4);

        return r6;

     label09:
        r7 := @caughtexception;

        if z0 != 0 goto label10;

        r6 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<init>();

        $r9 = virtualinvoke $r9.append("get() threw CancellationException, despite reporting isCancelled() == false: ");

        $r9 = virtualinvoke $r9.append(r0);

        $r10 = virtualinvoke $r9.toString();

        specialinvoke $r8.<init>($r10, r7);

        specialinvoke r6.<init>($r8);

        return r6;

     label10:
        r3 = new androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        specialinvoke r3.<init>(0, r7);

        return r3;

     label11:
        r11 := @caughtexception;

        r6 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure;

        $r4 = virtualinvoke r11.getCause();

        specialinvoke r6.<init>($r4);

        return r6;

     label12:
        return r2;

        catch java.util.concurrent.ExecutionException from label04 to label05 with label11;
        catch java.util.concurrent.CancellationException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    private static java.lang.Object getUninterruptibly(java.util.concurrent.Future) throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable r3;
        java.util.concurrent.Future r0;
        java.lang.InterruptedException r4;
        java.lang.Thread $r2;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0;

        z0 = 0;

     label1:
        $r1 = interfaceinvoke r0.get();

     label2:
        if z0 == 0 goto label6;

        $r2 = java.lang.Thread.currentThread();

        virtualinvoke $r2.interrupt();

        return $r1;

     label3:
        r3 := @caughtexception;

        if z0 == 0 goto label4;

        $r2 = java.lang.Thread.currentThread();

        virtualinvoke $r2.interrupt();

     label4:
        throw r3;

     label5:
        r4 := @caughtexception;

        z0 = 1;

        goto label1;

     label6:
        return $r1;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void releaseWaiters()
    {
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper r3;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        androidx.concurrent.futures.AbstractResolvableFuture$Waiter r1, $r2;
        boolean $z0;

        r0 := @this;

     label1:
        r1 = r0.waiters;

        r3 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $r2 = androidx.concurrent.futures.AbstractResolvableFuture$Waiter.TOMBSTONE;

        $z0 = virtualinvoke r3.casWaiters(r0, r1, $r2);

        if $z0 == 0 goto label1;

     label2:
        if r1 == null goto label3;

        virtualinvoke r1.unpark();

        r1 = r1.next;

        goto label2;

     label3:
        return;
    }

    private void removeWaiter(androidx.concurrent.futures.AbstractResolvableFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r5;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Thread $r4;
        androidx.concurrent.futures.AbstractResolvableFuture$Waiter $r1, r2, r3;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r1.thread = null;

     label1:
        $r1 = null;

        r2 = r0.waiters;

        r3 = androidx.concurrent.futures.AbstractResolvableFuture$Waiter.TOMBSTONE;

        if r2 != r3 goto label2;

        return;

     label2:
        if r2 == null goto label6;

        r3 = r2.next;

        $r4 = r2.thread;

        if $r4 == null goto label3;

        $r1 = r2;

        goto label5;

     label3:
        if $r1 == null goto label4;

        $r1.next = r3;

        $r4 = $r1.thread;

        if $r4 != null goto label5;

        goto label1;

     label4:
        $r5 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r5.casWaiters(r0, r2, r3);

        if $z0 != 0 goto label5;

        goto label1;

     label5:
        r2 = r3;

        goto label2;

     label6:
        return;
    }

    private java.lang.String userObjectToString(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        androidx.concurrent.futures.AbstractResolvableFuture r0;

        r0 := @this;

        $r1 := @parameter0;

        if $r1 != r0 goto label1;

        return "this future";

     label1:
        $r2 = java.lang.String.valueOf($r1);

        return $r2;
    }

    public final void addListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$Listener r3, r4, $r6;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r5;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r1;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        androidx.concurrent.futures.AbstractResolvableFuture.checkNotNull($r1);

        androidx.concurrent.futures.AbstractResolvableFuture.checkNotNull($r2);

        r3 = r0.listeners;

        r4 = androidx.concurrent.futures.AbstractResolvableFuture$Listener.TOMBSTONE;

        if r3 == r4 goto label3;

        r4 = new androidx.concurrent.futures.AbstractResolvableFuture$Listener;

        specialinvoke r4.<init>($r1, $r2);

     label1:
        r4.next = r3;

        $r5 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r5.casListeners(r0, r3, r4);

        if $z0 == 0 goto label2;

        return;

     label2:
        r3 = r0.listeners;

        $r6 = androidx.concurrent.futures.AbstractResolvableFuture$Listener.TOMBSTONE;

        if r3 != $r6 goto label1;

     label3:
        androidx.concurrent.futures.AbstractResolvableFuture.executeListener($r1, $r2);

        return;
    }

    protected void afterDone()
    {
        androidx.concurrent.futures.AbstractResolvableFuture r0;

        r0 := @this;

        return;
    }

    public final boolean cancel(boolean)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper r4;
        com.google.common.util.concurrent.ListenableFuture r6;
        java.util.concurrent.CancellationException r3;
        androidx.concurrent.futures.AbstractResolvableFuture$Cancellation r2;
        androidx.concurrent.futures.AbstractResolvableFuture$SetFuture r5;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object r1;
        boolean $z0, $z1, z2, z3;

        r0 := @this;

        $z0 := @parameter0;

        r1 = r0.value;

        z2 = 0;

        if r1 != null goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z3 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        $z1 = $z1 | z3;

        if $z1 == 0 goto label13;

        $z1 = androidx.concurrent.futures.AbstractResolvableFuture.GENERATE_CANCELLATION_CAUSES;

        if $z1 == 0 goto label03;

        r2 = new androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        r3 = new java.util.concurrent.CancellationException;

        specialinvoke r3.<init>("Future.cancel() was called.");

        specialinvoke r2.<init>($z0, r3);

        goto label05;

     label03:
        if $z0 == 0 goto label04;

        r2 = androidx.concurrent.futures.AbstractResolvableFuture$Cancellation.CAUSELESS_INTERRUPTED;

        goto label05;

     label04:
        r2 = androidx.concurrent.futures.AbstractResolvableFuture$Cancellation.CAUSELESS_CANCELLED;

     label05:
        r4 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z1 = virtualinvoke r4.casValue(r0, r1, r2);

        if $z1 == 0 goto label12;

        z2 = 1;

        if $z0 == 0 goto label06;

        virtualinvoke r0.interruptTask();

     label06:
        androidx.concurrent.futures.AbstractResolvableFuture.complete(r0);

        $z1 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        if $z1 == 0 goto label14;

        r5 = (androidx.concurrent.futures.AbstractResolvableFuture$SetFuture) r1;

        r6 = r5.future;

        $z1 = r6 instanceof androidx.concurrent.futures.AbstractResolvableFuture;

        if $z1 == 0 goto label10;

        r0 = (androidx.concurrent.futures.AbstractResolvableFuture) r6;

        r1 = r0.value;

        if r1 != null goto label07;

        z3 = 1;

        goto label08;

     label07:
        z3 = 0;

     label08:
        $z1 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        $z1 = z3 | $z1;

        if $z1 == 0 goto label09;

        goto label05;

     label09:
        goto label11;

     label10:
        interfaceinvoke r6.cancel($z0);

     label11:
        return 1;

     label12:
        r1 = r0.value;

        $z1 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        if $z1 != 0 goto label05;

        return z2;

     label13:
        return 0;

     label14:
        return 1;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r4;
        androidx.concurrent.futures.AbstractResolvableFuture$Waiter r2, r3, $r6;
        java.lang.InterruptedException $r5;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object r1;
        boolean $z0, z1;

        r0 := @this;

        $z0 = java.lang.Thread.interrupted();

        if $z0 != 0 goto label11;

        r1 = r0.value;

        if r1 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        z1 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        z1 = z1 ^ 1;

        $z0 = $z0 & z1;

        if $z0 == 0 goto label03;

        r1 = specialinvoke r0.getDoneValue(r1);

        return r1;

     label03:
        r2 = r0.waiters;

        r3 = androidx.concurrent.futures.AbstractResolvableFuture$Waiter.TOMBSTONE;

        if r2 == r3 goto label10;

        r3 = new androidx.concurrent.futures.AbstractResolvableFuture$Waiter;

        specialinvoke r3.<init>();

     label04:
        virtualinvoke r3.setNext(r2);

        $r4 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r4.casWaiters(r0, r2, r3);

        if $z0 == 0 goto label09;

     label05:
        java.util.concurrent.locks.LockSupport.park(r0);

        $z0 = java.lang.Thread.interrupted();

        if $z0 != 0 goto label08;

        r1 = r0.value;

        if r1 == null goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        z1 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        z1 = z1 ^ 1;

        $z0 = $z0 & z1;

        if $z0 == 0 goto label05;

        r1 = specialinvoke r0.getDoneValue(r1);

        return r1;

     label08:
        specialinvoke r0.removeWaiter(r3);

        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<init>();

        throw $r5;

     label09:
        r2 = r0.waiters;

        $r6 = androidx.concurrent.futures.AbstractResolvableFuture$Waiter.TOMBSTONE;

        if r2 != $r6 goto label04;

     label10:
        r1 = r0.value;

        r1 = specialinvoke r0.getDoneValue(r1);

        return r1;

     label11:
        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<init>();

        goto label12;

     label12:
        throw $r5;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.TimeoutException $r16;
        long $l0, $l2, l3, $l4;
        byte $b1;
        java.util.Locale $r9;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        int $i5;
        java.lang.String $r7, $r8, $r11, r12;
        boolean $z0, $z1;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r5;
        androidx.concurrent.futures.AbstractResolvableFuture$Waiter r3, r4, $r6;
        java.util.concurrent.TimeUnit $r1, r13;
        java.lang.InterruptedException $r14;
        java.lang.Object r2;
        java.lang.StringBuilder $r10, $r15;

        r0 := @this;

        $l0 := @parameter0;

        $r1 := @parameter1;

        $l2 = virtualinvoke $r1.toNanos($l0);

        l3 = $l2;

        $z0 = java.lang.Thread.interrupted();

        if $z0 != 0 goto label30;

        r2 = r0.value;

        if r2 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $z1 = r2 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label03;

        r2 = specialinvoke r0.getDoneValue(r2);

        return r2;

     label03:
        $b1 = $l2 cmp 0L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label04;

        $l4 = java.lang.System.nanoTime();

        $l4 = $l4 + $l2;

        goto label05;

     label04:
        $l4 = 0L;

     label05:
        $b1 = $l2 cmp 1000L;

        $i5 = (int) $b1;

        if $i5 < 0 goto label16;

        r3 = r0.waiters;

        r4 = androidx.concurrent.futures.AbstractResolvableFuture$Waiter.TOMBSTONE;

        if r3 == r4 goto label15;

        $r6 = new androidx.concurrent.futures.AbstractResolvableFuture$Waiter;

        r4 = $r6;

        specialinvoke $r6.<init>();

     label06:
        virtualinvoke r4.setNext(r3);

        $r5 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r5.casWaiters(r0, r3, r4);

        if $z0 == 0 goto label13;

     label07:
        java.util.concurrent.locks.LockSupport.parkNanos(r0, l3);

        $z0 = java.lang.Thread.interrupted();

        if $z0 != 0 goto label12;

        r2 = r0.value;

        if r2 == null goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        $z1 = r2 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label10;

        r2 = specialinvoke r0.getDoneValue(r2);

        return r2;

     label10:
        l3 = java.lang.System.nanoTime();

        l3 = $l4 - l3;

        $b1 = l3 cmp 1000L;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label11;

        specialinvoke r0.removeWaiter(r4);

        goto label16;

     label11:
        goto label07;

     label12:
        specialinvoke r0.removeWaiter(r4);

        $r14 = new java.lang.InterruptedException;

        specialinvoke $r14.<init>();

        throw $r14;

     label13:
        r3 = r0.waiters;

        $r6 = androidx.concurrent.futures.AbstractResolvableFuture$Waiter.TOMBSTONE;

        if r3 != $r6 goto label14;

        goto label15;

     label14:
        goto label06;

     label15:
        r2 = r0.value;

        r2 = specialinvoke r0.getDoneValue(r2);

        return r2;

     label16:
        $b1 = l3 cmp 0L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label21;

        r2 = r0.value;

        if r2 == null goto label17;

        $z0 = 1;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        $z1 = r2 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label19;

        r2 = specialinvoke r0.getDoneValue(r2);

        return r2;

     label19:
        $z0 = java.lang.Thread.interrupted();

        if $z0 != 0 goto label20;

        l3 = java.lang.System.nanoTime();

        l3 = $l4 - l3;

        goto label16;

     label20:
        $r14 = new java.lang.InterruptedException;

        specialinvoke $r14.<init>();

        throw $r14;

     label21:
        $r7 = virtualinvoke r0.toString();

        $r8 = virtualinvoke $r1.toString();

        $r9 = java.util.Locale.ROOT;

        $r8 = virtualinvoke $r8.toLowerCase($r9);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append("Waited ");

        $r10 = virtualinvoke $r10.append($l0);

        $r10 = virtualinvoke $r10.append(" ");

        $r11 = virtualinvoke $r1.toString();

        $r9 = java.util.Locale.ROOT;

        $r11 = virtualinvoke $r11.toLowerCase($r9);

        $r10 = virtualinvoke $r10.append($r11);

        $r11 = virtualinvoke $r10.toString();

        r12 = $r11;

        $l0 = l3 + 1000L;

        $b1 = $l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label28;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append($r11);

        $r10 = virtualinvoke $r10.append(" (plus ");

        $r11 = virtualinvoke $r10.toString();

        r12 = $r11;

        l3 = neg l3;

        r13 = java.util.concurrent.TimeUnit.NANOSECONDS;

        $l0 = virtualinvoke $r1.convert(l3, r13);

        $l4 = virtualinvoke $r1.toNanos($l0);

        l3 = l3 - $l4;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label23;

        $b1 = l3 cmp 1000L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label22;

        goto label23;

     label22:
        $z0 = 0;

        goto label24;

     label23:
        $z0 = 1;

     label24:
        $z1 = $z0;

        $b1 = $l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label26;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append($r11);

        $r10 = virtualinvoke $r10.append($l0);

        $r10 = virtualinvoke $r10.append(" ");

        $r10 = virtualinvoke $r10.append($r8);

        $r8 = virtualinvoke $r10.toString();

        $r11 = $r8;

        if $z0 == 0 goto label25;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append($r8);

        $r10 = virtualinvoke $r10.append(",");

        $r11 = virtualinvoke $r10.toString();

        goto label25;

     label25:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append($r11);

        $r10 = virtualinvoke $r10.append(" ");

        r12 = virtualinvoke $r10.toString();

     label26:
        if $z1 == 0 goto label27;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append(r12);

        $r10 = virtualinvoke $r10.append(l3);

        $r10 = virtualinvoke $r10.append(" nanoseconds ");

        r12 = virtualinvoke $r10.toString();

     label27:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append(r12);

        $r10 = virtualinvoke $r10.append("delay)");

        r12 = virtualinvoke $r10.toString();

        goto label28;

     label28:
        $z0 = virtualinvoke r0.isDone();

        if $z0 == 0 goto label29;

        $r16 = new java.util.concurrent.TimeoutException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append(r12);

        $r10 = virtualinvoke $r10.append(" but future completed as timeout expired");

        $r7 = virtualinvoke $r10.toString();

        specialinvoke $r16.<init>($r7);

        throw $r16;

     label29:
        $r16 = new java.util.concurrent.TimeoutException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r10 = virtualinvoke $r15.append(r12);

        $r10 = virtualinvoke $r10.append(" for ");

        $r10 = virtualinvoke $r10.append($r7);

        $r7 = virtualinvoke $r10.toString();

        specialinvoke $r16.<init>($r7);

        throw $r16;

     label30:
        $r14 = new java.lang.InterruptedException;

        specialinvoke $r14.<init>();

        goto label31;

     label31:
        throw $r14;
    }

    protected void interruptTask()
    {
        androidx.concurrent.futures.AbstractResolvableFuture r0;

        r0 := @this;

        return;
    }

    public final boolean isCancelled()
    {
        java.lang.Object r1;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        boolean $z0;

        r0 := @this;

        r1 = r0.value;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        return $z0;
    }

    public final boolean isDone()
    {
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this;

        r1 = r0.value;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $z0 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        $z0 = 1 ^ $z0;

        $z1 = $z0 & $z1;

        return $z1;
    }

    final void maybePropagateCancellationTo(java.util.concurrent.Future)
    {
        java.util.concurrent.Future r1;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        boolean $z0, $z1;

        r0 := @this;

        r1 := @parameter0;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $z1 = virtualinvoke r0.isCancelled();

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.wasInterrupted();

        interfaceinvoke r1.cancel($z0);

     label3:
        return;
    }

    protected java.lang.String pendingToString()
    {
        java.util.concurrent.ScheduledFuture $r7;
        com.google.common.util.concurrent.ListenableFuture $r5;
        long $l0;
        java.util.concurrent.TimeUnit $r2;
        androidx.concurrent.futures.AbstractResolvableFuture$SetFuture $r4;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this;

        r1 = r0.value;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("setFuture=[");

        $r4 = (androidx.concurrent.futures.AbstractResolvableFuture$SetFuture) r1;

        $r5 = $r4.future;

        $r6 = specialinvoke r0.userObjectToString($r5);

        $r3 = virtualinvoke $r3.append($r6);

        $r3 = virtualinvoke $r3.append("]");

        $r6 = virtualinvoke $r3.toString();

        return $r6;

     label1:
        $z0 = r0 instanceof java.util.concurrent.ScheduledFuture;

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("remaining delay=[");

        $r7 = (java.util.concurrent.ScheduledFuture) r0;

        $r2 = java.util.concurrent.TimeUnit.MILLISECONDS;

        $l0 = interfaceinvoke $r7.getDelay($r2);

        $r3 = virtualinvoke $r3.append($l0);

        $r3 = virtualinvoke $r3.append(" ms]");

        $r6 = virtualinvoke $r3.toString();

        return $r6;

     label2:
        return null;
    }

    protected boolean set(java.lang.Object)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r2;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        if r1 != null goto label1;

        r1 = androidx.concurrent.futures.AbstractResolvableFuture.NULL;

        goto label1;

     label1:
        $r2 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r2.casValue(r0, null, r1);

        if $z0 == 0 goto label2;

        androidx.concurrent.futures.AbstractResolvableFuture.complete(r0);

        return 1;

     label2:
        return 0;
    }

    protected boolean setException(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        androidx.concurrent.futures.AbstractResolvableFuture$Failure r2;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r4;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure;

        $r3 = androidx.concurrent.futures.AbstractResolvableFuture.checkNotNull($r1);

        $r1 = (java.lang.Throwable) $r3;

        specialinvoke r2.<init>($r1);

        $r4 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r4.casValue(r0, null, r2);

        if $z0 == 0 goto label1;

        androidx.concurrent.futures.AbstractResolvableFuture.complete(r0);

        return 1;

     label1:
        return 0;
    }

    protected boolean setFuture(com.google.common.util.concurrent.ListenableFuture)
    {
        java.lang.Throwable r6, r8;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r3;
        androidx.concurrent.futures.AbstractResolvableFuture$Failure r7;
        com.google.common.util.concurrent.ListenableFuture r1;
        androidx.concurrent.futures.AbstractResolvableFuture$Cancellation r9;
        androidx.concurrent.futures.DirectExecutor r5;
        androidx.concurrent.futures.AbstractResolvableFuture$SetFuture r4;
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        androidx.concurrent.futures.AbstractResolvableFuture.checkNotNull(r1);

        r2 = r0.value;

        if r2 != null goto label11;

        $z0 = interfaceinvoke r1.isDone();

        if $z0 == 0 goto label02;

        r2 = androidx.concurrent.futures.AbstractResolvableFuture.getFutureValue(r1);

        $r3 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r3.casValue(r0, null, r2);

        if $z0 == 0 goto label01;

        androidx.concurrent.futures.AbstractResolvableFuture.complete(r0);

        return 1;

     label01:
        return 0;

     label02:
        r4 = new androidx.concurrent.futures.AbstractResolvableFuture$SetFuture;

        specialinvoke r4.<init>(r0, r1);

        $r3 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $z0 = virtualinvoke $r3.casValue(r0, null, r4);

        if $z0 == 0 goto label10;

     label03:
        r5 = androidx.concurrent.futures.DirectExecutor.INSTANCE;

        interfaceinvoke r1.addListener(r4, r5);

     label04:
        return 1;

     label05:
        r6 := @caughtexception;

     label06:
        r7 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure;

        specialinvoke r7.<init>(r6);

     label07:
        goto label09;

     label08:
        r8 := @caughtexception;

        r7 = androidx.concurrent.futures.AbstractResolvableFuture$Failure.FALLBACK_INSTANCE;

     label09:
        $r3 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        virtualinvoke $r3.casValue(r0, r4, r7);

        return 1;

     label10:
        r2 = r0.value;

     label11:
        $z0 = r2 instanceof androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        if $z0 == 0 goto label12;

        r9 = (androidx.concurrent.futures.AbstractResolvableFuture$Cancellation) r2;

        $z0 = r9.wasInterrupted;

        interfaceinvoke r1.cancel($z0);

     label12:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    public java.lang.String toString()
    {
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        java.lang.StringBuilder r1, $r4;
        java.lang.Class $r5;
        java.lang.String $r2;
        java.lang.RuntimeException r3;
        boolean $z0;

        r0 := @this;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<init>();

        $r2 = specialinvoke r0.toString();

        r1 = virtualinvoke r1.append($r2);

        r1 = virtualinvoke r1.append("[status=");

        $z0 = virtualinvoke r0.isCancelled();

        if $z0 == 0 goto label1;

        virtualinvoke r1.append("CANCELLED");

        goto label8;

     label1:
        $z0 = virtualinvoke r0.isDone();

        if $z0 == 0 goto label2;

        specialinvoke r0.addDoneString(r1);

        goto label8;

     label2:
        $r2 = virtualinvoke r0.pendingToString();

     label3:
        goto label5;

     label4:
        r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r4 = virtualinvoke $r4.append("Exception thrown from implementation: ");

        $r5 = virtualinvoke r3.getClass();

        $r4 = virtualinvoke $r4.append($r5);

        $r2 = virtualinvoke $r4.toString();

     label5:
        if $r2 == null goto label6;

        $z0 = virtualinvoke $r2.isEmpty();

        if $z0 != 0 goto label6;

        $r4 = virtualinvoke r1.append("PENDING, info=[");

        $r4 = virtualinvoke $r4.append($r2);

        virtualinvoke $r4.append("]");

        goto label8;

     label6:
        $z0 = virtualinvoke r0.isDone();

        if $z0 == 0 goto label7;

        specialinvoke r0.addDoneString(r1);

        goto label8;

     label7:
        virtualinvoke r1.append("PENDING");

     label8:
        r1 = virtualinvoke r1.append("]");

        $r2 = virtualinvoke r1.toString();

        return $r2;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    protected final boolean wasInterrupted()
    {
        androidx.concurrent.futures.AbstractResolvableFuture r0;
        androidx.concurrent.futures.AbstractResolvableFuture$Cancellation $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this;

        r1 = r0.value;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractResolvableFuture$Cancellation;

        if $z0 == 0 goto label1;

        $r2 = (androidx.concurrent.futures.AbstractResolvableFuture$Cancellation) r1;

        $z0 = $r2.wasInterrupted;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
