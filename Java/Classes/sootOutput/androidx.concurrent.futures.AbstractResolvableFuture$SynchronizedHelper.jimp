final class androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper extends androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper
{

    void <init>()
    {
        androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper r0;

        r0 := @this;

        specialinvoke r0.<init>(null);

        return;
    }

    boolean casListeners(androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Listener, androidx.concurrent.futures.AbstractResolvableFuture$Listener)
    {
        java.lang.Throwable $r5;
        androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractResolvableFuture$Listener $r2, $r3, $r4;
        androidx.concurrent.futures.AbstractResolvableFuture r1;

        r0 := @this;

        r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        entermonitor r1;

     label1:
        $r4 = r1.listeners;

        if $r4 != $r2 goto label3;

        r1.listeners = $r3;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r5 := @caughtexception;

        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture, java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r5;
        androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractResolvableFuture r1;
        java.lang.Object $r2, $r3, $r4;

        r0 := @this;

        r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        entermonitor r1;

     label1:
        $r4 = r1.value;

        if $r4 != $r2 goto label3;

        r1.value = $r3;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r5 := @caughtexception;

        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    boolean casWaiters(androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Waiter, androidx.concurrent.futures.AbstractResolvableFuture$Waiter)
    {
        java.lang.Throwable $r5;
        androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractResolvableFuture r1;
        androidx.concurrent.futures.AbstractResolvableFuture$Waiter $r2, $r3, $r4;

        r0 := @this;

        r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        entermonitor r1;

     label1:
        $r4 = r1.waiters;

        if $r4 != $r2 goto label3;

        r1.waiters = $r3;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r5 := @caughtexception;

        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void putNext(androidx.concurrent.futures.AbstractResolvableFuture$Waiter, androidx.concurrent.futures.AbstractResolvableFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$Waiter $r1, $r2;
        androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r1.next = $r2;

        return;
    }

    void putThread(androidx.concurrent.futures.AbstractResolvableFuture$Waiter, java.lang.Thread)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$Waiter $r1;
        androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper r0;
        java.lang.Thread $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r1.thread = $r2;

        return;
    }
}
