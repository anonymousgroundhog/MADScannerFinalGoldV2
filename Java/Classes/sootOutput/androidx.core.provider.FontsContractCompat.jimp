public class androidx.core.provider.FontsContractCompat extends java.lang.Object
{
    public static final java.lang.String PARCEL_FONT_RESULTS;
    static final int RESULT_CODE_PROVIDER_NOT_FOUND;
    static final int RESULT_CODE_WRONG_CERTIFICATES;

    private void <init>()
    {
        androidx.core.provider.FontsContractCompat r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public static android.graphics.Typeface buildTypeface(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[])
    {
        android.graphics.Typeface $r3;
        android.content.Context $r0;
        androidx.core.provider.FontsContractCompat$FontInfo[] $r2;
        android.os.CancellationSignal $r1;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r3 = androidx.core.graphics.TypefaceCompat.createFromFontInfo($r0, $r1, $r2, 0);

        return $r3;
    }

    public static androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontRequest) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.Context $r0;
        android.os.CancellationSignal $r1;
        androidx.core.provider.FontsContractCompat$FontFamilyResult $r3;
        androidx.core.provider.FontRequest $r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r3 = androidx.core.provider.FontProvider.getFontFamilyResult($r0, $r2, $r1);

        return $r3;
    }

    public static android.graphics.Typeface getFontSync(android.content.Context, androidx.core.provider.FontRequest, androidx.core.content.res.ResourcesCompat$FontCallback, android.os.Handler, boolean, int, int)
    {
        android.graphics.Typeface $r5;
        android.content.Context $r0;
        androidx.core.provider.FontRequest $r1;
        androidx.core.graphics.TypefaceCompat$ResourcesCallbackAdapter r4;
        android.os.Handler $r3;
        int $i0, $i1;
        androidx.core.content.res.ResourcesCompat$FontCallback $r2;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r3 := @parameter3;

        $z0 := @parameter4;

        $i0 := @parameter5;

        $i1 := @parameter6;

        r4 = new androidx.core.graphics.TypefaceCompat$ResourcesCallbackAdapter;

        specialinvoke r4.<init>($r2);

        $r3 = androidx.core.content.res.ResourcesCompat$FontCallback.getHandler($r3);

        $r5 = androidx.core.provider.FontsContractCompat.requestFont($r0, $r1, $i1, $z0, $i0, $r3, r4);

        return $r5;
    }

    public static android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager, androidx.core.provider.FontRequest, android.content.res.Resources) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.pm.PackageManager $r0;
        androidx.core.provider.FontRequest $r1;
        android.content.pm.ProviderInfo $r3;
        android.content.res.Resources $r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r3 = androidx.core.provider.FontProvider.getProvider($r0, $r1, $r2);

        return $r3;
    }

    public static java.util.Map prepareFontData(android.content.Context, androidx.core.provider.FontsContractCompat$FontInfo[], android.os.CancellationSignal)
    {
        android.content.Context $r0;
        androidx.core.provider.FontsContractCompat$FontInfo[] $r1;
        java.util.Map $r3;
        android.os.CancellationSignal $r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r3 = androidx.core.graphics.TypefaceCompatUtil.readFontInfoIntoByteBuffer($r0, $r1, $r2);

        return $r3;
    }

    public static android.graphics.Typeface requestFont(android.content.Context, androidx.core.provider.FontRequest, int, boolean, int, android.os.Handler, androidx.core.provider.FontsContractCompat$FontRequestCallback)
    {
        android.graphics.Typeface $r5;
        android.content.Context $r0;
        androidx.core.provider.FontRequest $r1;
        androidx.core.provider.FontsContractCompat$FontRequestCallback $r3;
        android.os.Handler $r2;
        int $i0, $i1;
        androidx.core.provider.CallbackWithHandler r4;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $i0 := @parameter2;

        $z0 := @parameter3;

        $i1 := @parameter4;

        $r2 := @parameter5;

        $r3 := @parameter6;

        r4 = new androidx.core.provider.CallbackWithHandler;

        specialinvoke r4.<init>($r3, $r2);

        if $z0 == 0 goto label1;

        $r5 = androidx.core.provider.FontRequestWorker.requestFontSync($r0, $r1, r4, $i0, $i1);

        return $r5;

     label1:
        $r5 = androidx.core.provider.FontRequestWorker.requestFontAsync($r0, $r1, $i0, null, r4);

        return $r5;
    }

    public static void requestFont(android.content.Context, androidx.core.provider.FontRequest, androidx.core.provider.FontsContractCompat$FontRequestCallback, android.os.Handler)
    {
        android.content.Context $r0;
        androidx.core.provider.FontsContractCompat$FontRequestCallback $r2;
        java.util.concurrent.Executor $r5;
        android.os.Handler $r3;
        androidx.core.provider.FontRequest $r1;
        androidx.core.provider.CallbackWithHandler r4;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r3 := @parameter3;

        r4 = new androidx.core.provider.CallbackWithHandler;

        specialinvoke r4.<init>($r2);

        $r5 = androidx.core.provider.RequestExecutor.createHandlerExecutor($r3);

        $r0 = virtualinvoke $r0.getApplicationContext();

        androidx.core.provider.FontRequestWorker.requestFontAsync($r0, $r1, 0, $r5, r4);

        return;
    }

    public static void resetCache()
    {
        androidx.core.provider.FontRequestWorker.resetTypefaceCache();

        return;
    }

    public static void resetTypefaceCache()
    {
        androidx.core.provider.FontRequestWorker.resetTypefaceCache();

        return;
    }
}
