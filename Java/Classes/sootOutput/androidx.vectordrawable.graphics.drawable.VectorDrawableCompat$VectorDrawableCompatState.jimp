class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState extends android.graphics.drawable.Drawable$ConstantState
{
    boolean mAutoMirrored;
    boolean mCacheDirty;
    boolean mCachedAutoMirrored;
    android.graphics.Bitmap mCachedBitmap;
    int mCachedRootAlpha;
    int[] mCachedThemeAttrs;
    android.content.res.ColorStateList mCachedTint;
    android.graphics.PorterDuff$Mode mCachedTintMode;
    int mChangingConfigurations;
    android.graphics.Paint mTempPaint;
    android.content.res.ColorStateList mTint;
    android.graphics.PorterDuff$Mode mTintMode;
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer;

    public void <init>()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this;

        specialinvoke r0.<init>();

        r0.mTint = null;

        $r1 = androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.DEFAULT_TINT_MODE;

        r0.mTintMode = $r1;

        $r2 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        specialinvoke $r2.<init>();

        r0.mVPathRenderer = $r2;

        return;
    }

    public void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3, $r4;
        android.graphics.PorterDuff$Mode $r2;
        android.content.res.ColorStateList $r7;
        int $i0;
        android.graphics.Paint $r5, $r6;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0, $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mTint = null;

        $r2 = androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.DEFAULT_TINT_MODE;

        r0.mTintMode = $r2;

        if $r1 == null goto label3;

        $i0 = $r1.mChangingConfigurations;

        r0.mChangingConfigurations = $i0;

        $r3 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        $r4 = $r1.mVPathRenderer;

        specialinvoke $r3.<init>($r4);

        r0.mVPathRenderer = $r3;

        $r3 = $r1.mVPathRenderer;

        $r5 = $r3.mFillPaint;

        if $r5 == null goto label1;

        $r3 = r0.mVPathRenderer;

        $r5 = new android.graphics.Paint;

        $r4 = $r1.mVPathRenderer;

        $r6 = $r4.mFillPaint;

        specialinvoke $r5.<init>($r6);

        $r3.mFillPaint = $r5;

     label1:
        $r3 = $r1.mVPathRenderer;

        $r5 = $r3.mStrokePaint;

        if $r5 == null goto label2;

        $r3 = r0.mVPathRenderer;

        $r5 = new android.graphics.Paint;

        $r4 = $r1.mVPathRenderer;

        $r6 = $r4.mStrokePaint;

        specialinvoke $r5.<init>($r6);

        $r3.mStrokePaint = $r5;

     label2:
        $r7 = $r1.mTint;

        r0.mTint = $r7;

        $r2 = $r1.mTintMode;

        r0.mTintMode = $r2;

        $z0 = $r1.mAutoMirrored;

        r0.mAutoMirrored = $z0;

     label3:
        return;
    }

    public boolean canReuseBitmap(int, int)
    {
        android.graphics.Bitmap $r1;
        int $i0, $i1, $i2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $r1 = r0.mCachedBitmap;

        $i2 = virtualinvoke $r1.getWidth();

        if $i0 != $i2 goto label1;

        $r1 = r0.mCachedBitmap;

        $i0 = virtualinvoke $r1.getHeight();

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean canReuseCache()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r5;
        android.graphics.PorterDuff$Mode $r3, $r4;
        android.content.res.ColorStateList $r1, $r2;
        int $i0, $i1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        boolean $z0, $z1;

        r0 := @this;

        $z0 = r0.mCacheDirty;

        if $z0 != 0 goto label1;

        $r1 = r0.mCachedTint;

        $r2 = r0.mTint;

        if $r1 != $r2 goto label1;

        $r3 = r0.mCachedTintMode;

        $r4 = r0.mTintMode;

        if $r3 != $r4 goto label1;

        $z0 = r0.mCachedAutoMirrored;

        $z1 = r0.mAutoMirrored;

        if $z0 != $z1 goto label1;

        $i1 = r0.mCachedRootAlpha;

        $r5 = r0.mVPathRenderer;

        $i0 = virtualinvoke $r5.getRootAlpha();

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void createCachedBitmapIfNeeded(int, int)
    {
        android.graphics.Bitmap $r1;
        int $i0, $i1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.graphics.Bitmap$Config $r2;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $r1 = r0.mCachedBitmap;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.canReuseBitmap($i0, $i1);

        if $z0 != 0 goto label2;

     label1:
        $r2 = android.graphics.Bitmap$Config.ARGB_8888;

        $r1 = android.graphics.Bitmap.createBitmap($i0, $i1, $r2);

        r0.mCachedBitmap = $r1;

        r0.mCacheDirty = 1;

     label2:
        return;
    }

    public void drawCachedBitmapWithRootAlpha(android.graphics.Canvas, android.graphics.ColorFilter, android.graphics.Rect)
    {
        android.graphics.ColorFilter $r2;
        android.graphics.Rect $r3;
        android.graphics.Bitmap $r4;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r5 = virtualinvoke r0.getPaint($r2);

        $r4 = r0.mCachedBitmap;

        virtualinvoke $r1.drawBitmap($r4, null, $r3, $r5);

        return;
    }

    public int getChangingConfigurations()
    {
        int i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;

        r0 := @this;

        i0 = r0.mChangingConfigurations;

        return i0;
    }

    public android.graphics.Paint getPaint(android.graphics.ColorFilter)
    {
        android.graphics.ColorFilter $r1;
        int $i0;
        android.graphics.Paint $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = virtualinvoke r0.hasTranslucentRoot();

        if $z0 != 0 goto label1;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.mTempPaint;

        if $r2 != null goto label2;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<init>();

        r0.mTempPaint = $r2;

        virtualinvoke $r2.setFilterBitmap(1);

     label2:
        $r2 = r0.mTempPaint;

        $r3 = r0.mVPathRenderer;

        $i0 = virtualinvoke $r3.getRootAlpha();

        virtualinvoke $r2.setAlpha($i0);

        $r2 = r0.mTempPaint;

        virtualinvoke $r2.setColorFilter($r1);

        $r2 = r0.mTempPaint;

        return $r2;
    }

    public boolean hasTranslucentRoot()
    {
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;

        r0 := @this;

        $r1 = r0.mVPathRenderer;

        $i0 = virtualinvoke $r1.getRootAlpha();

        if $i0 >= 255 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isStateful()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mVPathRenderer;

        $z0 = virtualinvoke $r1.isStateful();

        return $z0;
    }

    public android.graphics.drawable.Drawable newDrawable()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat $r1;

        r0 := @this;

        $r1 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke $r1.<init>(r0);

        return $r1;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat $r2;
        android.content.res.Resources $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke $r2.<init>(r0);

        return $r2;
    }

    public boolean onStateChanged(int[])
    {
        int[] $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        boolean $z0, $z1;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mVPathRenderer;

        $z0 = virtualinvoke r2.onStateChanged($r1);

        $z1 = r0.mCacheDirty;

        $z1 = $z1 | $z0;

        r0.mCacheDirty = $z1;

        return $z0;
    }

    public void updateCacheStates()
    {
        android.content.res.ColorStateList $r1;
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;
        android.graphics.PorterDuff$Mode $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mTint;

        r0.mCachedTint = $r1;

        $r2 = r0.mTintMode;

        r0.mCachedTintMode = $r2;

        $r3 = r0.mVPathRenderer;

        $i0 = virtualinvoke $r3.getRootAlpha();

        r0.mCachedRootAlpha = $i0;

        $z0 = r0.mAutoMirrored;

        r0.mCachedAutoMirrored = $z0;

        r0.mCacheDirty = 0;

        return;
    }

    public void updateCachedBitmap(int, int)
    {
        android.graphics.Bitmap r1;
        int $i0, $i1;
        android.graphics.Canvas r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        r1 = r0.mCachedBitmap;

        virtualinvoke r1.eraseColor(0);

        r2 = new android.graphics.Canvas;

        r1 = r0.mCachedBitmap;

        specialinvoke r2.<init>(r1);

        $r3 = r0.mVPathRenderer;

        virtualinvoke $r3.draw(r2, $i0, $i1, null);

        return;
    }
}
