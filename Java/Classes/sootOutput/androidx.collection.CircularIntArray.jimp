public final class androidx.collection.CircularIntArray extends java.lang.Object
{
    private int mCapacityBitmask;
    private int[] mElements;
    private int mHead;
    private int mTail;

    public void <init>()
    {
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        specialinvoke r0.<init>(8);

        return;
    }

    public void <init>(int)
    {
        int[] $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 := @parameter0;

        specialinvoke r0.<init>();

        if $i0 < 1 goto label3;

        if $i0 > 1073741824 goto label2;

        $i1 = java.lang.Integer.bitCount($i0);

        if $i1 == 1 goto label1;

        $i0 = $i0 + -1;

        $i0 = java.lang.Integer.highestOneBit($i0);

        $i0 = $i0 << 1;

        goto label1;

     label1:
        $i1 = $i0 + -1;

        r0.mCapacityBitmask = $i1;

        $r1 = newarray (int)[$i0];

        r0.mElements = $r1;

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<init>("capacity must be <= 2^30");

        throw $r2;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<init>("capacity must be >= 1");

        throw $r2;
    }

    private void doubleCapacity()
    {
        java.lang.RuntimeException $r3;
        int[] r1, $r2;
        int i0, i1, i2, $i3;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $r2 = r0.mElements;

        i0 = lengthof $r2;

        $i3 = r0.mHead;

        i1 = i0 - $i3;

        i2 = i0 << 1;

        if i2 < 0 goto label1;

        r1 = newarray (int)[i2];

        java.lang.System.arraycopy($r2, $i3, r1, 0, i1);

        $r2 = r0.mElements;

        $i3 = r0.mHead;

        java.lang.System.arraycopy($r2, 0, r1, i1, $i3);

        r0.mElements = r1;

        r0.mHead = 0;

        r0.mTail = i0;

        i0 = -1;

        i2 = i2 + i0;

        r0.mCapacityBitmask = i2;

        return;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<init>("Max array capacity exceeded");

        throw $r3;
    }

    public void addFirst(int)
    {
        int[] $r1;
        int $i0, $i1, $i2;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 = r0.mHead;

        $i1 = $i1 + -1;

        $i2 = r0.mCapacityBitmask;

        $i1 = $i1 & $i2;

        r0.mHead = $i1;

        $r1 = r0.mElements;

        $r1[$i1] = $i0;

        $i0 = r0.mTail;

        if $i1 != $i0 goto label1;

        specialinvoke r0.doubleCapacity();

     label1:
        return;
    }

    public void addLast(int)
    {
        int[] $r1;
        int $i0, $i1;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mElements;

        $i1 = r0.mTail;

        $r1[$i1] = $i0;

        $i0 = $i1 + 1;

        $i1 = r0.mCapacityBitmask;

        $i0 = $i1 & $i0;

        r0.mTail = $i0;

        $i1 = r0.mHead;

        if $i0 != $i1 goto label1;

        specialinvoke r0.doubleCapacity();

     label1:
        return;
    }

    public void clear()
    {
        int $i0;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 = r0.mHead;

        r0.mTail = $i0;

        return;
    }

    public int get(int)
    {
        int[] $r1;
        int $i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 := @parameter0;

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke r0.size();

        if $i0 >= $i1 goto label1;

        $r1 = r0.mElements;

        $i1 = r0.mHead;

        $i1 = $i1 + $i0;

        $i0 = r0.mCapacityBitmask;

        $i0 = $i1 & $i0;

        $i0 = $r1[$i0];

        return $i0;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<init>();

        throw $r2;
    }

    public int getFirst()
    {
        int[] $r1;
        int $i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 = r0.mHead;

        $i1 = r0.mTail;

        if $i0 == $i1 goto label1;

        $r1 = r0.mElements;

        $i0 = $r1[$i0];

        return $i0;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<init>();

        throw $r2;
    }

    public int getLast()
    {
        int[] $r1;
        int $i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i1 = r0.mHead;

        $i0 = r0.mTail;

        if $i1 == $i0 goto label1;

        $r1 = r0.mElements;

        $i1 = $i0 + -1;

        $i0 = r0.mCapacityBitmask;

        $i0 = $i1 & $i0;

        $i0 = $r1[$i0];

        return $i0;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<init>();

        throw $r2;
    }

    public boolean isEmpty()
    {
        int $i0, $i1;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i1 = r0.mHead;

        $i0 = r0.mTail;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int popFirst()
    {
        int[] r1;
        int $i0, i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 = r0.mHead;

        i1 = r0.mTail;

        if $i0 == i1 goto label1;

        r1 = r0.mElements;

        i1 = r1[$i0];

        $i2 = $i0 + 1;

        $i0 = r0.mCapacityBitmask;

        $i0 = $i2 & $i0;

        r0.mHead = $i0;

        return i1;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<init>();

        throw $r2;
    }

    public int popLast()
    {
        int[] r1;
        int i0, i1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        i0 = r0.mHead;

        i1 = r0.mTail;

        if i0 == i1 goto label1;

        i0 = -1;

        i1 = i1 + i0;

        i0 = r0.mCapacityBitmask;

        i1 = i0 & i1;

        r1 = r0.mElements;

        i0 = r1[i1];

        r0.mTail = i1;

        return i0;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<init>();

        throw $r2;
    }

    public void removeFromEnd(int)
    {
        int $i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 := @parameter0;

        if $i0 > 0 goto label1;

        return;

     label1:
        $i1 = virtualinvoke r0.size();

        if $i0 > $i1 goto label2;

        $i1 = r0.mTail;

        $i1 = $i1 - $i0;

        $i0 = r0.mCapacityBitmask;

        $i0 = $i1 & $i0;

        r0.mTail = $i0;

        return;

     label2:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<init>();

        throw $r1;
    }

    public void removeFromStart(int)
    {
        int $i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 := @parameter0;

        if $i0 > 0 goto label1;

        return;

     label1:
        $i1 = virtualinvoke r0.size();

        if $i0 > $i1 goto label2;

        $i1 = r0.mHead;

        $i1 = $i1 + $i0;

        $i0 = r0.mCapacityBitmask;

        $i0 = $i1 & $i0;

        r0.mHead = $i0;

        return;

     label2:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<init>();

        throw $r1;
    }

    public int size()
    {
        int $i0, $i1;
        androidx.collection.CircularIntArray r0;

        r0 := @this;

        $i0 = r0.mTail;

        $i1 = r0.mHead;

        $i0 = $i0 - $i1;

        $i1 = r0.mCapacityBitmask;

        $i0 = $i0 & $i1;

        return $i0;
    }
}
