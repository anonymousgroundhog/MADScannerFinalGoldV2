final class androidx.loader.content.AsyncTaskLoader$LoadTask extends androidx.loader.content.ModernAsyncTask implements java.lang.Runnable
{
    private final java.util.concurrent.CountDownLatch mDone;
    final androidx.loader.content.AsyncTaskLoader this$0;
    boolean waiting;

    void <init>(androidx.loader.content.AsyncTaskLoader)
    {
        androidx.loader.content.AsyncTaskLoader$LoadTask r0;
        java.util.concurrent.CountDownLatch $r2;
        androidx.loader.content.AsyncTaskLoader $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.this$0 = $r1;

        specialinvoke r0.<init>();

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<init>(1);

        r0.mDone = $r2;

        return;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        java.lang.Object[] $r2;
        androidx.loader.content.AsyncTaskLoader$LoadTask r0;
        java.lang.Object $r1;
        java.lang.Void[] $r3;

        r0 := @this;

        $r2 := @parameter0;

        $r3 = (java.lang.Void[]) $r2;

        $r1 = virtualinvoke r0.doInBackground($r3);

        return $r1;
    }

    protected transient java.lang.Object doInBackground(java.lang.Void[])
    {
        androidx.loader.content.AsyncTaskLoader r2;
        androidx.loader.content.AsyncTaskLoader$LoadTask r0;
        java.lang.Object $r3;
        java.lang.Void[] $r1;
        androidx.core.os.OperationCanceledException r4;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.this$0;

     label1:
        $r3 = virtualinvoke r2.onLoadInBackground();

     label2:
        return $r3;

     label3:
        r4 := @caughtexception;

        $z0 = virtualinvoke r0.isCancelled();

        if $z0 == 0 goto label4;

        return null;

     label4:
        throw r4;

        catch androidx.core.os.OperationCanceledException from label1 to label2 with label3;
    }

    protected void onCancelled(java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.util.concurrent.CountDownLatch $r2;
        androidx.loader.content.AsyncTaskLoader $r3;
        androidx.loader.content.AsyncTaskLoader$LoadTask r0;
        java.lang.Object r1;

        r0 := @this;

        r1 := @parameter0;

     label1:
        $r3 = r0.this$0;

        virtualinvoke $r3.dispatchOnCancelled(r0, r1);

     label2:
        $r2 = r0.mDone;

        virtualinvoke $r2.countDown();

        return;

     label3:
        $r4 := @caughtexception;

        $r2 = r0.mDone;

        virtualinvoke $r2.countDown();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void onPostExecute(java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.util.concurrent.CountDownLatch $r2;
        androidx.loader.content.AsyncTaskLoader $r3;
        androidx.loader.content.AsyncTaskLoader$LoadTask r0;
        java.lang.Object r1;

        r0 := @this;

        r1 := @parameter0;

     label1:
        $r3 = r0.this$0;

        virtualinvoke $r3.dispatchOnLoadComplete(r0, r1);

     label2:
        $r2 = r0.mDone;

        virtualinvoke $r2.countDown();

        return;

     label3:
        $r4 := @caughtexception;

        $r2 = r0.mDone;

        virtualinvoke $r2.countDown();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void run()
    {
        androidx.loader.content.AsyncTaskLoader$LoadTask r0;
        androidx.loader.content.AsyncTaskLoader $r1;

        r0 := @this;

        r0.waiting = 0;

        $r1 = r0.this$0;

        virtualinvoke $r1.executePendingTask();

        return;
    }

    public void waitForLoader()
    {
        androidx.loader.content.AsyncTaskLoader$LoadTask r0;
        java.util.concurrent.CountDownLatch $r1;
        java.lang.InterruptedException $r2;

        r0 := @this;

        $r1 = r0.mDone;

     label1:
        virtualinvoke $r1.await();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
