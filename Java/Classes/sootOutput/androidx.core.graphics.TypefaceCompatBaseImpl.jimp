class androidx.core.graphics.TypefaceCompatBaseImpl extends java.lang.Object
{
    private static final int INVALID_KEY;
    private static final java.lang.String TAG;
    private java.util.concurrent.ConcurrentHashMap mFontFamilies;

    void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;

        r0 := @this;

        specialinvoke r0.<init>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<init>();

        r0.mFontFamilies = $r1;

        return;
    }

    private void addFontFamily(android.graphics.Typeface, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry)
    {
        android.graphics.Typeface $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        byte $b0;
        java.lang.Long $r4;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        long $l1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $l1 = androidx.core.graphics.TypefaceCompatBaseImpl.getUniqueKey($r1);

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $r3 = r0.mFontFamilies;

        $r4 = java.lang.Long.valueOf($l1);

        virtualinvoke $r3.put($r4, $r2);

     label1:
        return;
    }

    private androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, int)
    {
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] $r3;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.graphics.TypefaceCompatBaseImpl$2 $r2;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r1;
        int $i0;
        java.lang.Object $r4;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r5;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r3 = virtualinvoke $r1.getEntries();

        $r2 = new androidx.core.graphics.TypefaceCompatBaseImpl$2;

        specialinvoke $r2.<init>(r0);

        $r4 = androidx.core.graphics.TypefaceCompatBaseImpl.findBestFont($r3, $i0, $r2);

        $r5 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) $r4;

        return $r5;
    }

    private static java.lang.Object findBestFont(java.lang.Object[], int, androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)
    {
        java.lang.Object[] r0;
        androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor r1;
        short s2;
        int $i0, i1, $i3, $i4;
        java.lang.Object r2, r3;
        boolean z0, $z1;

        r0 := @parameter0;

        $i0 := @parameter1;

        r1 := @parameter2;

        i1 = $i0 & 1;

        if i1 != 0 goto label01;

        s2 = 400;

        goto label02;

     label01:
        s2 = 700;

     label02:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label03;

        z0 = 1;

        goto label04;

     label03:
        z0 = 0;

     label04:
        r3 = null;

        i1 = 2147483647;

        $i0 = lengthof r0;

        $i3 = 0;

     label05:
        if $i3 >= $i0 goto label10;

        r2 = r0[$i3];

        $i4 = interfaceinvoke r1.getWeight(r2);

        $i4 = $i4 - s2;

        $i4 = java.lang.Math.abs($i4);

        $i4 = $i4 * 2;

        $z1 = interfaceinvoke r1.isItalic(r2);

        if $z1 != z0 goto label06;

        $z1 = 0;

        goto label07;

     label06:
        $z1 = 1;

     label07:
        $i4 = $i4 + $z1;

        if r3 == null goto label08;

        if i1 <= $i4 goto label09;

     label08:
        r3 = r2;

        i1 = $i4;

     label09:
        $i3 = $i3 + 1;

        goto label05;

     label10:
        return r3;
    }

    private static long getUniqueKey(android.graphics.Typeface)
    {
        android.graphics.Typeface $r0;
        java.lang.IllegalAccessException r5;
        long $l0;
        java.lang.reflect.Field $r2;
        java.lang.NoSuchFieldException r6;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.lang.Number r4;

        $r0 := @parameter0;

        if $r0 != null goto label1;

        return 0L;

     label1:
        r1 = class "Landroid/graphics/Typeface;";

     label2:
        $r2 = virtualinvoke r1.getDeclaredField("native_instance");

        virtualinvoke $r2.setAccessible(1);

        $r3 = virtualinvoke $r2.get($r0);

     label3:
        r4 = (java.lang.Number) $r3;

     label4:
        $l0 = virtualinvoke r4.longValue();

     label5:
        return $l0;

     label6:
        r5 := @caughtexception;

        android.util.Log.e("TypefaceCompatBaseImpl", "Could not retrieve font from family.", r5);

        return 0L;

     label7:
        r6 := @caughtexception;

        android.util.Log.e("TypefaceCompatBaseImpl", "Could not retrieve font from family.", r6);

        return 0L;

        catch java.lang.NoSuchFieldException from label2 to label3 with label7;
        catch java.lang.NoSuchFieldException from label4 to label5 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label6;
        catch java.lang.IllegalAccessException from label4 to label5 with label6;
    }

    public android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, android.content.res.Resources, int)
    {
        android.graphics.Typeface $r6;
        android.content.Context $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r2;
        int $i0, $i1;
        java.lang.String $r5;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r4;
        android.content.res.Resources $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $i0 := @parameter3;

        $r4 = specialinvoke r0.findBestEntry($r2, $i0);

        if $r4 != null goto label1;

        return null;

     label1:
        $i1 = virtualinvoke $r4.getResourceId();

        $r5 = virtualinvoke $r4.getFileName();

        $r6 = androidx.core.graphics.TypefaceCompat.createFromResourcesFontFile($r1, $r3, $i1, $r5, $i0);

        specialinvoke r0.addFontFamily($r6, $r2);

        return $r6;
    }

    public android.graphics.Typeface createFromFontInfo(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        android.graphics.Typeface $r9;
        java.lang.Throwable $r10;
        android.content.Context $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.provider.FontsContractCompat$FontInfo $r4;
        android.os.CancellationSignal $r2;
        android.net.Uri $r7;
        java.io.IOException r11;
        androidx.core.provider.FontsContractCompat$FontInfo[] $r3;
        android.content.ContentResolver $r6;
        int $i0, i1;
        java.io.InputStream r5, $r8;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $i0 := @parameter3;

        i1 = lengthof $r3;

        if i1 >= 1 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r0.findBestInfo($r3, $i0);

        r5 = null;

     label2:
        $r6 = virtualinvoke $r1.getContentResolver();

        $r7 = virtualinvoke $r4.getUri();

        $r8 = virtualinvoke $r6.openInputStream($r7);

     label3:
        r5 = $r8;

     label4:
        $r9 = virtualinvoke r0.createFromInputStream($r1, $r8);

     label5:
        androidx.core.graphics.TypefaceCompatUtil.closeQuietly($r8);

        return $r9;

     label6:
        $r10 := @caughtexception;

        androidx.core.graphics.TypefaceCompatUtil.closeQuietly(r5);

        throw $r10;

     label7:
        r11 := @caughtexception;

        androidx.core.graphics.TypefaceCompatUtil.closeQuietly(r5);

        return null;

        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    protected android.graphics.Typeface createFromInputStream(android.content.Context, java.io.InputStream)
    {
        android.graphics.Typeface $r5;
        java.lang.Throwable $r6;
        android.content.Context $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        java.lang.RuntimeException r7;
        java.io.File $r3;
        java.lang.String $r4;
        java.io.InputStream $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = androidx.core.graphics.TypefaceCompatUtil.getTempFile($r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $z0 = androidx.core.graphics.TypefaceCompatUtil.copyToFile($r3, $r2);

     label2:
        if $z0 != 0 goto label3;

        virtualinvoke $r3.delete();

        return null;

     label3:
        $r4 = virtualinvoke $r3.getPath();

        $r5 = android.graphics.Typeface.createFromFile($r4);

     label4:
        virtualinvoke $r3.delete();

        return $r5;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r3.delete();

        throw $r6;

     label6:
        r7 := @caughtexception;

        virtualinvoke $r3.delete();

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.graphics.Typeface createFromResourcesFontFile(android.content.Context, android.content.res.Resources, int, java.lang.String, int)
    {
        android.graphics.Typeface $r5;
        java.lang.Throwable $r6;
        android.content.Context $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        java.lang.RuntimeException r7;
        java.io.File $r4;
        int $i0, $i1;
        java.lang.String $r3;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $i0 := @parameter2;

        $r3 := @parameter3;

        $i1 := @parameter4;

        $r4 = androidx.core.graphics.TypefaceCompatUtil.getTempFile($r1);

        if $r4 != null goto label1;

        return null;

     label1:
        $z0 = androidx.core.graphics.TypefaceCompatUtil.copyToFile($r4, $r2, $i0);

     label2:
        if $z0 != 0 goto label3;

        virtualinvoke $r4.delete();

        return null;

     label3:
        $r3 = virtualinvoke $r4.getPath();

        $r5 = android.graphics.Typeface.createFromFile($r3);

     label4:
        virtualinvoke $r4.delete();

        return $r5;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r4.delete();

        throw $r6;

     label6:
        r7 := @caughtexception;

        virtualinvoke $r4.delete();

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        androidx.core.provider.FontsContractCompat$FontInfo[] $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.provider.FontsContractCompat$FontInfo $r4;
        androidx.core.graphics.TypefaceCompatBaseImpl$1 $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r3 = new androidx.core.graphics.TypefaceCompatBaseImpl$1;

        specialinvoke $r3.<init>(r0);

        $r2 = androidx.core.graphics.TypefaceCompatBaseImpl.findBestFont($r1, $i0, $r3);

        $r4 = (androidx.core.provider.FontsContractCompat$FontInfo) $r2;

        return $r4;
    }

    androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry getFontFamily(android.graphics.Typeface)
    {
        android.graphics.Typeface $r1;
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r5;
        java.util.concurrent.ConcurrentHashMap $r2;
        long $l1;
        byte $b0;
        java.lang.Long $r3;
        java.lang.Object $r4;

        r0 := @this;

        $r1 := @parameter0;

        $l1 = androidx.core.graphics.TypefaceCompatBaseImpl.getUniqueKey($r1);

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.mFontFamilies;

        $r3 = java.lang.Long.valueOf($l1);

        $r4 = virtualinvoke $r2.get($r3);

        $r5 = (androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry) $r4;

        return $r5;
    }
}
