public class androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor extends java.lang.Object implements androidx.work.impl.utils.taskexecutor.TaskExecutor
{
    private final androidx.work.impl.utils.SerialExecutor mBackgroundExecutor;
    private final java.util.concurrent.Executor mMainThreadExecutor;
    private final android.os.Handler mMainThreadHandler;

    public void <init>(java.util.concurrent.Executor)
    {
        androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor$1 $r4;
        androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor r0;
        java.util.concurrent.Executor $r1;
        android.os.Looper $r2;
        android.os.Handler $r3;
        androidx.work.impl.utils.SerialExecutor $r5;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        $r3 = new android.os.Handler;

        $r2 = android.os.Looper.getMainLooper();

        specialinvoke $r3.<init>($r2);

        r0.mMainThreadHandler = $r3;

        $r4 = new androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor$1;

        specialinvoke $r4.<init>(r0);

        r0.mMainThreadExecutor = $r4;

        $r5 = new androidx.work.impl.utils.SerialExecutor;

        specialinvoke $r5.<init>($r1);

        r0.mBackgroundExecutor = $r5;

        return;
    }

    public void executeOnBackgroundThread(java.lang.Runnable)
    {
        androidx.work.impl.utils.SerialExecutor $r2;
        androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor r0;
        java.lang.Runnable $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mBackgroundExecutor;

        virtualinvoke $r2.execute($r1);

        return;
    }

    public androidx.work.impl.utils.SerialExecutor getBackgroundExecutor()
    {
        androidx.work.impl.utils.SerialExecutor r1;
        androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor r0;

        r0 := @this;

        r1 = r0.mBackgroundExecutor;

        return r1;
    }

    public java.util.concurrent.Executor getMainThreadExecutor()
    {
        androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor r0;
        java.util.concurrent.Executor r1;

        r0 := @this;

        r1 = r0.mMainThreadExecutor;

        return r1;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.work.impl.utils.taskexecutor.WorkManagerTaskExecutor r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mMainThreadHandler;

        virtualinvoke $r2.post($r1);

        return;
    }
}
