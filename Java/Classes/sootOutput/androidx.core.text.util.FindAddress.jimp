class androidx.core.text.util.FindAddress extends java.lang.Object
{
    private static final java.lang.String HOUSE_COMPONENT;
    private static final java.lang.String HOUSE_END;
    private static final java.lang.String HOUSE_POST_DELIM;
    private static final java.lang.String HOUSE_PRE_DELIM;
    private static final int MAX_ADDRESS_LINES;
    private static final int MAX_ADDRESS_WORDS;
    private static final int MAX_LOCATION_NAME_DISTANCE;
    private static final int MIN_ADDRESS_WORDS;
    private static final java.lang.String NL;
    private static final java.lang.String SP;
    private static final java.lang.String WORD_DELIM;
    private static final java.lang.String WORD_END;
    private static final java.lang.String WS;
    private static final int kMaxAddressNameWordLength;
    private static final java.util.regex.Pattern sHouseNumberRe;
    private static final java.util.regex.Pattern sLocationNameRe;
    private static final java.util.regex.Pattern sStateRe;
    private static final androidx.core.text.util.FindAddress$ZipRange[] sStateZipCodeRanges;
    private static final java.util.regex.Pattern sSuffixedNumberRe;
    private static final java.util.regex.Pattern sWordRe;
    private static final java.util.regex.Pattern sZipCodeRe;

    static void <clinit>()
    {
        java.util.regex.Pattern $r1;
        androidx.core.text.util.FindAddress$ZipRange $r2;
        androidx.core.text.util.FindAddress$ZipRange[] $r0;

        $r0 = newarray (androidx.core.text.util.FindAddress$ZipRange)[59];

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(99, 99, -1, -1);

        $r0[0] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(35, 36, -1, -1);

        $r0[1] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(71, 72, -1, -1);

        $r0[2] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(96, 96, -1, -1);

        $r0[3] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(85, 86, -1, -1);

        $r0[4] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(90, 96, -1, -1);

        $r0[5] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(80, 81, -1, -1);

        $r0[6] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(6, 6, -1, -1);

        $r0[7] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(20, 20, -1, -1);

        $r0[8] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(19, 19, -1, -1);

        $r0[9] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(32, 34, -1, -1);

        $r0[10] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(96, 96, -1, -1);

        $r0[11] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(30, 31, -1, -1);

        $r0[12] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(96, 96, -1, -1);

        $r0[13] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(96, 96, -1, -1);

        $r0[14] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(50, 52, -1, -1);

        $r0[15] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(83, 83, -1, -1);

        $r0[16] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(60, 62, -1, -1);

        $r0[17] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(46, 47, -1, -1);

        $r0[18] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(66, 67, 73, -1);

        $r0[19] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(40, 42, -1, -1);

        $r0[20] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(70, 71, -1, -1);

        $r0[21] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(1, 2, -1, -1);

        $r0[22] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(20, 21, -1, -1);

        $r0[23] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(3, 4, -1, -1);

        $r0[24] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(96, 96, -1, -1);

        $r0[25] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(48, 49, -1, -1);

        $r0[26] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(55, 56, -1, -1);

        $r0[27] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(63, 65, -1, -1);

        $r0[28] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(96, 96, -1, -1);

        $r0[29] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(38, 39, -1, -1);

        $r0[30] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(55, 56, -1, -1);

        $r0[31] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(27, 28, -1, -1);

        $r0[32] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(58, 58, -1, -1);

        $r0[33] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(68, 69, -1, -1);

        $r0[34] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(3, 4, -1, -1);

        $r0[35] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(7, 8, -1, -1);

        $r0[36] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(87, 88, 86, -1);

        $r0[37] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(88, 89, 96, -1);

        $r0[38] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(10, 14, 0, 6);

        $r0[39] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(43, 45, -1, -1);

        $r0[40] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(73, 74, -1, -1);

        $r0[41] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(97, 97, -1, -1);

        $r0[42] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(15, 19, -1, -1);

        $r0[43] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(6, 6, 0, 9);

        $r0[44] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(96, 96, -1, -1);

        $r0[45] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(2, 2, -1, -1);

        $r0[46] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(29, 29, -1, -1);

        $r0[47] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(57, 57, -1, -1);

        $r0[48] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(37, 38, -1, -1);

        $r0[49] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(75, 79, 87, 88);

        $r0[50] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(84, 84, -1, -1);

        $r0[51] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(22, 24, 20, -1);

        $r0[52] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(6, 9, -1, -1);

        $r0[53] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(5, 5, -1, -1);

        $r0[54] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(98, 99, -1, -1);

        $r0[55] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(53, 54, -1, -1);

        $r0[56] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(24, 26, -1, -1);

        $r0[57] = $r2;

        $r2 = new androidx.core.text.util.FindAddress$ZipRange;

        specialinvoke $r2.<init>(82, 83, -1, -1);

        $r0[58] = $r2;

        androidx.core.text.util.FindAddress.sStateZipCodeRanges = $r0;

        $r1 = java.util.regex.Pattern.compile("[^,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]+(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        androidx.core.text.util.FindAddress.sWordRe = $r1;

        $r1 = java.util.regex.Pattern.compile("(?:one|[0-9]+([a-z](?=[^a-z]|$)|st|nd|rd|th)?)(?:-(?:one|[0-9]+([a-z](?=[^a-z]|$)|st|nd|rd|th)?))*(?=[,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        androidx.core.text.util.FindAddress.sHouseNumberRe = $r1;

        $r1 = java.util.regex.Pattern.compile("(?:(ak|alaska)|(al|alabama)|(ar|arkansas)|(as|american[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+samoa)|(az|arizona)|(ca|california)|(co|colorado)|(ct|connecticut)|(dc|district[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+of[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+columbia)|(de|delaware)|(fl|florida)|(fm|federated[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+states[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+of[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+micronesia)|(ga|georgia)|(gu|guam)|(hi|hawaii)|(ia|iowa)|(id|idaho)|(il|illinois)|(in|indiana)|(ks|kansas)|(ky|kentucky)|(la|louisiana)|(ma|massachusetts)|(md|maryland)|(me|maine)|(mh|marshall[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+islands)|(mi|michigan)|(mn|minnesota)|(mo|missouri)|(mp|northern[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+mariana[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+islands)|(ms|mississippi)|(mt|montana)|(nc|north[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+carolina)|(nd|north[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+dakota)|(ne|nebraska)|(nh|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+hampshire)|(nj|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+jersey)|(nm|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+mexico)|(nv|nevada)|(ny|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+york)|(oh|ohio)|(ok|oklahoma)|(or|oregon)|(pa|pennsylvania)|(pr|puerto[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+rico)|(pw|palau)|(ri|rhode[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+island)|(sc|south[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+carolina)|(sd|south[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+dakota)|(tn|tennessee)|(tx|texas)|(ut|utah)|(va|virginia)|(vi|virgin[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+islands)|(vt|vermont)|(wa|washington)|(wi|wisconsin)|(wv|west[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+virginia)|(wy|wyoming))(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        androidx.core.text.util.FindAddress.sStateRe = $r1;

        $r1 = java.util.regex.Pattern.compile("(?:alley|annex|arcade|ave[.]?|avenue|alameda|bayou|beach|bend|bluffs?|bottom|boulevard|branch|bridge|brooks?|burgs?|bypass|broadway|camino|camp|canyon|cape|causeway|centers?|circles?|cliffs?|club|common|corners?|course|courts?|coves?|creek|crescent|crest|crossing|crossroad|curve|circulo|dale|dam|divide|drives?|estates?|expressway|extensions?|falls?|ferry|fields?|flats?|fords?|forest|forges?|forks?|fort|freeway|gardens?|gateway|glens?|greens?|groves?|harbors?|haven|heights|highway|hills?|hollow|inlet|islands?|isle|junctions?|keys?|knolls?|lakes?|land|landing|lane|lights?|loaf|locks?|lodge|loop|mall|manors?|meadows?|mews|mills?|mission|motorway|mount|mountains?|neck|orchard|oval|overpass|parks?|parkways?|pass|passage|path|pike|pines?|plains?|plaza|points?|ports?|prairie|privada|radial|ramp|ranch|rapids?|rd[.]?|rest|ridges?|river|roads?|route|row|rue|run|shoals?|shores?|skyway|springs?|spurs?|squares?|station|stravenue|stream|st[.]?|streets?|summit|speedway|terrace|throughway|trace|track|trafficway|trail|tunnel|turnpike|underpass|unions?|valleys?|viaduct|views?|villages?|ville|vista|walks?|wall|ways?|wells?|xing|xrd)(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        androidx.core.text.util.FindAddress.sLocationNameRe = $r1;

        $r1 = java.util.regex.Pattern.compile("([0-9]+)(st|nd|rd|th)", 2);

        androidx.core.text.util.FindAddress.sSuffixedNumberRe = $r1;

        $r1 = java.util.regex.Pattern.compile("(?:[0-9]{5}(?:-[0-9]{4})?)(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        androidx.core.text.util.FindAddress.sZipCodeRe = $r1;

        return;
    }

    private void <init>()
    {
        androidx.core.text.util.FindAddress r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    private static int attemptMatch(java.lang.String, java.util.regex.MatchResult)
    {
        java.util.regex.MatchResult $r1;
        java.util.regex.Matcher $r4, $r6;
        int i0, i1, $i2, i3, i4, $i5, $i6;
        java.lang.String $r0, r2, $r5;
        boolean z0, z1, $z2;
        char $c7;
        java.util.regex.Pattern r3;

        $r0 := @parameter0;

        $r1 := @parameter1;

        i0 = -1;

        i1 = -1;

        i3 = interfaceinvoke $r1.end();

        $i2 = 1;

        z0 = 1;

        z1 = 0;

        i4 = 1;

        r2 = "";

        r3 = androidx.core.text.util.FindAddress.sWordRe;

        $r4 = virtualinvoke r3.matcher($r0);

     label01:
        $i5 = virtualinvoke $r0.length();

        if i3 >= $i5 goto label15;

        $z2 = virtualinvoke $r4.find(i3);

        if $z2 != 0 goto label02;

        i0 = virtualinvoke $r0.length();

        i0 = neg i0;

        return i0;

     label02:
        $i5 = virtualinvoke $r4.end();

        $i6 = virtualinvoke $r4.start();

        $i5 = $i5 - $i6;

        if $i5 <= 25 goto label03;

        i0 = virtualinvoke $r4.end();

        i0 = neg i0;

        return i0;

     label03:
        $i5 = virtualinvoke $r4.start();

        if i3 >= $i5 goto label05;

        $i5 = i3 + 1;

        $c7 = virtualinvoke $r0.charAt(i3);

        $r5 = "\n\u000b\f\r\u0085\u2028\u2029";

        i3 = (int) $c7;

        i3 = virtualinvoke $r5.indexOf(i3);

        if i3 == -1 goto label04;

        $i2 = $i2 + 1;

     label04:
        i3 = $i5;

        goto label03;

     label05:
        if $i2 <= 5 goto label06;

        goto label15;

     label06:
        i4 = i4 + 1;

        if i4 <= 14 goto label07;

        goto label15;

     label07:
        $r1 = androidx.core.text.util.FindAddress.matchHouseNumber($r0, i3);

        if $r1 == null goto label09;

        if z0 == 0 goto label08;

        if $i2 <= 1 goto label08;

        i0 = neg i3;

        return i0;

     label08:
        if i0 != -1 goto label14;

        i0 = i3;

        goto label14;

     label09:
        z0 = 0;

        $r5 = virtualinvoke $r4.group(0);

        $z2 = androidx.core.text.util.FindAddress.isValidLocationName($r5);

        if $z2 == 0 goto label10;

        z1 = 1;

        goto label14;

     label10:
        if i4 != 5 goto label11;

        if z1 != 0 goto label11;

        i3 = virtualinvoke $r4.end();

        goto label15;

     label11:
        if z1 == 0 goto label14;

        if i4 <= 4 goto label14;

        $r1 = androidx.core.text.util.FindAddress.matchState($r0, i3);

        if $r1 == null goto label14;

        $z2 = virtualinvoke r2.equals("et");

        if $z2 == 0 goto label12;

        r2 = interfaceinvoke $r1.group(0);

        $z2 = virtualinvoke r2.equals("al");

        if $z2 == 0 goto label12;

        i3 = interfaceinvoke $r1.end();

        goto label15;

     label12:
        r3 = androidx.core.text.util.FindAddress.sWordRe;

        $r6 = virtualinvoke r3.matcher($r0);

        i3 = interfaceinvoke $r1.end();

        $z2 = virtualinvoke $r6.find(i3);

        if $z2 == 0 goto label13;

        r2 = virtualinvoke $r6.group(0);

        $z2 = androidx.core.text.util.FindAddress.isValidZipCode(r2, $r1);

        if $z2 == 0 goto label14;

        i0 = virtualinvoke $r6.end();

        return i0;

     label13:
        i1 = interfaceinvoke $r1.end();

     label14:
        r2 = virtualinvoke $r4.group(0);

        i3 = virtualinvoke $r4.end();

        goto label01;

     label15:
        if i1 <= 0 goto label16;

        return i1;

     label16:
        if i0 <= 0 goto label17;

        goto label18;

     label17:
        i0 = i3;

     label18:
        i0 = neg i0;

        return i0;
    }

    private static boolean checkHouseNumber(java.lang.String)
    {
        char $c3;
        java.util.regex.Matcher $r2;
        java.util.Locale $r3;
        int i0, i1, $i2;
        java.lang.String $r0, $r4;
        java.util.regex.Pattern r1;
        boolean $z0;

        $r0 := @parameter0;

        i0 = 0;

        i1 = 0;

     label01:
        $i2 = virtualinvoke $r0.length();

        if i1 >= $i2 goto label03;

        $c3 = virtualinvoke $r0.charAt(i1);

        $z0 = java.lang.Character.isDigit($c3);

        if $z0 == 0 goto label02;

        i0 = i0 + 1;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        if i0 <= 5 goto label04;

        return 0;

     label04:
        r1 = androidx.core.text.util.FindAddress.sSuffixedNumberRe;

        $r2 = virtualinvoke r1.matcher($r0);

        $z0 = virtualinvoke $r2.find();

        if $z0 == 0 goto label16;

        $r0 = virtualinvoke $r2.group(1);

        i0 = java.lang.Integer.parseInt($r0);

        if i0 != 0 goto label05;

        return 0;

     label05:
        $r0 = virtualinvoke $r2.group(2);

        $r3 = java.util.Locale.getDefault();

        $r0 = virtualinvoke $r0.toLowerCase($r3);

        i1 = i0 % 10;

        $r4 = "th";

        lookupswitch(i1)
        {
            case 1: goto label13;
            case 2: goto label10;
            case 3: goto label07;
            default: goto label06;
        };

     label06:
        $z0 = virtualinvoke $r0.equals("th");

        return $z0;

     label07:
        i0 = i0 % 100;

        if i0 != 13 goto label08;

        goto label09;

     label08:
        $r4 = "rd";

     label09:
        $z0 = virtualinvoke $r0.equals($r4);

        return $z0;

     label10:
        i0 = i0 % 100;

        if i0 != 12 goto label11;

        goto label12;

     label11:
        $r4 = "nd";

     label12:
        $z0 = virtualinvoke $r0.equals($r4);

        return $z0;

     label13:
        i0 = i0 % 100;

        if i0 != 11 goto label14;

        goto label15;

     label14:
        $r4 = "st";

     label15:
        $z0 = virtualinvoke $r0.equals($r4);

        return $z0;

     label16:
        return 1;
    }

    static java.lang.String findAddress(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        int i0, $i1;
        java.lang.String $r0, $r3;
        java.util.regex.Pattern r1;
        boolean $z0;

        $r0 := @parameter0;

        r1 = androidx.core.text.util.FindAddress.sHouseNumberRe;

        $r2 = virtualinvoke r1.matcher($r0);

        i0 = 0;

     label1:
        $z0 = virtualinvoke $r2.find(i0);

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke $r2.group(0);

        $z0 = androidx.core.text.util.FindAddress.checkHouseNumber($r3);

        if $z0 == 0 goto label3;

        i0 = virtualinvoke $r2.start();

        $i1 = androidx.core.text.util.FindAddress.attemptMatch($r0, $r2);

        if $i1 <= 0 goto label2;

        $r0 = virtualinvoke $r0.substring(i0, $i1);

        return $r0;

     label2:
        i0 = neg $i1;

        goto label1;

     label3:
        i0 = virtualinvoke $r2.end();

        goto label1;

     label4:
        return null;
    }

    public static boolean isValidLocationName(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0;

        $r1 = androidx.core.text.util.FindAddress.sLocationNameRe;

        $r2 = virtualinvoke $r1.matcher($r0);

        $z0 = virtualinvoke $r2.matches();

        return $z0;
    }

    public static boolean isValidZipCode(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0;

        $r1 = androidx.core.text.util.FindAddress.sZipCodeRe;

        $r2 = virtualinvoke $r1.matcher($r0);

        $z0 = virtualinvoke $r2.matches();

        return $z0;
    }

    public static boolean isValidZipCode(java.lang.String, java.lang.String)
    {
        java.util.regex.MatchResult $r2;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 = androidx.core.text.util.FindAddress.matchState($r1, 0);

        $z0 = androidx.core.text.util.FindAddress.isValidZipCode($r0, $r2);

        return $z0;
    }

    private static boolean isValidZipCode(java.lang.String, java.util.regex.MatchResult)
    {
        androidx.core.text.util.FindAddress$ZipRange[] r5;
        java.util.regex.MatchResult $r1;
        java.util.regex.Matcher $r4;
        androidx.core.text.util.FindAddress$ZipRange r6;
        int $i0, i1;
        java.lang.String $r0, $r2;
        java.util.regex.Pattern r3;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r1.groupCount();

     label2:
        if $i0 <= 0 goto label4;

        i1 = -1;

        i1 = $i0 + i1;

        $r2 = interfaceinvoke $r1.group($i0);

        if $r2 == null goto label3;

        $i0 = i1;

        goto label4;

     label3:
        $i0 = i1;

        goto label2;

     label4:
        r3 = androidx.core.text.util.FindAddress.sZipCodeRe;

        $r4 = virtualinvoke r3.matcher($r0);

        $z0 = virtualinvoke $r4.matches();

        if $z0 == 0 goto label5;

        r5 = androidx.core.text.util.FindAddress.sStateZipCodeRanges;

        r6 = r5[$i0];

        $z0 = virtualinvoke r6.matches($r0);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public static java.util.regex.MatchResult matchHouseNumber(java.lang.String, int)
    {
        java.util.regex.MatchResult $r4;
        char $c2;
        java.util.regex.Matcher $r3;
        int $i0, i1;
        java.lang.String $r0, r1;
        java.util.regex.Pattern r2;
        boolean $z0;

        $r0 := @parameter0;

        $i0 := @parameter1;

        if $i0 <= 0 goto label1;

        i1 = -1;

        i1 = $i0 + i1;

        $c2 = virtualinvoke $r0.charAt(i1);

        r1 = ":,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        i1 = (int) $c2;

        i1 = virtualinvoke r1.indexOf(i1);

        if i1 != -1 goto label1;

        return null;

     label1:
        r2 = androidx.core.text.util.FindAddress.sHouseNumberRe;

        $r3 = virtualinvoke r2.matcher($r0);

        i1 = virtualinvoke $r0.length();

        $r3 = virtualinvoke $r3.region($i0, i1);

        $z0 = virtualinvoke $r3.lookingAt();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r3.toMatchResult();

        $r0 = interfaceinvoke $r4.group(0);

        $z0 = androidx.core.text.util.FindAddress.checkHouseNumber($r0);

        if $z0 == 0 goto label2;

        return $r4;

     label2:
        return null;
    }

    public static java.util.regex.MatchResult matchState(java.lang.String, int)
    {
        java.util.regex.MatchResult $r4;
        char $c2;
        java.util.regex.Matcher $r3;
        int $i0, i1;
        java.lang.String $r0, $r1;
        java.util.regex.Pattern r2;
        boolean $z0;

        $r0 := @parameter0;

        $i0 := @parameter1;

        if $i0 <= 0 goto label1;

        i1 = -1;

        i1 = $i0 + i1;

        $c2 = virtualinvoke $r0.charAt(i1);

        $r1 = ",*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        i1 = (int) $c2;

        i1 = virtualinvoke $r1.indexOf(i1);

        if i1 != -1 goto label1;

        return null;

     label1:
        r2 = androidx.core.text.util.FindAddress.sStateRe;

        $r3 = virtualinvoke r2.matcher($r0);

        i1 = virtualinvoke $r0.length();

        $r3 = virtualinvoke $r3.region($i0, i1);

        $z0 = virtualinvoke $r3.lookingAt();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r3.toMatchResult();

        return $r4;

     label2:
        return null;
    }
}
