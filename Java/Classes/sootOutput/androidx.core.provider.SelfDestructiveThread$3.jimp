class androidx.core.provider.SelfDestructiveThread$3 extends java.lang.Object implements java.lang.Runnable
{
    final androidx.core.provider.SelfDestructiveThread this$0;
    final java.util.concurrent.Callable val$callable;
    final java.util.concurrent.locks.Condition val$cond;
    final java.util.concurrent.atomic.AtomicReference val$holder;
    final java.util.concurrent.locks.ReentrantLock val$lock;
    final java.util.concurrent.atomic.AtomicBoolean val$running;

    void <init>(androidx.core.provider.SelfDestructiveThread, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Callable, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.locks.Condition)
    {
        java.util.concurrent.locks.Condition $r6;
        java.util.concurrent.locks.ReentrantLock $r4;
        androidx.core.provider.SelfDestructiveThread$3 r0;
        androidx.core.provider.SelfDestructiveThread $r1;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 := @parameter3;

        $r5 := @parameter4;

        $r6 := @parameter5;

        r0.this$0 = $r1;

        r0.val$holder = $r2;

        r0.val$callable = $r3;

        r0.val$lock = $r4;

        r0.val$running = $r5;

        r0.val$cond = $r6;

        specialinvoke r0.<init>();

        return;
    }

    public void run()
    {
        java.lang.Throwable $r8;
        java.util.concurrent.locks.ReentrantLock $r5;
        androidx.core.provider.SelfDestructiveThread$3 r0;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Exception $r4;
        java.util.concurrent.locks.Condition $r7;
        java.lang.Object $r1;

        r0 := @this;

     label1:
        $r2 = r0.val$holder;

        $r3 = r0.val$callable;

        $r1 = interfaceinvoke $r3.call();

        virtualinvoke $r2.set($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.val$lock;

        virtualinvoke $r5.lock();

     label5:
        $r6 = r0.val$running;

        virtualinvoke $r6.set(0);

        $r7 = r0.val$cond;

        interfaceinvoke $r7.signal();

     label6:
        $r5 = r0.val$lock;

        virtualinvoke $r5.unlock();

        return;

     label7:
        $r8 := @caughtexception;

        $r5 = r0.val$lock;

        virtualinvoke $r5.unlock();

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
}
