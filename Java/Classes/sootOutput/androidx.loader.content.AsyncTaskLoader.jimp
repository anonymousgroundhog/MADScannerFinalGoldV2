public abstract class androidx.loader.content.AsyncTaskLoader extends androidx.loader.content.Loader
{
    static final boolean DEBUG;
    static final java.lang.String TAG;
    volatile androidx.loader.content.AsyncTaskLoader$LoadTask mCancellingTask;
    private final java.util.concurrent.Executor mExecutor;
    android.os.Handler mHandler;
    long mLastLoadCompleteTime;
    volatile androidx.loader.content.AsyncTaskLoader$LoadTask mTask;
    long mUpdateThrottle;

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        androidx.loader.content.AsyncTaskLoader r0;
        java.util.concurrent.Executor $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = androidx.loader.content.ModernAsyncTask.THREAD_POOL_EXECUTOR;

        specialinvoke r0.<init>($r1, $r2);

        return;
    }

    private void <init>(android.content.Context, java.util.concurrent.Executor)
    {
        android.content.Context $r1;
        androidx.loader.content.AsyncTaskLoader r0;
        java.util.concurrent.Executor $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        specialinvoke r0.<init>($r1);

        r0.mLastLoadCompleteTime = -10000L;

        r0.mExecutor = $r2;

        return;
    }

    public void cancelLoadInBackground()
    {
        androidx.loader.content.AsyncTaskLoader r0;

        r0 := @this;

        return;
    }

    void dispatchOnCancelled(androidx.loader.content.AsyncTaskLoader$LoadTask, java.lang.Object)
    {
        androidx.loader.content.AsyncTaskLoader r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask r1, $r3;
        java.lang.Object r2;
        long $l0;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        virtualinvoke r0.onCanceled(r2);

        $r3 = r0.mCancellingTask;

        if $r3 != r1 goto label1;

        virtualinvoke r0.rollbackContentChanged();

        $l0 = android.os.SystemClock.uptimeMillis();

        r0.mLastLoadCompleteTime = $l0;

        r0.mCancellingTask = null;

        virtualinvoke r0.deliverCancellation();

        virtualinvoke r0.executePendingTask();

     label1:
        return;
    }

    void dispatchOnLoadComplete(androidx.loader.content.AsyncTaskLoader$LoadTask, java.lang.Object)
    {
        androidx.loader.content.AsyncTaskLoader r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask r1, $r3;
        java.lang.Object r2;
        long $l0;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r3 = r0.mTask;

        if $r3 == r1 goto label1;

        virtualinvoke r0.dispatchOnCancelled(r1, r2);

        return;

     label1:
        $z0 = virtualinvoke r0.isAbandoned();

        if $z0 == 0 goto label2;

        virtualinvoke r0.onCanceled(r2);

        return;

     label2:
        virtualinvoke r0.commitContentChanged();

        $l0 = android.os.SystemClock.uptimeMillis();

        r0.mLastLoadCompleteTime = $l0;

        r0.mTask = null;

        virtualinvoke r0.deliverResult(r2);

        return;
    }

    public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        java.io.PrintWriter $r3;
        androidx.loader.content.AsyncTaskLoader r0;
        androidx.loader.content.AsyncTaskLoader$LoadTask $r5;
        java.lang.String[] $r4;
        long $l1, $l2;
        byte $b0;
        java.io.FileDescriptor $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 := @parameter3;

        specialinvoke r0.dump($r1, $r2, $r3, $r4);

        $r5 = r0.mTask;

        if $r5 == null goto label1;

        virtualinvoke $r3.print($r1);

        virtualinvoke $r3.print("mTask=");

        $r5 = r0.mTask;

        virtualinvoke $r3.print($r5);

        virtualinvoke $r3.print(" waiting=");

        $r5 = r0.mTask;

        $z0 = $r5.waiting;

        virtualinvoke $r3.println($z0);

     label1:
        $r5 = r0.mCancellingTask;

        if $r5 == null goto label2;

        virtualinvoke $r3.print($r1);

        virtualinvoke $r3.print("mCancellingTask=");

        $r5 = r0.mCancellingTask;

        virtualinvoke $r3.print($r5);

        virtualinvoke $r3.print(" waiting=");

        $r5 = r0.mCancellingTask;

        $z0 = $r5.waiting;

        virtualinvoke $r3.println($z0);

     label2:
        $l1 = r0.mUpdateThrottle;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label3;

        virtualinvoke $r3.print($r1);

        virtualinvoke $r3.print("mUpdateThrottle=");

        $l1 = r0.mUpdateThrottle;

        androidx.core.util.TimeUtils.formatDuration($l1, $r3);

        virtualinvoke $r3.print(" mLastLoadCompleteTime=");

        $l2 = r0.mLastLoadCompleteTime;

        $l1 = android.os.SystemClock.uptimeMillis();

        androidx.core.util.TimeUtils.formatDuration($l2, $l1, $r3);

        virtualinvoke $r3.println();

     label3:
        return;
    }

    void executePendingTask()
    {
        androidx.loader.content.AsyncTaskLoader r0;
        java.util.concurrent.Executor $r3;
        androidx.loader.content.AsyncTaskLoader$LoadTask r1;
        long $l0, $l2, $l3;
        byte $b1;
        android.os.Handler r2;
        int $i4;
        boolean z0;

        r0 := @this;

        r1 = r0.mCancellingTask;

        if r1 != null goto label3;

        r1 = r0.mTask;

        if r1 == null goto label3;

        r1 = r0.mTask;

        z0 = r1.waiting;

        if z0 == 0 goto label1;

        r1 = r0.mTask;

        r1.waiting = 0;

        r2 = r0.mHandler;

        r1 = r0.mTask;

        virtualinvoke r2.removeCallbacks(r1);

     label1:
        $l0 = r0.mUpdateThrottle;

        $b1 = $l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label2;

        $l0 = android.os.SystemClock.uptimeMillis();

        $l2 = r0.mLastLoadCompleteTime;

        $l3 = r0.mUpdateThrottle;

        $l2 = $l2 + $l3;

        $b1 = $l0 cmp $l2;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label2;

        r1 = r0.mTask;

        r1.waiting = 1;

        r2 = r0.mHandler;

        r1 = r0.mTask;

        $l2 = r0.mLastLoadCompleteTime;

        $l0 = r0.mUpdateThrottle;

        $l0 = $l2 + $l0;

        virtualinvoke r2.postAtTime(r1, $l0);

        return;

     label2:
        r1 = r0.mTask;

        $r3 = r0.mExecutor;

        virtualinvoke r1.executeOnExecutor($r3, null);

     label3:
        return;
    }

    public boolean isLoadInBackgroundCanceled()
    {
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1;
        androidx.loader.content.AsyncTaskLoader r0;

        r0 := @this;

        $r1 = r0.mCancellingTask;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract java.lang.Object loadInBackground();

    protected boolean onCancelLoad()
    {
        androidx.loader.content.AsyncTaskLoader r0;
        android.os.Handler r2;
        androidx.loader.content.AsyncTaskLoader$LoadTask r1;
        boolean $z0;

        r0 := @this;

        r1 = r0.mTask;

        if r1 == null goto label6;

        $z0 = r0.mStarted;

        if $z0 != 0 goto label1;

        r0.mContentChanged = 1;

     label1:
        r1 = r0.mCancellingTask;

        if r1 == null goto label3;

        r1 = r0.mTask;

        $z0 = r1.waiting;

        if $z0 == 0 goto label2;

        r1 = r0.mTask;

        r1.waiting = 0;

        r2 = r0.mHandler;

        r1 = r0.mTask;

        virtualinvoke r2.removeCallbacks(r1);

     label2:
        r0.mTask = null;

        return 0;

     label3:
        r1 = r0.mTask;

        $z0 = r1.waiting;

        if $z0 == 0 goto label4;

        r1 = r0.mTask;

        r1.waiting = 0;

        r2 = r0.mHandler;

        r1 = r0.mTask;

        virtualinvoke r2.removeCallbacks(r1);

        r0.mTask = null;

        return 0;

     label4:
        r1 = r0.mTask;

        $z0 = virtualinvoke r1.cancel(0);

        if $z0 == 0 goto label5;

        r1 = r0.mTask;

        r0.mCancellingTask = r1;

        virtualinvoke r0.cancelLoadInBackground();

     label5:
        r0.mTask = null;

        return $z0;

     label6:
        return 0;
    }

    public void onCanceled(java.lang.Object)
    {
        java.lang.Object r1;
        androidx.loader.content.AsyncTaskLoader r0;

        r0 := @this;

        r1 := @parameter0;

        return;
    }

    protected void onForceLoad()
    {
        androidx.loader.content.AsyncTaskLoader$LoadTask $r1;
        androidx.loader.content.AsyncTaskLoader r0;

        r0 := @this;

        specialinvoke r0.onForceLoad();

        virtualinvoke r0.cancelLoad();

        $r1 = new androidx.loader.content.AsyncTaskLoader$LoadTask;

        specialinvoke $r1.<init>(r0);

        r0.mTask = $r1;

        virtualinvoke r0.executePendingTask();

        return;
    }

    protected java.lang.Object onLoadInBackground()
    {
        java.lang.Object $r1;
        androidx.loader.content.AsyncTaskLoader r0;

        r0 := @this;

        $r1 = virtualinvoke r0.loadInBackground();

        return $r1;
    }

    public void setUpdateThrottle(long)
    {
        androidx.loader.content.AsyncTaskLoader r0;
        byte $b1;
        android.os.Handler $r1;
        long $l0;

        r0 := @this;

        $l0 := @parameter0;

        r0.mUpdateThrottle = $l0;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<init>();

        r0.mHandler = $r1;

     label1:
        return;
    }

    public void waitForLoader()
    {
        androidx.loader.content.AsyncTaskLoader$LoadTask r1;
        androidx.loader.content.AsyncTaskLoader r0;

        r0 := @this;

        r1 = r0.mTask;

        if r1 == null goto label1;

        virtualinvoke r1.waitForLoader();

     label1:
        return;
    }
}
