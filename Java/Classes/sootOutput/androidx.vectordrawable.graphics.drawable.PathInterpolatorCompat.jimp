public class androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat extends java.lang.Object implements android.view.animation.Interpolator
{
    public static final double EPSILON;
    public static final int MAX_NUM_POINTS;
    private static final float PRECISION;
    private float[] mX;
    private float[] mY;

    public void <init>(android.content.Context, android.util.AttributeSet, org.xmlpull.v1.XmlPullParser)
    {
        android.content.Context $r1;
        androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat r0;
        android.util.AttributeSet $r2;
        android.content.res.Resources$Theme $r5;
        org.xmlpull.v1.XmlPullParser $r3;
        android.content.res.Resources $r4;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 = virtualinvoke $r1.getResources();

        $r5 = virtualinvoke $r1.getTheme();

        specialinvoke r0.<init>($r4, $r5, $r2, $r3);

        return;
    }

    public void <init>(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, org.xmlpull.v1.XmlPullParser)
    {
        androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat r0;
        android.util.AttributeSet $r3;
        int[] r6;
        android.content.res.Resources$Theme $r2;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r4;
        android.content.res.TypedArray $r5;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 := @parameter3;

        specialinvoke r0.<init>();

        r6 = androidx.vectordrawable.graphics.drawable.AndroidResources.STYLEABLE_PATH_INTERPOLATOR;

        $r5 = androidx.core.content.res.TypedArrayUtils.obtainAttributes($r1, $r2, $r3, r6);

        specialinvoke r0.parseInterpolatorFromTypeArray($r5, $r4);

        virtualinvoke $r5.recycle();

        return;
    }

    private void initCubic(float, float, float, float)
    {
        android.graphics.Path r1;
        androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat r0;
        float $f0, $f1, $f2, $f3;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $f2 := @parameter2;

        $f3 := @parameter3;

        r1 = new android.graphics.Path;

        specialinvoke r1.<init>();

        virtualinvoke r1.moveTo(0.0F, 0.0F);

        virtualinvoke r1.cubicTo($f0, $f1, $f2, $f3, 1.0F, 1.0F);

        specialinvoke r0.initPath(r1);

        return;
    }

    private void initPath(android.graphics.Path)
    {
        android.graphics.Path $r1;
        float[] r3, r4;
        androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat r0;
        byte b3;
        int i0, i1, i2, i4;
        java.lang.String $r6;
        double d0;
        boolean $z0;
        android.graphics.PathMeasure r2, $r7;
        java.lang.IllegalArgumentException $r9;
        float $f0, f1, f2;
        java.lang.StringBuilder $r5, $r8;

        r0 := @this;

        $r1 := @parameter0;

        $r7 = new android.graphics.PathMeasure;

        r2 = $r7;

        specialinvoke $r7.<init>($r1, 0);

        $f0 = virtualinvoke r2.getLength();

        f1 = $f0 / 0.002F;

        i0 = (int) f1;

        i0 = i0 + 1;

        i0 = java.lang.Math.min(3000, i0);

        if i0 <= 0 goto label8;

        r3 = newarray (float)[i0];

        r0.mX = r3;

        r3 = newarray (float)[i0];

        r0.mY = r3;

        r3 = newarray (float)[2];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        f1 = (float) i1;

        f1 = f1 * $f0;

        i2 = -1;

        i2 = i0 + i2;

        f2 = (float) i2;

        f1 = f1 / f2;

        virtualinvoke r2.getPosTan(f1, r3, null);

        r4 = r0.mX;

        f1 = r3[0];

        r4[i1] = f1;

        r4 = r0.mY;

        f1 = r3[1];

        r4[i1] = f1;

        i1 = i1 + 1;

        goto label1;

     label2:
        r3 = r0.mX;

        $f0 = r3[0];

        $f0 = java.lang.Math.abs($f0);

        d0 = (double) $f0;

        b3 = d0 cmpl 1.0E-5;

        i1 = (int) b3;

        if i1 > 0 goto label7;

        r3 = r0.mY;

        $f0 = r3[0];

        $f0 = java.lang.Math.abs($f0);

        d0 = (double) $f0;

        b3 = d0 cmpl 1.0E-5;

        i1 = (int) b3;

        if i1 > 0 goto label7;

        r3 = r0.mX;

        i1 = -1;

        i1 = i0 + i1;

        $f0 = r3[i1];

        $f0 = $f0 - 1.0F;

        $f0 = java.lang.Math.abs($f0);

        d0 = (double) $f0;

        b3 = d0 cmpl 1.0E-5;

        i1 = (int) b3;

        if i1 > 0 goto label7;

        r3 = r0.mY;

        i1 = -1;

        i1 = i0 + i1;

        $f0 = r3[i1];

        $f0 = $f0 - 1.0F;

        $f0 = java.lang.Math.abs($f0);

        d0 = (double) $f0;

        b3 = d0 cmpl 1.0E-5;

        i1 = (int) b3;

        if i1 > 0 goto label7;

        $f0 = 0.0F;

        i4 = 0;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r0.mX;

        i2 = i4 + 1;

        f1 = r3[i4];

        b3 = f1 cmpg $f0;

        i4 = (int) b3;

        if i4 < 0 goto label4;

        r3[i1] = f1;

        $f0 = f1;

        i1 = i1 + 1;

        i4 = i2;

        goto label3;

     label4:
        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<init>();

        $r5 = virtualinvoke $r8.append("The Path cannot loop back on itself, x :");

        $r5 = virtualinvoke $r5.append(f1);

        $r6 = virtualinvoke $r5.toString();

        specialinvoke $r9.<init>($r6);

        throw $r9;

     label5:
        $z0 = virtualinvoke r2.nextContour();

        if $z0 != 0 goto label6;

        return;

     label6:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<init>("The Path should be continuous, can\'t have 2+ contours");

        throw $r9;

     label7:
        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<init>();

        $r5 = virtualinvoke $r8.append("The Path must start at (0,0) and end at (1,1) start: ");

        r3 = r0.mX;

        $f0 = r3[0];

        $r5 = virtualinvoke $r5.append($f0);

        $r5 = virtualinvoke $r5.append(",");

        r3 = r0.mY;

        $f0 = r3[0];

        $r5 = virtualinvoke $r5.append($f0);

        $r5 = virtualinvoke $r5.append(" end:");

        r3 = r0.mX;

        i1 = -1;

        i1 = i0 + i1;

        $f0 = r3[i1];

        $r5 = virtualinvoke $r5.append($f0);

        $r5 = virtualinvoke $r5.append(",");

        r3 = r0.mY;

        i1 = -1;

        i0 = i0 + i1;

        $f0 = r3[i0];

        $r5 = virtualinvoke $r5.append($f0);

        $r6 = virtualinvoke $r5.toString();

        specialinvoke $r9.<init>($r6);

        throw $r9;

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<init>();

        $r5 = virtualinvoke $r8.append("The Path has a invalid length ");

        $r5 = virtualinvoke $r5.append($f0);

        $r6 = virtualinvoke $r5.toString();

        specialinvoke $r9.<init>($r6);

        goto label9;

     label9:
        throw $r9;
    }

    private void initQuad(float, float)
    {
        android.graphics.Path r1;
        androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat r0;
        float $f0, $f1;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        r1 = new android.graphics.Path;

        specialinvoke r1.<init>();

        virtualinvoke r1.moveTo(0.0F, 0.0F);

        virtualinvoke r1.quadTo($f0, $f1, 1.0F, 1.0F);

        specialinvoke r0.initPath(r1);

        return;
    }

    private void parseInterpolatorFromTypeArray(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser)
    {
        android.graphics.Path $r4;
        android.content.res.TypedArray $r1;
        androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat r0;
        android.view.InflateException r5;
        float $f0, $f1, $f2, $f3;
        java.lang.StringBuilder r6;
        java.lang.String $r3;
        org.xmlpull.v1.XmlPullParser $r2;
        boolean $z0, $z1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $z0 = androidx.core.content.res.TypedArrayUtils.hasAttribute($r2, "pathData");

        if $z0 == 0 goto label2;

        $r3 = androidx.core.content.res.TypedArrayUtils.getNamedString($r1, $r2, "pathData", 4);

        $r4 = androidx.core.graphics.PathParser.createPathFromPathData($r3);

        if $r4 == null goto label1;

        specialinvoke r0.initPath($r4);

        return;

     label1:
        r5 = new android.view.InflateException;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<init>();

        r6 = virtualinvoke r6.append("The path is null, which is created from ");

        r6 = virtualinvoke r6.append($r3);

        $r3 = virtualinvoke r6.toString();

        specialinvoke r5.<init>($r3);

        throw r5;

     label2:
        $z0 = androidx.core.content.res.TypedArrayUtils.hasAttribute($r2, "controlX1");

        if $z0 == 0 goto label6;

        $z0 = androidx.core.content.res.TypedArrayUtils.hasAttribute($r2, "controlY1");

        if $z0 == 0 goto label5;

        $f0 = androidx.core.content.res.TypedArrayUtils.getNamedFloat($r1, $r2, "controlX1", 0, 0.0F);

        $f1 = androidx.core.content.res.TypedArrayUtils.getNamedFloat($r1, $r2, "controlY1", 1, 0.0F);

        $z0 = androidx.core.content.res.TypedArrayUtils.hasAttribute($r2, "controlX2");

        $z1 = androidx.core.content.res.TypedArrayUtils.hasAttribute($r2, "controlY2");

        if $z0 != $z1 goto label4;

        if $z0 != 0 goto label3;

        specialinvoke r0.initQuad($f0, $f1);

        return;

     label3:
        $f2 = androidx.core.content.res.TypedArrayUtils.getNamedFloat($r1, $r2, "controlX2", 2, 0.0F);

        $f3 = androidx.core.content.res.TypedArrayUtils.getNamedFloat($r1, $r2, "controlY2", 3, 0.0F);

        specialinvoke r0.initCubic($f0, $f1, $f2, $f3);

        return;

     label4:
        r5 = new android.view.InflateException;

        specialinvoke r5.<init>("pathInterpolator requires both controlX2 and controlY2 for cubic Beziers.");

        throw r5;

     label5:
        r5 = new android.view.InflateException;

        specialinvoke r5.<init>("pathInterpolator requires the controlY1 attribute");

        throw r5;

     label6:
        r5 = new android.view.InflateException;

        specialinvoke r5.<init>("pathInterpolator requires the controlX1 attribute");

        throw r5;
    }

    public float getInterpolation(float)
    {
        float[] r1;
        androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat r0;
        byte b0;
        int i1, i2, i3, $i4;
        float $f0, f1, f2;

        r0 := @this;

        $f0 := @parameter0;

        b0 = $f0 cmpg 0.0F;

        i1 = (int) b0;

        if i1 > 0 goto label1;

        return 0.0F;

     label1:
        b0 = $f0 cmpl 1.0F;

        i1 = (int) b0;

        if i1 < 0 goto label2;

        return 1.0F;

     label2:
        i1 = 0;

        r1 = r0.mX;

        i2 = lengthof r1;

        i2 = i2 - 1;

     label3:
        i3 = i2 - i1;

        if i3 <= 1 goto label5;

        i3 = i1 + i2;

        i3 = i3 / 2;

        r1 = r0.mX;

        f1 = r1[i3];

        b0 = $f0 cmpg f1;

        $i4 = (int) b0;

        if $i4 >= 0 goto label4;

        i2 = i3;

        goto label3;

     label4:
        i1 = i3;

        goto label3;

     label5:
        r1 = r0.mX;

        f2 = r1[i2];

        f1 = r1[i1];

        f2 = f2 - f1;

        b0 = f2 cmpl 0.0F;

        if b0 != 0 goto label6;

        r1 = r0.mY;

        $f0 = r1[i1];

        return $f0;

     label6:
        $f0 = $f0 - f1;

        f1 = $f0 / f2;

        r1 = r0.mY;

        $f0 = r1[i1];

        f2 = r1[i2];

        f2 = f2 - $f0;

        f1 = f2 * f1;

        $f0 = f1 + $f0;

        return $f0;
    }
}
