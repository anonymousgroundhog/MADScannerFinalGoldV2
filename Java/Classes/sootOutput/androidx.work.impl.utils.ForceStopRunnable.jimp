public class androidx.work.impl.utils.ForceStopRunnable extends java.lang.Object implements java.lang.Runnable
{
    static final java.lang.String ACTION_FORCE_STOP_RESCHEDULE;
    private static final int ALARM_ID;
    private static final long BACKOFF_DURATION_MS;
    static final int MAX_ATTEMPTS;
    private static final java.lang.String TAG;
    private static final long TEN_YEARS;
    private final android.content.Context mContext;
    private int mRetryCount;
    private final androidx.work.impl.WorkManagerImpl mWorkManager;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        java.lang.String $r0;

        $r0 = androidx.work.Logger.tagWithPrefix("ForceStopRunnable");

        androidx.work.impl.utils.ForceStopRunnable.TAG = $r0;

        $r1 = java.util.concurrent.TimeUnit.DAYS;

        $l0 = virtualinvoke $r1.toMillis(3650L);

        androidx.work.impl.utils.ForceStopRunnable.TEN_YEARS = $l0;

        return;
    }

    public void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.utils.ForceStopRunnable r0;
        android.content.Context $r1;
        androidx.work.impl.WorkManagerImpl $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        specialinvoke r0.<init>();

        $r1 = virtualinvoke $r1.getApplicationContext();

        r0.mContext = $r1;

        r0.mWorkManager = $r2;

        r0.mRetryCount = 0;

        return;
    }

    static android.content.Intent getIntent(android.content.Context)
    {
        android.content.Context $r0;
        android.content.Intent r1;
        android.content.ComponentName $r2;

        $r0 := @parameter0;

        r1 = new android.content.Intent;

        specialinvoke r1.<init>();

        $r2 = new android.content.ComponentName;

        specialinvoke $r2.<init>($r0, class "Landroidx/work/impl/utils/ForceStopRunnable$BroadcastReceiver;");

        virtualinvoke r1.setComponent($r2);

        virtualinvoke r1.setAction("ACTION_FORCE_STOP_RESCHEDULE");

        return r1;
    }

    private static android.app.PendingIntent getPendingIntent(android.content.Context, int)
    {
        android.content.Context $r0;
        int $i0;
        android.content.Intent $r1;
        android.app.PendingIntent $r2;

        $r0 := @parameter0;

        $i0 := @parameter1;

        $r1 = androidx.work.impl.utils.ForceStopRunnable.getIntent($r0);

        $r2 = android.app.PendingIntent.getBroadcast($r0, -1, $r1, $i0);

        return $r2;
    }

    static void setAlarm(android.content.Context)
    {
        android.content.Context $r0;
        android.app.AlarmManager r2;
        long $l1, $l2;
        android.app.PendingIntent $r3;
        int i0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0;

        $r1 = virtualinvoke $r0.getSystemService("alarm");

        r2 = (android.app.AlarmManager) $r1;

        i0 = 134217728;

        $z0 = androidx.core.os.BuildCompat.isAtLeastS();

        if $z0 == 0 goto label1;

        i0 = 134217728 | 33554432;

     label1:
        $r3 = androidx.work.impl.utils.ForceStopRunnable.getPendingIntent($r0, i0);

        $l1 = java.lang.System.currentTimeMillis();

        $l2 = androidx.work.impl.utils.ForceStopRunnable.TEN_YEARS;

        $l1 = $l1 + $l2;

        if r2 == null goto label2;

        virtualinvoke r2.setExact(0, $l1, $r3);

     label2:
        return;
    }

    public boolean cleanUp()
    {
        java.lang.Throwable r13;
        android.content.Context r2;
        java.lang.String[] $r12;
        androidx.work.impl.model.WorkSpec r10;
        androidx.work.impl.utils.ForceStopRunnable r0;
        androidx.work.impl.WorkDatabase $r4;
        int i0;
        java.lang.String $r1;
        boolean z0, $z1, $z2;
        java.util.Iterator $r8;
        androidx.work.impl.model.WorkSpecDao $r5;
        java.util.List $r7;
        androidx.work.impl.model.WorkProgressDao $r6;
        androidx.work.WorkInfo$State $r11;
        androidx.work.impl.WorkManagerImpl r3;
        java.lang.Object $r9;

        r0 := @this;

        z0 = 0;

        i0 = android.os.Build$VERSION.SDK_INT;

        if i0 < 23 goto label01;

        r2 = r0.mContext;

        r3 = r0.mWorkManager;

        z0 = androidx.work.impl.background.systemjob.SystemJobScheduler.reconcileJobs(r2, r3);

     label01:
        r3 = r0.mWorkManager;

        $r4 = virtualinvoke r3.getWorkDatabase();

        $r5 = virtualinvoke $r4.workSpecDao();

        $r6 = virtualinvoke $r4.workProgressDao();

        virtualinvoke $r4.beginTransaction();

     label02:
        $r7 = interfaceinvoke $r5.getRunningWork();

     label03:
        if $r7 == null goto label06;

     label04:
        $z1 = interfaceinvoke $r7.isEmpty();

     label05:
        if $z1 != 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        if $z1 == 0 goto label13;

     label08:
        $r8 = interfaceinvoke $r7.iterator();

     label09:
        $z2 = interfaceinvoke $r8.hasNext();

     label10:
        if $z2 == 0 goto label13;

     label11:
        $r9 = interfaceinvoke $r8.next();

        r10 = (androidx.work.impl.model.WorkSpec) $r9;

        $r11 = androidx.work.WorkInfo$State.ENQUEUED;

        $r12 = newarray (java.lang.String)[1];

        $r1 = r10.id;

        $r12[0] = $r1;

        interfaceinvoke $r5.setState($r11, $r12);

        $r1 = r10.id;

        interfaceinvoke $r5.markWorkSpecScheduled($r1, -1L);

     label12:
        goto label09;

     label13:
        interfaceinvoke $r6.deleteAll();

        virtualinvoke $r4.setTransactionSuccessful();

     label14:
        virtualinvoke $r4.endTransaction();

        if $z1 != 0 goto label18;

        if z0 == 0 goto label15;

        return 1;

     label15:
        return 0;

     label16:
        r13 := @caughtexception;

        virtualinvoke $r4.endTransaction();

        goto label17;

     label17:
        throw r13;

     label18:
        return 1;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label08 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
    }

    public void forceStopRunnable()
    {
        androidx.work.impl.utils.PreferenceUtils $r5;
        androidx.work.impl.utils.ForceStopRunnable r0;
        androidx.work.Logger $r2;
        androidx.work.Configuration $r6;
        java.util.List $r8;
        androidx.work.impl.WorkDatabase $r7;
        java.lang.Throwable[] $r1;
        androidx.work.impl.WorkManagerImpl $r4;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this;

        $z0 = virtualinvoke r0.cleanUp();

        $z1 = virtualinvoke r0.shouldRescheduleWorkers();

        if $z1 == 0 goto label1;

        $r2 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        $r1 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug($r3, "Rescheduling Workers.", $r1);

        $r4 = r0.mWorkManager;

        virtualinvoke $r4.rescheduleEligibleWork();

        $r4 = r0.mWorkManager;

        $r5 = virtualinvoke $r4.getPreferenceUtils();

        virtualinvoke $r5.setNeedsReschedule(0);

        return;

     label1:
        $z1 = virtualinvoke r0.isForceStopped();

        if $z1 == 0 goto label2;

        $r2 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        $r1 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug($r3, "Application was force-stopped, rescheduling.", $r1);

        $r4 = r0.mWorkManager;

        virtualinvoke $r4.rescheduleEligibleWork();

        return;

     label2:
        if $z0 == 0 goto label3;

        $r2 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        $r1 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug($r3, "Found unfinished work, scheduling it.", $r1);

        $r4 = r0.mWorkManager;

        $r6 = virtualinvoke $r4.getConfiguration();

        $r4 = r0.mWorkManager;

        $r7 = virtualinvoke $r4.getWorkDatabase();

        $r4 = r0.mWorkManager;

        $r8 = virtualinvoke $r4.getSchedulers();

        androidx.work.impl.Schedulers.schedule($r6, $r7, $r8);

     label3:
        return;
    }

    public boolean isForceStopped()
    {
        android.content.Context r1;
        android.app.ActivityManager r4;
        android.app.PendingIntent $r2;
        java.lang.RuntimeException r7;
        android.app.ApplicationExitInfo r6;
        androidx.work.impl.utils.ForceStopRunnable r0;
        java.util.List $r5;
        androidx.work.Logger $r8;
        java.lang.Throwable[] r10;
        int i0, $i1;
        java.lang.Object $r3;
        java.lang.String r9;
        boolean $z0;

        r0 := @this;

        i0 = 536870912;

     label01:
        $z0 = androidx.core.os.BuildCompat.isAtLeastS();

     label02:
        if $z0 == 0 goto label03;

        i0 = 536870912 | 33554432;

     label03:
        r1 = r0.mContext;

     label04:
        $r2 = androidx.work.impl.utils.ForceStopRunnable.getPendingIntent(r1, i0);

     label05:
        i0 = android.os.Build$VERSION.SDK_INT;

        if i0 < 30 goto label21;

        if $r2 == null goto label07;

     label06:
        virtualinvoke $r2.cancel();

     label07:
        r1 = r0.mContext;

     label08:
        $r3 = virtualinvoke r1.getSystemService("activity");

     label09:
        r4 = (android.app.ActivityManager) $r3;

     label10:
        $r5 = virtualinvoke r4.getHistoricalProcessExitReasons(null, 0, 0);

     label11:
        if $r5 == null goto label24;

     label12:
        $z0 = interfaceinvoke $r5.isEmpty();

     label13:
        if $z0 != 0 goto label24;

        i0 = 0;

     label14:
        $i1 = interfaceinvoke $r5.size();

     label15:
        if i0 >= $i1 goto label24;

     label16:
        $r3 = interfaceinvoke $r5.get(i0);

     label17:
        r6 = (android.app.ApplicationExitInfo) $r3;

     label18:
        $i1 = virtualinvoke r6.getReason();

     label19:
        if $i1 != 10 goto label20;

        return 1;

     label20:
        i0 = i0 + 1;

        goto label14;

     label21:
        if $r2 != null goto label24;

        r1 = r0.mContext;

     label22:
        androidx.work.impl.utils.ForceStopRunnable.setAlarm(r1);

     label23:
        return 1;

     label24:
        return 0;

     label25:
        r7 := @caughtexception;

        goto label27;

     label26:
        r7 := @caughtexception;

     label27:
        $r8 = androidx.work.Logger.get();

        r9 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        r10 = newarray (java.lang.Throwable)[1];

        r10[0] = r7;

        virtualinvoke $r8.warning(r9, "Ignoring exception", r10);

        return 1;

        catch java.lang.SecurityException from label01 to label02 with label26;
        catch java.lang.SecurityException from label04 to label05 with label26;
        catch java.lang.SecurityException from label06 to label07 with label26;
        catch java.lang.SecurityException from label08 to label09 with label26;
        catch java.lang.SecurityException from label10 to label11 with label26;
        catch java.lang.SecurityException from label12 to label13 with label26;
        catch java.lang.SecurityException from label14 to label15 with label26;
        catch java.lang.SecurityException from label16 to label17 with label26;
        catch java.lang.SecurityException from label18 to label19 with label26;
        catch java.lang.SecurityException from label22 to label23 with label26;
        catch java.lang.IllegalArgumentException from label01 to label02 with label25;
        catch java.lang.IllegalArgumentException from label04 to label05 with label25;
        catch java.lang.IllegalArgumentException from label06 to label07 with label25;
        catch java.lang.IllegalArgumentException from label08 to label09 with label25;
        catch java.lang.IllegalArgumentException from label10 to label11 with label25;
        catch java.lang.IllegalArgumentException from label12 to label13 with label25;
        catch java.lang.IllegalArgumentException from label14 to label15 with label25;
        catch java.lang.IllegalArgumentException from label16 to label17 with label25;
        catch java.lang.IllegalArgumentException from label18 to label19 with label25;
        catch java.lang.IllegalArgumentException from label22 to label23 with label25;
    }

    public boolean multiProcessChecks()
    {
        android.content.Context r6;
        java.lang.Object[] $r7;
        androidx.work.impl.utils.ForceStopRunnable r0;
        androidx.work.Configuration $r2;
        androidx.work.Logger $r4;
        java.lang.Throwable[] $r5;
        java.lang.Boolean $r8;
        androidx.work.impl.WorkManagerImpl r1;
        java.lang.String $r3, $r9;
        boolean $z0;

        r0 := @this;

        r1 = r0.mWorkManager;

        $r2 = virtualinvoke r1.getConfiguration();

        $r3 = virtualinvoke $r2.getDefaultProcessName();

        $z0 = android.text.TextUtils.isEmpty($r3);

        if $z0 == 0 goto label1;

        $r4 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        $r5 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r3, "The default process name was not specified.", $r5);

        return 1;

     label1:
        r6 = r0.mContext;

        $z0 = androidx.work.impl.utils.ProcessUtils.isDefaultProcess(r6, $r2);

        $r4 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = java.lang.Boolean.valueOf($z0);

        $r7[0] = $r8;

        $r9 = java.lang.String.format("Is default app process = %s", $r7);

        $r5 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r3, $r9, $r5);

        return $z0;
    }

    public void run()
    {
        java.lang.Throwable r13;
        android.content.Context r4;
        java.lang.IllegalStateException r8;
        java.lang.Object[] $r2;
        long l1;
        androidx.work.impl.utils.ForceStopRunnable r0;
        androidx.work.Logger $r5;
        android.database.sqlite.SQLiteException r7;
        androidx.work.Configuration $r9;
        java.lang.Long $r11;
        int i0;
        java.lang.String $r1, $r12;
        boolean $z0;
        androidx.work.InitializationExceptionHandler $r10;
        java.lang.Throwable[] r6;
        androidx.work.impl.WorkManagerImpl r3;

        r0 := @this;

     label01:
        $z0 = virtualinvoke r0.multiProcessChecks();

     label02:
        if $z0 != 0 goto label03;

        r3 = r0.mWorkManager;

        virtualinvoke r3.onForceStopRunnableCompleted();

        return;

     label03:
        r4 = r0.mContext;

        androidx.work.impl.WorkDatabasePathHelper.migrateDatabase(r4);

        $r5 = androidx.work.Logger.get();

        $r1 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r5.debug($r1, "Performing cleanup operations.", r6);

     label04:
        virtualinvoke r0.forceStopRunnable();

     label05:
        goto label19;

     label06:
        r7 := @caughtexception;

        goto label12;

     label07:
        r7 := @caughtexception;

        goto label12;

     label08:
        r7 := @caughtexception;

        goto label12;

     label09:
        r7 := @caughtexception;

        goto label12;

     label10:
        r7 := @caughtexception;

        goto label12;

     label11:
        r7 := @caughtexception;

     label12:
        i0 = r0.mRetryCount;

     label13:
        i0 = i0 + 1;

     label14:
        r0.mRetryCount = i0;

     label15:
        if i0 < 3 goto label21;

     label16:
        $r5 = androidx.work.Logger.get();

        $r1 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        r6 = newarray (java.lang.Throwable)[1];

        r6[0] = r7;

        virtualinvoke $r5.error($r1, "The file system on the device is in a bad state. WorkManager cannot access the app\'s internal data store.", r6);

        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<init>("The file system on the device is in a bad state. WorkManager cannot access the app\'s internal data store.", r7);

        r3 = r0.mWorkManager;

        $r9 = virtualinvoke r3.getConfiguration();

        $r10 = virtualinvoke $r9.getExceptionHandler();

     label17:
        if $r10 == null goto label20;

     label18:
        $r5 = androidx.work.Logger.get();

        r6 = newarray (java.lang.Throwable)[1];

        r6[0] = r8;

        virtualinvoke $r5.debug($r1, "Routing exception to the specified exception handler", r6);

        interfaceinvoke $r10.handleException(r8);

     label19:
        r3 = r0.mWorkManager;

        virtualinvoke r3.onForceStopRunnableCompleted();

        return;

     label20:
        throw r8;

     label21:
        l1 = (long) i0;

        l1 = l1 * 300L;

     label22:
        $r5 = androidx.work.Logger.get();

        $r1 = androidx.work.impl.utils.ForceStopRunnable.TAG;

        $r2 = newarray (java.lang.Object)[1];

        $r11 = java.lang.Long.valueOf(l1);

        $r2[0] = $r11;

        $r12 = java.lang.String.format("Retrying after %s", $r2);

        r6 = newarray (java.lang.Throwable)[1];

        r6[0] = r7;

        virtualinvoke $r5.debug($r1, $r12, r6);

        i0 = r0.mRetryCount;

     label23:
        l1 = (long) i0;

        l1 = l1 * 300L;

     label24:
        virtualinvoke r0.sleep(l1);

     label25:
        goto label03;

     label26:
        r13 := @caughtexception;

        r3 = r0.mWorkManager;

        virtualinvoke r3.onForceStopRunnableCompleted();

        goto label27;

     label27:
        throw r13;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch android.database.sqlite.SQLiteCantOpenDatabaseException from label04 to label05 with label11;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label04 to label05 with label10;
        catch android.database.sqlite.SQLiteDatabaseLockedException from label04 to label05 with label09;
        catch android.database.sqlite.SQLiteTableLockedException from label04 to label05 with label08;
        catch android.database.sqlite.SQLiteConstraintException from label04 to label05 with label07;
        catch android.database.sqlite.SQLiteAccessPermException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label26;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    boolean shouldRescheduleWorkers()
    {
        androidx.work.impl.utils.ForceStopRunnable r0;
        androidx.work.impl.WorkManagerImpl $r1;
        androidx.work.impl.utils.PreferenceUtils $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mWorkManager;

        $r2 = virtualinvoke $r1.getPreferenceUtils();

        $z0 = virtualinvoke $r2.getNeedsReschedule();

        return $z0;
    }

    public void sleep(long)
    {
        androidx.work.impl.utils.ForceStopRunnable r0;
        long $l0;
        java.lang.InterruptedException $r1;

        r0 := @this;

        $l0 := @parameter0;

     label1:
        java.lang.Thread.sleep($l0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
