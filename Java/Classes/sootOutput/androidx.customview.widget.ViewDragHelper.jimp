public class androidx.customview.widget.ViewDragHelper extends java.lang.Object
{
    private static final int BASE_SETTLE_DURATION;
    public static final int DIRECTION_ALL;
    public static final int DIRECTION_HORIZONTAL;
    public static final int DIRECTION_VERTICAL;
    public static final int EDGE_ALL;
    public static final int EDGE_BOTTOM;
    public static final int EDGE_LEFT;
    public static final int EDGE_RIGHT;
    private static final int EDGE_SIZE;
    public static final int EDGE_TOP;
    public static final int INVALID_POINTER;
    private static final int MAX_SETTLE_DURATION;
    public static final int STATE_DRAGGING;
    public static final int STATE_IDLE;
    public static final int STATE_SETTLING;
    private static final java.lang.String TAG;
    private static final android.view.animation.Interpolator sInterpolator;
    private int mActivePointerId;
    private final androidx.customview.widget.ViewDragHelper$Callback mCallback;
    private android.view.View mCapturedView;
    private int mDragState;
    private int[] mEdgeDragsInProgress;
    private int[] mEdgeDragsLocked;
    private int mEdgeSize;
    private int[] mInitialEdgesTouched;
    private float[] mInitialMotionX;
    private float[] mInitialMotionY;
    private float[] mLastMotionX;
    private float[] mLastMotionY;
    private float mMaxVelocity;
    private float mMinVelocity;
    private final android.view.ViewGroup mParentView;
    private int mPointersDown;
    private boolean mReleaseInProgress;
    private android.widget.OverScroller mScroller;
    private final java.lang.Runnable mSetIdleRunnable;
    private int mTouchSlop;
    private int mTrackingEdges;
    private android.view.VelocityTracker mVelocityTracker;

    static void <clinit>()
    {
        androidx.customview.widget.ViewDragHelper$1 $r0;

        $r0 = new androidx.customview.widget.ViewDragHelper$1;

        specialinvoke $r0.<init>();

        androidx.customview.widget.ViewDragHelper.sInterpolator = $r0;

        return;
    }

    private void <init>(android.content.Context, android.view.ViewGroup, androidx.customview.widget.ViewDragHelper$Callback)
    {
        android.widget.OverScroller $r9;
        android.content.Context $r1;
        androidx.customview.widget.ViewDragHelper r0;
        android.view.animation.Interpolator $r7;
        java.lang.IllegalArgumentException $r10;
        android.view.ViewGroup $r2;
        android.util.DisplayMetrics $r6;
        android.view.ViewConfiguration $r4;
        int $i0;
        float f0;
        androidx.customview.widget.ViewDragHelper$2 $r8;
        androidx.customview.widget.ViewDragHelper$Callback $r3;
        android.content.res.Resources $r5;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        specialinvoke r0.<init>();

        r0.mActivePointerId = -1;

        $r8 = new androidx.customview.widget.ViewDragHelper$2;

        specialinvoke $r8.<init>(r0);

        r0.mSetIdleRunnable = $r8;

        if $r2 == null goto label2;

        if $r3 == null goto label1;

        r0.mParentView = $r2;

        r0.mCallback = $r3;

        $r4 = android.view.ViewConfiguration.get($r1);

        $r5 = virtualinvoke $r1.getResources();

        $r6 = virtualinvoke $r5.getDisplayMetrics();

        f0 = $r6.density;

        f0 = 20.0F * f0;

        f0 = f0 + 0.5F;

        $i0 = (int) f0;

        r0.mEdgeSize = $i0;

        $i0 = virtualinvoke $r4.getScaledTouchSlop();

        r0.mTouchSlop = $i0;

        $i0 = virtualinvoke $r4.getScaledMaximumFlingVelocity();

        f0 = (float) $i0;

        r0.mMaxVelocity = f0;

        $i0 = virtualinvoke $r4.getScaledMinimumFlingVelocity();

        f0 = (float) $i0;

        r0.mMinVelocity = f0;

        $r9 = new android.widget.OverScroller;

        $r7 = androidx.customview.widget.ViewDragHelper.sInterpolator;

        specialinvoke $r9.<init>($r1, $r7);

        r0.mScroller = $r9;

        return;

     label1:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<init>("Callback may not be null");

        throw $r10;

     label2:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<init>("Parent view may not be null");

        throw $r10;
    }

    private boolean checkNewEdgeDrag(float, float, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        byte $b3;
        int[] $r1;
        int $i0, $i1, $i2, $i4;
        float $f0, $f1, $f2;
        androidx.customview.widget.ViewDragHelper$Callback $r2;
        boolean $z0;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $i0 := @parameter2;

        $i1 := @parameter3;

        $f0 = java.lang.Math.abs($f0);

        $f1 = java.lang.Math.abs($f1);

        $r1 = r0.mInitialEdgesTouched;

        $i2 = $r1[$i0];

        $i2 = $i2 & $i1;

        if $i2 != $i1 goto label3;

        $i2 = r0.mTrackingEdges;

        $i2 = $i2 & $i1;

        if $i2 == 0 goto label3;

        $r1 = r0.mEdgeDragsLocked;

        $i2 = $r1[$i0];

        $i2 = $i2 & $i1;

        if $i2 == $i1 goto label3;

        $r1 = r0.mEdgeDragsInProgress;

        $i2 = $r1[$i0];

        $i2 = $i2 & $i1;

        if $i2 == $i1 goto label3;

        $i2 = r0.mTouchSlop;

        $f2 = (float) $i2;

        $b3 = $f0 cmpg $f2;

        $i4 = (int) $b3;

        if $i4 > 0 goto label1;

        $f2 = (float) $i2;

        $b3 = $f1 cmpg $f2;

        $i2 = (int) $b3;

        if $i2 > 0 goto label1;

        return 0;

     label1:
        $f1 = 0.5F * $f1;

        $b3 = $f0 cmpg $f1;

        $i2 = (int) $b3;

        if $i2 >= 0 goto label2;

        $r2 = r0.mCallback;

        $z0 = virtualinvoke $r2.onEdgeLock($i1);

        if $z0 == 0 goto label2;

        $r1 = r0.mEdgeDragsLocked;

        $i2 = $r1[$i0];

        $i1 = $i2 | $i1;

        $r1[$i0] = $i1;

        return 0;

     label2:
        $r1 = r0.mEdgeDragsInProgress;

        $i0 = $r1[$i0];

        $i0 = $i0 & $i1;

        if $i0 != 0 goto label3;

        $i0 = r0.mTouchSlop;

        $f1 = (float) $i0;

        $b3 = $f0 cmpl $f1;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean checkTouchSlop(android.view.View, float, float)
    {
        androidx.customview.widget.ViewDragHelper r0;
        byte $b1;
        int $i0;
        android.view.View $r1;
        float $f0, $f1;
        androidx.customview.widget.ViewDragHelper$Callback r2;
        boolean z0, z1;

        r0 := @this;

        $r1 := @parameter0;

        $f0 := @parameter1;

        $f1 := @parameter2;

        if $r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.mCallback;

        $i0 = virtualinvoke r2.getViewHorizontalDragRange($r1);

        if $i0 <= 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        r2 = r0.mCallback;

        $i0 = virtualinvoke r2.getViewVerticalDragRange($r1);

        if $i0 <= 0 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        if z0 == 0 goto label6;

        if z1 == 0 goto label6;

        $f0 = $f0 * $f0;

        $f1 = $f1 * $f1;

        $f0 = $f0 + $f1;

        $i0 = r0.mTouchSlop;

        $i0 = $i0 * $i0;

        $f1 = (float) $i0;

        $b1 = $f0 cmpl $f1;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label8;

        return 1;

     label6:
        if z0 == 0 goto label7;

        $f0 = java.lang.Math.abs($f0);

        $i0 = r0.mTouchSlop;

        $f1 = (float) $i0;

        $b1 = $f0 cmpl $f1;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label8;

        return 1;

     label7:
        if z1 == 0 goto label8;

        $f0 = java.lang.Math.abs($f1);

        $i0 = r0.mTouchSlop;

        $f1 = (float) $i0;

        $b1 = $f0 cmpl $f1;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label8;

        return 1;

     label8:
        return 0;
    }

    private float clampMag(float, float, float)
    {
        androidx.customview.widget.ViewDragHelper r0;
        byte $b0;
        int $i1;
        float $f0, $f1, $f2, $f3;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $f2 := @parameter2;

        $f3 = java.lang.Math.abs($f0);

        $b0 = $f3 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return 0.0F;

     label1:
        $b0 = $f3 cmpl $f2;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label3;

        $b0 = $f0 cmpl 0.0F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        return $f2;

     label2:
        $f0 = neg $f2;

     label3:
        return $f0;
    }

    private int clampMag(int, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $i2 := @parameter2;

        $i3 = java.lang.Math.abs($i0);

        if $i3 >= $i1 goto label1;

        return 0;

     label1:
        if $i3 <= $i2 goto label3;

        if $i0 <= 0 goto label2;

        return $i2;

     label2:
        $i0 = neg $i2;

     label3:
        return $i0;
    }

    private void clearMotionHistory()
    {
        androidx.customview.widget.ViewDragHelper r0;
        float[] $r1;
        int[] $r2;

        r0 := @this;

        $r1 = r0.mInitialMotionX;

        if $r1 != null goto label1;

        return;

     label1:
        java.util.Arrays.fill($r1, 0.0F);

        $r1 = r0.mInitialMotionY;

        java.util.Arrays.fill($r1, 0.0F);

        $r1 = r0.mLastMotionX;

        java.util.Arrays.fill($r1, 0.0F);

        $r1 = r0.mLastMotionY;

        java.util.Arrays.fill($r1, 0.0F);

        $r2 = r0.mInitialEdgesTouched;

        java.util.Arrays.fill($r2, 0);

        $r2 = r0.mEdgeDragsInProgress;

        java.util.Arrays.fill($r2, 0);

        $r2 = r0.mEdgeDragsLocked;

        java.util.Arrays.fill($r2, 0);

        r0.mPointersDown = 0;

        return;
    }

    private void clearMotionHistory(int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int[] $r2;
        int $i0, $i1;
        float[] $r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mInitialMotionX;

        if $r1 == null goto label2;

        $z0 = virtualinvoke r0.isPointerDown($i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.mInitialMotionX;

        $r1[$i0] = 0.0F;

        $r1 = r0.mInitialMotionY;

        $r1[$i0] = 0.0F;

        $r1 = r0.mLastMotionX;

        $r1[$i0] = 0.0F;

        $r1 = r0.mLastMotionY;

        $r1[$i0] = 0.0F;

        $r2 = r0.mInitialEdgesTouched;

        $r2[$i0] = 0;

        $r2 = r0.mEdgeDragsInProgress;

        $r2[$i0] = 0;

        $r2 = r0.mEdgeDragsLocked;

        $r2[$i0] = 0;

        $i1 = r0.mPointersDown;

        $i0 = 1 << $i0;

        $i0 = $i0 ^ -1;

        $i0 = $i1 & $i0;

        r0.mPointersDown = $i0;

     label2:
        return;
    }

    private int computeAxisDuration(int, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        android.view.ViewGroup r1;
        int $i0, $i1, i2, $i3, $i4, $i5;
        float f0, f1, $f2;

        r0 := @this;

        $i0 := @parameter0;

        $i3 := @parameter1;

        $i1 := @parameter2;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.mParentView;

        $i4 = virtualinvoke r1.getWidth();

        i2 = $i4 / 2;

        $i5 = java.lang.Math.abs($i0);

        f0 = (float) $i5;

        f1 = (float) $i4;

        f0 = f0 / f1;

        $f2 = java.lang.Math.min(1.0F, f0);

        f0 = (float) i2;

        f1 = (float) i2;

        $f2 = specialinvoke r0.distanceInfluenceForSnapDuration($f2);

        f1 = f1 * $f2;

        f0 = f0 + f1;

        $i3 = java.lang.Math.abs($i3);

        if $i3 <= 0 goto label2;

        f1 = (float) $i3;

        f0 = f0 / f1;

        f0 = java.lang.Math.abs(f0);

        f0 = f0 * 1000.0F;

        $i0 = java.lang.Math.round(f0);

        $i0 = $i0 * 4;

        goto label3;

     label2:
        $i0 = java.lang.Math.abs($i0);

        f0 = (float) $i0;

        f1 = (float) $i1;

        f0 = f0 / f1;

        f0 = 1.0F + f0;

        f0 = f0 * 256.0F;

        $i0 = (int) f0;

     label3:
        $i0 = java.lang.Math.min($i0, 600);

        return $i0;
    }

    private int computeSettleDuration(android.view.View, int, int, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9;
        android.view.View $r1;
        float f0, f1, f2;
        androidx.customview.widget.ViewDragHelper$Callback r2;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        $i2 := @parameter3;

        $i3 := @parameter4;

        f0 = r0.mMinVelocity;

        i4 = (int) f0;

        f0 = r0.mMaxVelocity;

        i5 = (int) f0;

        $i2 = specialinvoke r0.clampMag($i2, i4, i5);

        f0 = r0.mMinVelocity;

        i4 = (int) f0;

        f0 = r0.mMaxVelocity;

        i5 = (int) f0;

        $i3 = specialinvoke r0.clampMag($i3, i4, i5);

        $i6 = java.lang.Math.abs($i0);

        $i7 = java.lang.Math.abs($i1);

        $i8 = java.lang.Math.abs($i2);

        $i9 = java.lang.Math.abs($i3);

        i4 = $i8 + $i9;

        i5 = $i6 + $i7;

        if $i2 == 0 goto label1;

        f0 = (float) $i8;

        f1 = (float) i4;

        goto label2;

     label1:
        f0 = (float) $i6;

        f1 = (float) i5;

     label2:
        f0 = f0 / f1;

        if $i3 == 0 goto label3;

        f1 = (float) $i9;

        f2 = (float) i4;

        goto label4;

     label3:
        f1 = (float) $i7;

        f2 = (float) i5;

     label4:
        f1 = f1 / f2;

        r2 = r0.mCallback;

        i4 = virtualinvoke r2.getViewHorizontalDragRange($r1);

        $i0 = specialinvoke r0.computeAxisDuration($i0, $i2, i4);

        r2 = r0.mCallback;

        $i2 = virtualinvoke r2.getViewVerticalDragRange($r1);

        $i1 = specialinvoke r0.computeAxisDuration($i1, $i3, $i2);

        f2 = (float) $i0;

        f0 = f2 * f0;

        f2 = (float) $i1;

        f1 = f2 * f1;

        f0 = f0 + f1;

        $i0 = (int) f0;

        return $i0;
    }

    public static androidx.customview.widget.ViewDragHelper create(android.view.ViewGroup, float, androidx.customview.widget.ViewDragHelper$Callback)
    {
        androidx.customview.widget.ViewDragHelper $r2;
        int $i0;
        float $f0, $f1;
        androidx.customview.widget.ViewDragHelper$Callback $r1;
        android.view.ViewGroup $r0;

        $r0 := @parameter0;

        $f0 := @parameter1;

        $r1 := @parameter2;

        $r2 = androidx.customview.widget.ViewDragHelper.create($r0, $r1);

        $i0 = $r2.mTouchSlop;

        $f1 = (float) $i0;

        $f0 = 1.0F / $f0;

        $f0 = $f1 * $f0;

        $i0 = (int) $f0;

        $r2.mTouchSlop = $i0;

        return $r2;
    }

    public static androidx.customview.widget.ViewDragHelper create(android.view.ViewGroup, androidx.customview.widget.ViewDragHelper$Callback)
    {
        android.content.Context $r3;
        androidx.customview.widget.ViewDragHelper $r2;
        androidx.customview.widget.ViewDragHelper$Callback $r1;
        android.view.ViewGroup $r0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 = new androidx.customview.widget.ViewDragHelper;

        $r3 = virtualinvoke $r0.getContext();

        specialinvoke $r2.<init>($r3, $r0, $r1);

        return $r2;
    }

    private void dispatchViewReleased(float, float)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0;
        float $f0, $f1;
        android.view.View $r2;
        androidx.customview.widget.ViewDragHelper$Callback $r1;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        r0.mReleaseInProgress = 1;

        $r1 = r0.mCallback;

        $r2 = r0.mCapturedView;

        virtualinvoke $r1.onViewReleased($r2, $f0, $f1);

        r0.mReleaseInProgress = 0;

        $i0 = r0.mDragState;

        if $i0 != 1 goto label1;

        virtualinvoke r0.setDragState(0);

     label1:
        return;
    }

    private float distanceInfluenceForSnapDuration(float)
    {
        float $f0;
        androidx.customview.widget.ViewDragHelper r0;
        double $d0;

        r0 := @this;

        $f0 := @parameter0;

        $f0 = $f0 - 0.5F;

        $f0 = $f0 * 0.47123894F;

        $d0 = (double) $f0;

        $d0 = java.lang.Math.sin($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    private void dragTo(int, int, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7;
        android.view.View $r2;
        androidx.customview.widget.ViewDragHelper$Callback $r1;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $i2 := @parameter2;

        $i3 := @parameter3;

        i4 = $i0;

        i5 = $i1;

        $r2 = r0.mCapturedView;

        $i6 = virtualinvoke $r2.getLeft();

        $r2 = r0.mCapturedView;

        $i7 = virtualinvoke $r2.getTop();

        if $i2 == 0 goto label1;

        $r1 = r0.mCallback;

        $r2 = r0.mCapturedView;

        $i0 = virtualinvoke $r1.clampViewPositionHorizontal($r2, $i0, $i2);

        i4 = $i0;

        $r2 = r0.mCapturedView;

        $i0 = $i0 - $i6;

        androidx.core.view.ViewCompat.offsetLeftAndRight($r2, $i0);

        goto label1;

     label1:
        if $i3 == 0 goto label2;

        $r1 = r0.mCallback;

        $r2 = r0.mCapturedView;

        $i0 = virtualinvoke $r1.clampViewPositionVertical($r2, $i1, $i3);

        i5 = $i0;

        $r2 = r0.mCapturedView;

        $i0 = $i0 - $i7;

        androidx.core.view.ViewCompat.offsetTopAndBottom($r2, $i0);

        goto label2;

     label2:
        if $i2 != 0 goto label3;

        if $i3 == 0 goto label4;

     label3:
        $i0 = i4 - $i6;

        $i1 = i5 - $i7;

        $r1 = r0.mCallback;

        $r2 = r0.mCapturedView;

        virtualinvoke $r1.onViewPositionChanged($r2, i4, i5, $i0, $i1);

     label4:
        return;
    }

    private void ensureMotionHistorySizeForId(int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        float[] $r1, r2, r3, r4, r5;
        int[] r6, r7, r8, $r9;
        int $i0, i1;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mInitialMotionX;

        if $r1 == null goto label1;

        i1 = lengthof $r1;

        if i1 > $i0 goto label3;

     label1:
        i1 = $i0 + 1;

        r2 = newarray (float)[i1];

        i1 = $i0 + 1;

        r3 = newarray (float)[i1];

        i1 = $i0 + 1;

        r4 = newarray (float)[i1];

        i1 = $i0 + 1;

        r5 = newarray (float)[i1];

        i1 = $i0 + 1;

        r6 = newarray (int)[i1];

        i1 = $i0 + 1;

        r7 = newarray (int)[i1];

        $i0 = $i0 + 1;

        r8 = newarray (int)[$i0];

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        java.lang.System.arraycopy($r1, 0, r2, 0, $i0);

        $r1 = r0.mInitialMotionY;

        $i0 = lengthof $r1;

        java.lang.System.arraycopy($r1, 0, r3, 0, $i0);

        $r1 = r0.mLastMotionX;

        $i0 = lengthof $r1;

        java.lang.System.arraycopy($r1, 0, r4, 0, $i0);

        $r1 = r0.mLastMotionY;

        $i0 = lengthof $r1;

        java.lang.System.arraycopy($r1, 0, r5, 0, $i0);

        $r9 = r0.mInitialEdgesTouched;

        $i0 = lengthof $r9;

        java.lang.System.arraycopy($r9, 0, r6, 0, $i0);

        $r9 = r0.mEdgeDragsInProgress;

        $i0 = lengthof $r9;

        java.lang.System.arraycopy($r9, 0, r7, 0, $i0);

        $r9 = r0.mEdgeDragsLocked;

        $i0 = lengthof $r9;

        java.lang.System.arraycopy($r9, 0, r8, 0, $i0);

     label2:
        r0.mInitialMotionX = r2;

        r0.mInitialMotionY = r3;

        r0.mLastMotionX = r4;

        r0.mLastMotionY = r5;

        r0.mInitialEdgesTouched = r6;

        r0.mEdgeDragsInProgress = r7;

        r0.mEdgeDragsLocked = r8;

     label3:
        return;
    }

    private boolean forceSettleCapturedViewAt(int, int, int, int)
    {
        android.widget.OverScroller $r2;
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View r1;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $i2 := @parameter2;

        $i3 := @parameter3;

        r1 = r0.mCapturedView;

        $i4 = virtualinvoke r1.getLeft();

        r1 = r0.mCapturedView;

        $i5 = virtualinvoke r1.getTop();

        $i0 = $i0 - $i4;

        $i1 = $i1 - $i5;

        if $i0 != 0 goto label1;

        if $i1 != 0 goto label1;

        $r2 = r0.mScroller;

        virtualinvoke $r2.abortAnimation();

        virtualinvoke r0.setDragState(0);

        return 0;

     label1:
        r1 = r0.mCapturedView;

        $i2 = specialinvoke r0.computeSettleDuration(r1, $i0, $i1, $i2, $i3);

        $r2 = r0.mScroller;

        virtualinvoke $r2.startScroll($i4, $i5, $i0, $i1, $i2);

        virtualinvoke r0.setDragState(2);

        return 1;
    }

    private int getEdgesTouched(int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        byte b2;
        int $i0, $i1, $i3, $i4;
        android.view.ViewGroup $r1;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        b2 = 0;

        $r1 = r0.mParentView;

        $i3 = virtualinvoke $r1.getLeft();

        $i4 = r0.mEdgeSize;

        $i3 = $i3 + $i4;

        if $i0 >= $i3 goto label1;

        b2 = 1;

     label1:
        $r1 = r0.mParentView;

        $i3 = virtualinvoke $r1.getTop();

        $i4 = r0.mEdgeSize;

        $i3 = $i3 + $i4;

        if $i1 >= $i3 goto label2;

        b2 = b2 | 4;

     label2:
        $r1 = r0.mParentView;

        $i3 = virtualinvoke $r1.getRight();

        $i4 = r0.mEdgeSize;

        $i3 = $i3 - $i4;

        if $i0 <= $i3 goto label3;

        b2 = b2 | 2;

     label3:
        $r1 = r0.mParentView;

        $i0 = virtualinvoke $r1.getBottom();

        $i3 = r0.mEdgeSize;

        $i0 = $i0 - $i3;

        if $i1 <= $i0 goto label4;

        b2 = b2 | 8;

     label4:
        return b2;
    }

    private boolean isValidPointerForActionMove(int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $z0 = virtualinvoke r0.isPointerDown($i0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r1 = virtualinvoke $r1.append("Ignoring pointerId=");

        $r1 = virtualinvoke $r1.append($i0);

        $r1 = virtualinvoke $r1.append(" because ACTION_DOWN was not received ");

        $r1 = virtualinvoke $r1.append("for this pointer before ACTION_MOVE. It likely happened because ");

        $r1 = virtualinvoke $r1.append(" ViewDragHelper did not receive all the events in the event stream.");

        $r2 = virtualinvoke $r1.toString();

        android.util.Log.e("ViewDragHelper", $r2);

        return 0;

     label1:
        return 1;
    }

    private void releaseViewForPointerUp()
    {
        android.view.VelocityTracker r1;
        androidx.customview.widget.ViewDragHelper r0;
        int i0;
        float $f0, $f1, $f2, $f3;

        r0 := @this;

        r1 = r0.mVelocityTracker;

        $f1 = r0.mMaxVelocity;

        virtualinvoke r1.computeCurrentVelocity(1000, $f1);

        r1 = r0.mVelocityTracker;

        i0 = r0.mActivePointerId;

        $f1 = virtualinvoke r1.getXVelocity(i0);

        $f0 = r0.mMinVelocity;

        $f2 = r0.mMaxVelocity;

        $f1 = specialinvoke r0.clampMag($f1, $f0, $f2);

        r1 = r0.mVelocityTracker;

        i0 = r0.mActivePointerId;

        $f2 = virtualinvoke r1.getYVelocity(i0);

        $f3 = r0.mMinVelocity;

        $f0 = r0.mMaxVelocity;

        $f0 = specialinvoke r0.clampMag($f2, $f3, $f0);

        specialinvoke r0.dispatchViewReleased($f1, $f0);

        return;
    }

    private void reportNewEdgeDrags(float, float, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        byte b1;
        int[] $r1;
        int $i0, $i2;
        float $f0, $f1;
        androidx.customview.widget.ViewDragHelper$Callback $r2;
        boolean $z0;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $i0 := @parameter2;

        b1 = 0;

        $z0 = specialinvoke r0.checkNewEdgeDrag($f0, $f1, $i0, 1);

        if $z0 == 0 goto label1;

        b1 = 1;

     label1:
        $z0 = specialinvoke r0.checkNewEdgeDrag($f1, $f0, $i0, 4);

        if $z0 == 0 goto label2;

        b1 = b1 | 4;

     label2:
        $z0 = specialinvoke r0.checkNewEdgeDrag($f0, $f1, $i0, 2);

        if $z0 == 0 goto label3;

        b1 = b1 | 2;

     label3:
        $z0 = specialinvoke r0.checkNewEdgeDrag($f1, $f0, $i0, 8);

        if $z0 == 0 goto label4;

        b1 = b1 | 8;

     label4:
        if b1 == 0 goto label5;

        $r1 = r0.mEdgeDragsInProgress;

        $i2 = $r1[$i0];

        $i2 = $i2 | b1;

        $r1[$i0] = $i2;

        $r2 = r0.mCallback;

        virtualinvoke $r2.onEdgeDragStarted(b1, $i0);

     label5:
        return;
    }

    private void saveInitialMotion(float, float, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        float[] $r1, $r2;
        int[] $r3;
        int $i0, $i1, $i2;
        float $f0, $f1;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $i0 := @parameter2;

        specialinvoke r0.ensureMotionHistorySizeForId($i0);

        $r1 = r0.mInitialMotionX;

        $r2 = r0.mLastMotionX;

        $r2[$i0] = $f0;

        $r1[$i0] = $f0;

        $r1 = r0.mInitialMotionY;

        $r2 = r0.mLastMotionY;

        $r2[$i0] = $f1;

        $r1[$i0] = $f1;

        $r3 = r0.mInitialEdgesTouched;

        $i2 = (int) $f0;

        $i1 = (int) $f1;

        $i1 = specialinvoke r0.getEdgesTouched($i2, $i1);

        $r3[$i0] = $i1;

        $i1 = r0.mPointersDown;

        $i0 = 1 << $i0;

        $i0 = $i1 | $i0;

        r0.mPointersDown = $i0;

        return;
    }

    private void saveLastMotion(android.view.MotionEvent)
    {
        androidx.customview.widget.ViewDragHelper r0;
        float[] $r2;
        android.view.MotionEvent $r1;
        int $i0, i1, $i2;
        float $f0, $f1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 = virtualinvoke $r1.getPointerCount();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        $i2 = virtualinvoke $r1.getPointerId(i1);

        $z0 = specialinvoke r0.isValidPointerForActionMove($i2);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $f0 = virtualinvoke $r1.getX(i1);

        $f1 = virtualinvoke $r1.getY(i1);

        $r2 = r0.mLastMotionX;

        $r2[$i2] = $f0;

        $r2 = r0.mLastMotionY;

        $r2[$i2] = $f1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public void abort()
    {
        android.widget.OverScroller r2;
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1, i2, $i3;
        android.view.View $r1;
        androidx.customview.widget.ViewDragHelper$Callback $r3;

        r0 := @this;

        virtualinvoke r0.cancel();

        i2 = r0.mDragState;

        if i2 != 2 goto label1;

        r2 = r0.mScroller;

        $i0 = virtualinvoke r2.getCurrX();

        r2 = r0.mScroller;

        $i1 = virtualinvoke r2.getCurrY();

        r2 = r0.mScroller;

        virtualinvoke r2.abortAnimation();

        r2 = r0.mScroller;

        i2 = virtualinvoke r2.getCurrX();

        r2 = r0.mScroller;

        $i3 = virtualinvoke r2.getCurrY();

        $r3 = r0.mCallback;

        $r1 = r0.mCapturedView;

        $i0 = i2 - $i0;

        $i1 = $i3 - $i1;

        virtualinvoke $r3.onViewPositionChanged($r1, i2, $i3, $i0, $i1);

     label1:
        virtualinvoke r0.setDragState(0);

        return;
    }

    protected boolean canScroll(android.view.View, boolean, int, int, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.View $r1, $r3;
        boolean $z0, z1;
        android.view.ViewGroup r2;

        r0 := @this;

        $r1 := @parameter0;

        $z0 := @parameter1;

        $i0 := @parameter2;

        $i1 := @parameter3;

        $i2 := @parameter4;

        $i3 := @parameter5;

        z1 = $r1 instanceof android.view.ViewGroup;

        if z1 == 0 goto label3;

        r2 = (android.view.ViewGroup) $r1;

        $i6 = virtualinvoke $r1.getScrollX();

        $i7 = virtualinvoke $r1.getScrollY();

        $i8 = virtualinvoke r2.getChildCount();

        $i8 = $i8 + -1;

     label1:
        if $i8 < 0 goto label3;

        $r3 = virtualinvoke r2.getChildAt($i8);

        $i4 = $i2 + $i6;

        $i5 = virtualinvoke $r3.getLeft();

        if $i4 < $i5 goto label2;

        $i4 = $i2 + $i6;

        $i5 = virtualinvoke $r3.getRight();

        if $i4 >= $i5 goto label2;

        $i4 = $i3 + $i7;

        $i5 = virtualinvoke $r3.getTop();

        if $i4 < $i5 goto label2;

        $i4 = $i3 + $i7;

        $i5 = virtualinvoke $r3.getBottom();

        if $i4 >= $i5 goto label2;

        $i4 = $i2 + $i6;

        $i5 = virtualinvoke $r3.getLeft();

        $i4 = $i4 - $i5;

        $i5 = $i3 + $i7;

        $i9 = virtualinvoke $r3.getTop();

        $i5 = $i5 - $i9;

        z1 = virtualinvoke r0.canScroll($r3, 1, $i0, $i1, $i4, $i5);

        if z1 == 0 goto label2;

        return 1;

     label2:
        $i8 = $i8 + -1;

        goto label1;

     label3:
        if $z0 == 0 goto label5;

        $i0 = neg $i0;

        $z0 = virtualinvoke $r1.canScrollHorizontally($i0);

        if $z0 != 0 goto label4;

        $i0 = neg $i1;

        $z0 = virtualinvoke $r1.canScrollVertically($i0);

        if $z0 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    public void cancel()
    {
        android.view.VelocityTracker $r1;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        r0.mActivePointerId = -1;

        specialinvoke r0.clearMotionHistory();

        $r1 = r0.mVelocityTracker;

        if $r1 == null goto label1;

        virtualinvoke $r1.recycle();

        r0.mVelocityTracker = null;

     label1:
        return;
    }

    public void captureChildView(android.view.View, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        android.view.ViewParent $r2;
        java.lang.IllegalArgumentException $r5;
        android.view.ViewGroup $r3;
        int $i0;
        android.view.View $r1;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        androidx.customview.widget.ViewDragHelper$Callback $r4;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r2 = virtualinvoke $r1.getParent();

        $r3 = r0.mParentView;

        if $r2 != $r3 goto label1;

        r0.mCapturedView = $r1;

        r0.mActivePointerId = $i0;

        $r4 = r0.mCallback;

        virtualinvoke $r4.onViewCaptured($r1, $i0);

        virtualinvoke r0.setDragState(1);

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r6 = virtualinvoke $r6.append("captureChildView: parameter must be a descendant of the ViewDragHelper\'s tracked parent view (");

        $r3 = r0.mParentView;

        $r6 = virtualinvoke $r6.append($r3);

        $r6 = virtualinvoke $r6.append(")");

        $r7 = virtualinvoke $r6.toString();

        specialinvoke $r5.<init>($r7);

        throw $r5;
    }

    public boolean checkTouchSlop(int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, i1, i2;
        float[] r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        r1 = r0.mInitialMotionX;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $z0 = virtualinvoke r0.checkTouchSlop($i0, i2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean checkTouchSlop(int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        float[] r1;
        byte $b3;
        int $i0, $i1, i2;
        float f0, f1, $f2;
        boolean $z0, z1;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $z0 = virtualinvoke r0.isPointerDown($i1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i2 = $i0 & 1;

        if i2 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $i0 = $i0 & 2;

        if $i0 != 2 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        r1 = r0.mLastMotionX;

        f0 = r1[$i1];

        r1 = r0.mInitialMotionX;

        f1 = r1[$i1];

        f0 = f0 - f1;

        r1 = r0.mLastMotionY;

        f1 = r1[$i1];

        r1 = r0.mInitialMotionY;

        $f2 = r1[$i1];

        f1 = f1 - $f2;

        if $z0 == 0 goto label6;

        if z1 == 0 goto label6;

        f0 = f0 * f0;

        f1 = f1 * f1;

        f0 = f0 + f1;

        $i0 = r0.mTouchSlop;

        $i0 = $i0 * $i0;

        f1 = (float) $i0;

        $b3 = f0 cmpl f1;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label8;

        return 1;

     label6:
        if $z0 == 0 goto label7;

        f0 = java.lang.Math.abs(f0);

        $i0 = r0.mTouchSlop;

        f1 = (float) $i0;

        $b3 = f0 cmpl f1;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label8;

        return 1;

     label7:
        if z1 == 0 goto label8;

        f0 = java.lang.Math.abs(f1);

        $i0 = r0.mTouchSlop;

        f1 = (float) $i0;

        $b3 = f0 cmpl f1;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label8;

        return 1;

     label8:
        return 0;
    }

    public boolean continueSettling(boolean)
    {
        android.widget.OverScroller r1;
        androidx.customview.widget.ViewDragHelper r0;
        java.lang.Runnable $r5;
        android.view.ViewGroup $r4;
        int i0, i1, i2, $i3;
        android.view.View $r2;
        androidx.customview.widget.ViewDragHelper$Callback $r3;
        boolean $z0, $z1, z2;

        r0 := @this;

        $z0 := @parameter0;

        i2 = r0.mDragState;

        if i2 != 2 goto label7;

        r1 = r0.mScroller;

        $z1 = virtualinvoke r1.computeScrollOffset();

        z2 = $z1;

        r1 = r0.mScroller;

        $i3 = virtualinvoke r1.getCurrX();

        r1 = r0.mScroller;

        i2 = virtualinvoke r1.getCurrY();

        $r2 = r0.mCapturedView;

        i0 = virtualinvoke $r2.getLeft();

        i0 = $i3 - i0;

        $r2 = r0.mCapturedView;

        i1 = virtualinvoke $r2.getTop();

        i1 = i2 - i1;

        if i0 == 0 goto label1;

        $r2 = r0.mCapturedView;

        androidx.core.view.ViewCompat.offsetLeftAndRight($r2, i0);

     label1:
        if i1 == 0 goto label2;

        $r2 = r0.mCapturedView;

        androidx.core.view.ViewCompat.offsetTopAndBottom($r2, i1);

     label2:
        if i0 != 0 goto label3;

        if i1 == 0 goto label4;

     label3:
        $r3 = r0.mCallback;

        $r2 = r0.mCapturedView;

        virtualinvoke $r3.onViewPositionChanged($r2, $i3, i2, i0, i1);

     label4:
        if $z1 == 0 goto label5;

        r1 = r0.mScroller;

        i0 = virtualinvoke r1.getFinalX();

        if $i3 != i0 goto label5;

        r1 = r0.mScroller;

        $i3 = virtualinvoke r1.getFinalY();

        if i2 != $i3 goto label5;

        r1 = r0.mScroller;

        virtualinvoke r1.abortAnimation();

        z2 = 0;

     label5:
        if z2 != 0 goto label7;

        if $z0 == 0 goto label6;

        $r4 = r0.mParentView;

        $r5 = r0.mSetIdleRunnable;

        virtualinvoke $r4.post($r5);

        goto label7;

     label6:
        virtualinvoke r0.setDragState(0);

     label7:
        i2 = r0.mDragState;

        if i2 != 2 goto label8;

        return 1;

     label8:
        return 0;
    }

    public android.view.View findTopChildUnder(int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        android.view.ViewGroup r1;
        int $i0, $i1, $i2, $i3;
        android.view.View $r3;
        androidx.customview.widget.ViewDragHelper$Callback $r2;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        r1 = r0.mParentView;

        $i2 = virtualinvoke r1.getChildCount();

        $i2 = $i2 + -1;

     label1:
        if $i2 < 0 goto label3;

        r1 = r0.mParentView;

        $r2 = r0.mCallback;

        $i3 = virtualinvoke $r2.getOrderedChildIndex($i2);

        $r3 = virtualinvoke r1.getChildAt($i3);

        $i3 = virtualinvoke $r3.getLeft();

        if $i0 < $i3 goto label2;

        $i3 = virtualinvoke $r3.getRight();

        if $i0 >= $i3 goto label2;

        $i3 = virtualinvoke $r3.getTop();

        if $i1 < $i3 goto label2;

        $i3 = virtualinvoke $r3.getBottom();

        if $i1 >= $i3 goto label2;

        return $r3;

     label2:
        $i2 = $i2 + -1;

        goto label1;

     label3:
        return null;
    }

    public void flingCapturedView(int, int, int, int)
    {
        android.widget.OverScroller $r1;
        java.lang.IllegalStateException $r4;
        androidx.customview.widget.ViewDragHelper r0;
        android.view.VelocityTracker $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View $r2;
        float $f0;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $i2 := @parameter2;

        $i3 := @parameter3;

        $z0 = r0.mReleaseInProgress;

        if $z0 == 0 goto label1;

        $r1 = r0.mScroller;

        $r2 = r0.mCapturedView;

        $i4 = virtualinvoke $r2.getLeft();

        $r2 = r0.mCapturedView;

        $i5 = virtualinvoke $r2.getTop();

        $r3 = r0.mVelocityTracker;

        $i6 = r0.mActivePointerId;

        $f0 = virtualinvoke $r3.getXVelocity($i6);

        $i6 = (int) $f0;

        $r3 = r0.mVelocityTracker;

        $i7 = r0.mActivePointerId;

        $f0 = virtualinvoke $r3.getYVelocity($i7);

        $i7 = (int) $f0;

        virtualinvoke $r1.fling($i4, $i5, $i6, $i7, $i0, $i2, $i1, $i3);

        virtualinvoke r0.setDragState(2);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<init>("Cannot flingCapturedView outside of a call to Callback#onViewReleased");

        throw $r4;
    }

    public int getActivePointerId()
    {
        int i0;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        i0 = r0.mActivePointerId;

        return i0;
    }

    public android.view.View getCapturedView()
    {
        android.view.View r1;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        r1 = r0.mCapturedView;

        return r1;
    }

    public int getEdgeSize()
    {
        int i0;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        i0 = r0.mEdgeSize;

        return i0;
    }

    public float getMinVelocity()
    {
        float f0;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        f0 = r0.mMinVelocity;

        return f0;
    }

    public int getTouchSlop()
    {
        int i0;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        i0 = r0.mTouchSlop;

        return i0;
    }

    public int getViewDragState()
    {
        int i0;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        i0 = r0.mDragState;

        return i0;
    }

    public boolean isCapturedViewUnder(int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1;
        android.view.View $r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $r1 = r0.mCapturedView;

        $z0 = virtualinvoke r0.isViewUnder($r1, $i0, $i1);

        return $z0;
    }

    public boolean isEdgeTouched(int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int[] r1;
        int $i0, i1, i2;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        r1 = r0.mInitialEdgesTouched;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $z0 = virtualinvoke r0.isEdgeTouched($i0, i2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isEdgeTouched(int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $z0 = virtualinvoke r0.isPointerDown($i1);

        if $z0 == 0 goto label1;

        $r1 = r0.mInitialEdgesTouched;

        $i1 = $r1[$i1];

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isPointerDown(int)
    {
        int $i0, $i1;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 = r0.mPointersDown;

        $i0 = 1 << $i0;

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isViewUnder(android.view.View, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1, $i2;
        android.view.View $r1;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke $r1.getLeft();

        if $i0 < $i2 goto label2;

        $i2 = virtualinvoke $r1.getRight();

        if $i0 >= $i2 goto label2;

        $i0 = virtualinvoke $r1.getTop();

        if $i1 < $i0 goto label2;

        $i0 = virtualinvoke $r1.getBottom();

        if $i1 >= $i0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public void processTouchEvent(android.view.MotionEvent)
    {
        androidx.customview.widget.ViewDragHelper r0;
        float[] r7;
        android.view.VelocityTracker r2;
        int[] r5;
        android.view.MotionEvent $r1;
        int $i0, $i1, $i2, i3, $i4, i5, i6;
        android.view.View $r3, r4;
        boolean $z0;
        float $f0, $f1, f2, f3;
        androidx.customview.widget.ViewDragHelper$Callback r6;

        r0 := @this;

        $r1 := @parameter0;

        $i0 = virtualinvoke $r1.getActionMasked();

        $i1 = virtualinvoke $r1.getActionIndex();

        if $i0 != 0 goto label01;

        virtualinvoke r0.cancel();

     label01:
        r2 = r0.mVelocityTracker;

        if r2 != null goto label02;

        r2 = android.view.VelocityTracker.obtain();

        r0.mVelocityTracker = r2;

     label02:
        r2 = r0.mVelocityTracker;

        virtualinvoke r2.addMovement($r1);

        lookupswitch($i0)
        {
            case 0: goto label25;
            case 1: goto label23;
            case 2: goto label15;
            case 3: goto label13;
            case 4: goto label03;
            case 5: goto label10;
            case 6: goto label04;
            default: goto label03;
        };

     label03:
        return;

     label04:
        $i0 = virtualinvoke $r1.getPointerId($i1);

        $i1 = r0.mDragState;

        if $i1 != 1 goto label09;

        $i1 = r0.mActivePointerId;

        if $i0 != $i1 goto label09;

        $i1 = -1;

        $i2 = virtualinvoke $r1.getPointerCount();

        i3 = 0;

     label05:
        if i3 >= $i2 goto label08;

        $i4 = virtualinvoke $r1.getPointerId(i3);

        i5 = r0.mActivePointerId;

        if $i4 != i5 goto label06;

        goto label07;

     label06:
        $f0 = virtualinvoke $r1.getX(i3);

        $f1 = virtualinvoke $r1.getY(i3);

        i5 = (int) $f0;

        i6 = (int) $f1;

        $r3 = virtualinvoke r0.findTopChildUnder(i5, i6);

        r4 = r0.mCapturedView;

        if $r3 != r4 goto label07;

        $z0 = virtualinvoke r0.tryCaptureViewForDrag(r4, $i4);

        if $z0 == 0 goto label07;

        $i1 = r0.mActivePointerId;

        goto label08;

     label07:
        i3 = i3 + 1;

        goto label05;

     label08:
        if $i1 != -1 goto label09;

        specialinvoke r0.releaseViewForPointerUp();

     label09:
        specialinvoke r0.clearMotionHistory($i0);

        return;

     label10:
        $i0 = virtualinvoke $r1.getPointerId($i1);

        $f0 = virtualinvoke $r1.getX($i1);

        $f1 = virtualinvoke $r1.getY($i1);

        specialinvoke r0.saveInitialMotion($f0, $f1, $i0);

        $i1 = r0.mDragState;

        if $i1 != 0 goto label11;

        $i1 = (int) $f0;

        $i2 = (int) $f1;

        $r3 = virtualinvoke r0.findTopChildUnder($i1, $i2);

        virtualinvoke r0.tryCaptureViewForDrag($r3, $i0);

        r5 = r0.mInitialEdgesTouched;

        $i1 = r5[$i0];

        $i2 = r0.mTrackingEdges;

        i3 = $i1 & $i2;

        if i3 == 0 goto label12;

        r6 = r0.mCallback;

        $i1 = $i2 & $i1;

        virtualinvoke r6.onEdgeTouched($i1, $i0);

        goto label12;

     label11:
        $i1 = (int) $f0;

        $i2 = (int) $f1;

        $z0 = virtualinvoke r0.isCapturedViewUnder($i1, $i2);

        if $z0 == 0 goto label12;

        $r3 = r0.mCapturedView;

        virtualinvoke r0.tryCaptureViewForDrag($r3, $i0);

     label12:
        return;

     label13:
        $i0 = r0.mDragState;

        if $i0 != 1 goto label14;

        specialinvoke r0.dispatchViewReleased(0.0F, 0.0F);

     label14:
        virtualinvoke r0.cancel();

        return;

     label15:
        $i0 = r0.mDragState;

        if $i0 != 1 goto label17;

        $i0 = r0.mActivePointerId;

        $z0 = specialinvoke r0.isValidPointerForActionMove($i0);

        if $z0 != 0 goto label16;

        return;

     label16:
        $i0 = r0.mActivePointerId;

        $i0 = virtualinvoke $r1.findPointerIndex($i0);

        $f1 = virtualinvoke $r1.getX($i0);

        $f0 = virtualinvoke $r1.getY($i0);

        r7 = r0.mLastMotionX;

        $i1 = r0.mActivePointerId;

        f2 = r7[$i1];

        $f1 = $f1 - f2;

        $i0 = (int) $f1;

        r7 = r0.mLastMotionY;

        $f1 = r7[$i1];

        $f0 = $f0 - $f1;

        $i1 = (int) $f0;

        $r3 = r0.mCapturedView;

        $i2 = virtualinvoke $r3.getLeft();

        $i2 = $i2 + $i0;

        $r3 = r0.mCapturedView;

        i3 = virtualinvoke $r3.getTop();

        i3 = i3 + $i1;

        specialinvoke r0.dragTo($i2, i3, $i0, $i1);

        specialinvoke r0.saveLastMotion($r1);

        return;

     label17:
        $i0 = virtualinvoke $r1.getPointerCount();

        $i1 = 0;

     label18:
        if $i1 >= $i0 goto label22;

        $i2 = virtualinvoke $r1.getPointerId($i1);

        $z0 = specialinvoke r0.isValidPointerForActionMove($i2);

        if $z0 != 0 goto label19;

        goto label21;

     label19:
        $f0 = virtualinvoke $r1.getX($i1);

        $f1 = virtualinvoke $r1.getY($i1);

        r7 = r0.mInitialMotionX;

        f2 = r7[$i2];

        f2 = $f0 - f2;

        r7 = r0.mInitialMotionY;

        f3 = r7[$i2];

        f3 = $f1 - f3;

        specialinvoke r0.reportNewEdgeDrags(f2, f3, $i2);

        i3 = r0.mDragState;

        if i3 != 1 goto label20;

        goto label22;

     label20:
        i3 = (int) $f0;

        $i4 = (int) $f1;

        $r3 = virtualinvoke r0.findTopChildUnder(i3, $i4);

        $z0 = specialinvoke r0.checkTouchSlop($r3, f2, f3);

        if $z0 == 0 goto label21;

        $z0 = virtualinvoke r0.tryCaptureViewForDrag($r3, $i2);

        if $z0 == 0 goto label21;

        goto label22;

     label21:
        $i1 = $i1 + 1;

        goto label18;

     label22:
        specialinvoke r0.saveLastMotion($r1);

        return;

     label23:
        $i0 = r0.mDragState;

        if $i0 != 1 goto label24;

        specialinvoke r0.releaseViewForPointerUp();

     label24:
        virtualinvoke r0.cancel();

        return;

     label25:
        $f0 = virtualinvoke $r1.getX();

        $f1 = virtualinvoke $r1.getY();

        $i0 = virtualinvoke $r1.getPointerId(0);

        $i1 = (int) $f0;

        $i2 = (int) $f1;

        $r3 = virtualinvoke r0.findTopChildUnder($i1, $i2);

        specialinvoke r0.saveInitialMotion($f0, $f1, $i0);

        virtualinvoke r0.tryCaptureViewForDrag($r3, $i0);

        r5 = r0.mInitialEdgesTouched;

        $i1 = r5[$i0];

        $i2 = r0.mTrackingEdges;

        i3 = $i1 & $i2;

        if i3 == 0 goto label26;

        r6 = r0.mCallback;

        $i1 = $i2 & $i1;

        virtualinvoke r6.onEdgeTouched($i1, $i0);

     label26:
        return;
    }

    void setDragState(int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1;
        androidx.customview.widget.ViewDragHelper$Callback $r3;
        java.lang.Runnable $r1;
        android.view.ViewGroup $r2;

        r0 := @this;

        $i0 := @parameter0;

        $r2 = r0.mParentView;

        $r1 = r0.mSetIdleRunnable;

        virtualinvoke $r2.removeCallbacks($r1);

        $i1 = r0.mDragState;

        if $i1 == $i0 goto label1;

        r0.mDragState = $i0;

        $r3 = r0.mCallback;

        virtualinvoke $r3.onViewDragStateChanged($i0);

        $i0 = r0.mDragState;

        if $i0 != 0 goto label1;

        r0.mCapturedView = null;

     label1:
        return;
    }

    public void setEdgeTrackingEnabled(int)
    {
        int $i0;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        $i0 := @parameter0;

        r0.mTrackingEdges = $i0;

        return;
    }

    public void setMinVelocity(float)
    {
        float $f0;
        androidx.customview.widget.ViewDragHelper r0;

        r0 := @this;

        $f0 := @parameter0;

        r0.mMinVelocity = $f0;

        return;
    }

    public boolean settleCapturedViewAt(int, int)
    {
        java.lang.IllegalStateException $r2;
        androidx.customview.widget.ViewDragHelper r0;
        android.view.VelocityTracker $r1;
        int $i0, $i1, $i2, $i3;
        float $f0;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $z0 = r0.mReleaseInProgress;

        if $z0 == 0 goto label1;

        $r1 = r0.mVelocityTracker;

        $i3 = r0.mActivePointerId;

        $f0 = virtualinvoke $r1.getXVelocity($i3);

        $i3 = (int) $f0;

        $r1 = r0.mVelocityTracker;

        $i2 = r0.mActivePointerId;

        $f0 = virtualinvoke $r1.getYVelocity($i2);

        $i2 = (int) $f0;

        $z0 = specialinvoke r0.forceSettleCapturedViewAt($i0, $i1, $i3, $i2);

        return $z0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<init>("Cannot settleCapturedViewAt outside of a call to Callback#onViewReleased");

        throw $r2;
    }

    public boolean shouldInterceptTouchEvent(android.view.MotionEvent)
    {
        androidx.customview.widget.ViewDragHelper r0;
        float[] r7;
        android.view.VelocityTracker r2;
        int[] r3;
        android.view.MotionEvent $r1;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, $i8;
        android.view.View $r5, r6;
        boolean $z0;
        float $f0, $f1, f2, f3;
        androidx.customview.widget.ViewDragHelper$Callback r4;

        r0 := @this;

        $r1 := @parameter0;

        $i0 = virtualinvoke $r1.getActionMasked();

        $i1 = virtualinvoke $r1.getActionIndex();

        if $i0 != 0 goto label01;

        virtualinvoke r0.cancel();

     label01:
        r2 = r0.mVelocityTracker;

        if r2 != null goto label02;

        r2 = android.view.VelocityTracker.obtain();

        r0.mVelocityTracker = r2;

     label02:
        r2 = r0.mVelocityTracker;

        virtualinvoke r2.addMovement($r1);

        lookupswitch($i0)
        {
            case 0: goto label22;
            case 1: goto label21;
            case 2: goto label09;
            case 3: goto label21;
            case 4: goto label03;
            case 5: goto label05;
            case 6: goto label04;
            default: goto label03;
        };

     label03:
        goto label24;

     label04:
        $i0 = virtualinvoke $r1.getPointerId($i1);

        specialinvoke r0.clearMotionHistory($i0);

        goto label24;

     label05:
        $i0 = virtualinvoke $r1.getPointerId($i1);

        $f0 = virtualinvoke $r1.getX($i1);

        $f1 = virtualinvoke $r1.getY($i1);

        specialinvoke r0.saveInitialMotion($f0, $f1, $i0);

        $i1 = r0.mDragState;

        if $i1 != 0 goto label06;

        r3 = r0.mInitialEdgesTouched;

        $i1 = r3[$i0];

        i2 = r0.mTrackingEdges;

        i3 = $i1 & i2;

        if i3 == 0 goto label08;

        r4 = r0.mCallback;

        $i1 = i2 & $i1;

        virtualinvoke r4.onEdgeTouched($i1, $i0);

        goto label08;

     label06:
        if $i1 != 2 goto label08;

        $i1 = (int) $f0;

        i2 = (int) $f1;

        $r5 = virtualinvoke r0.findTopChildUnder($i1, i2);

        r6 = r0.mCapturedView;

        if $r5 != r6 goto label07;

        virtualinvoke r0.tryCaptureViewForDrag($r5, $i0);

     label07:
        goto label24;

     label08:
        goto label24;

     label09:
        r7 = r0.mInitialMotionX;

        if r7 == null goto label20;

        r7 = r0.mInitialMotionY;

        if r7 != null goto label10;

        goto label24;

     label10:
        i3 = virtualinvoke $r1.getPointerCount();

        $i0 = 0;

     label11:
        if $i0 >= i3 goto label19;

        $i1 = virtualinvoke $r1.getPointerId($i0);

        $z0 = specialinvoke r0.isValidPointerForActionMove($i1);

        if $z0 != 0 goto label12;

        goto label18;

     label12:
        $f0 = virtualinvoke $r1.getX($i0);

        $f1 = virtualinvoke $r1.getY($i0);

        r7 = r0.mInitialMotionX;

        f2 = r7[$i1];

        f2 = $f0 - f2;

        r7 = r0.mInitialMotionY;

        f3 = r7[$i1];

        f3 = $f1 - f3;

        i2 = (int) $f0;

        i4 = (int) $f1;

        $r5 = virtualinvoke r0.findTopChildUnder(i2, i4);

        if $r5 == null goto label13;

        $z0 = specialinvoke r0.checkTouchSlop($r5, f2, f3);

        if $z0 == 0 goto label13;

        $z0 = 1;

        goto label14;

     label13:
        $z0 = 0;

     label14:
        if $z0 == 0 goto label16;

        i2 = virtualinvoke $r5.getLeft();

        i4 = (int) f2;

        i4 = i4 + i2;

        r4 = r0.mCallback;

        i5 = (int) f2;

        i4 = virtualinvoke r4.clampViewPositionHorizontal($r5, i4, i5);

        i5 = virtualinvoke $r5.getTop();

        i6 = (int) f3;

        i6 = i6 + i5;

        r4 = r0.mCallback;

        i7 = (int) f3;

        i6 = virtualinvoke r4.clampViewPositionVertical($r5, i6, i7);

        r4 = r0.mCallback;

        i7 = virtualinvoke r4.getViewHorizontalDragRange($r5);

        r4 = r0.mCallback;

        $i8 = virtualinvoke r4.getViewVerticalDragRange($r5);

        if i7 == 0 goto label15;

        if i7 <= 0 goto label16;

        if i4 != i2 goto label16;

     label15:
        if $i8 == 0 goto label19;

        if $i8 <= 0 goto label16;

        if i6 != i5 goto label16;

        goto label19;

     label16:
        specialinvoke r0.reportNewEdgeDrags(f2, f3, $i1);

        i2 = r0.mDragState;

        if i2 != 1 goto label17;

        goto label19;

     label17:
        if $z0 == 0 goto label18;

        $z0 = virtualinvoke r0.tryCaptureViewForDrag($r5, $i1);

        if $z0 == 0 goto label18;

        goto label19;

     label18:
        $i0 = $i0 + 1;

        goto label11;

     label19:
        specialinvoke r0.saveLastMotion($r1);

        goto label24;

     label20:
        goto label24;

     label21:
        virtualinvoke r0.cancel();

        goto label24;

     label22:
        $f0 = virtualinvoke $r1.getX();

        $f1 = virtualinvoke $r1.getY();

        $i0 = virtualinvoke $r1.getPointerId(0);

        specialinvoke r0.saveInitialMotion($f0, $f1, $i0);

        $i1 = (int) $f0;

        i2 = (int) $f1;

        $r5 = virtualinvoke r0.findTopChildUnder($i1, i2);

        r6 = r0.mCapturedView;

        if $r5 != r6 goto label23;

        $i1 = r0.mDragState;

        if $i1 != 2 goto label23;

        virtualinvoke r0.tryCaptureViewForDrag($r5, $i0);

     label23:
        r3 = r0.mInitialEdgesTouched;

        $i1 = r3[$i0];

        i2 = r0.mTrackingEdges;

        i3 = $i1 & i2;

        if i3 == 0 goto label24;

        r4 = r0.mCallback;

        $i1 = i2 & $i1;

        virtualinvoke r4.onEdgeTouched($i1, $i0);

     label24:
        $i0 = r0.mDragState;

        if $i0 != 1 goto label25;

        return 1;

     label25:
        return 0;
    }

    public boolean smoothSlideViewTo(android.view.View, int, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1;
        android.view.View $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        r0.mCapturedView = $r1;

        r0.mActivePointerId = -1;

        $z0 = specialinvoke r0.forceSettleCapturedViewAt($i0, $i1, 0, 0);

        if $z0 != 0 goto label1;

        $i0 = r0.mDragState;

        if $i0 != 0 goto label1;

        $r1 = r0.mCapturedView;

        if $r1 == null goto label1;

        r0.mCapturedView = null;

     label1:
        return $z0;
    }

    boolean tryCaptureViewForDrag(android.view.View, int)
    {
        androidx.customview.widget.ViewDragHelper r0;
        int $i0, $i1;
        android.view.View $r1, $r2;
        androidx.customview.widget.ViewDragHelper$Callback $r3;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r2 = r0.mCapturedView;

        if $r1 != $r2 goto label1;

        $i1 = r0.mActivePointerId;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $r3 = r0.mCallback;

        $z0 = virtualinvoke $r3.tryCaptureView($r1, $i0);

        if $z0 == 0 goto label2;

        r0.mActivePointerId = $i0;

        virtualinvoke r0.captureChildView($r1, $i0);

        return 1;

     label2:
        return 0;
    }
}
