public class androidx.work.impl.WorkContinuationImpl extends androidx.work.WorkContinuation
{
    private static final java.lang.String TAG;
    private final java.util.List mAllIds;
    private boolean mEnqueued;
    private final androidx.work.ExistingWorkPolicy mExistingWorkPolicy;
    private final java.util.List mIds;
    private final java.lang.String mName;
    private androidx.work.Operation mOperation;
    private final java.util.List mParents;
    private final java.util.List mWork;
    private final androidx.work.impl.WorkManagerImpl mWorkManagerImpl;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = androidx.work.Logger.tagWithPrefix("WorkContinuationImpl");

        androidx.work.impl.WorkContinuationImpl.TAG = $r0;

        return;
    }

    public void <init>(androidx.work.impl.WorkManagerImpl, java.lang.String, androidx.work.ExistingWorkPolicy, java.util.List)
    {
        java.util.List r4;
        androidx.work.ExistingWorkPolicy $r3;
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.String $r2;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        r4 := @parameter3;

        specialinvoke r0.<init>($r1, $r2, $r3, r4, null);

        return;
    }

    public void <init>(androidx.work.impl.WorkManagerImpl, java.lang.String, androidx.work.ExistingWorkPolicy, java.util.List, java.util.List)
    {
        java.util.Iterator $r7;
        androidx.work.WorkRequest r11;
        androidx.work.impl.WorkContinuationImpl r0, r9;
        java.util.ArrayList r6;
        java.util.List r4, r5, $r10;
        androidx.work.ExistingWorkPolicy $r3;
        int $i0, $i1;
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.Object $r8;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        r4 := @parameter3;

        r5 := @parameter4;

        specialinvoke r0.<init>();

        r0.mWorkManagerImpl = $r1;

        r0.mName = $r2;

        r0.mExistingWorkPolicy = $r3;

        r0.mWork = r4;

        r0.mParents = r5;

        r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r4.size();

        specialinvoke r6.<init>($i0);

        r0.mIds = r6;

        r6 = new java.util.ArrayList;

        specialinvoke r6.<init>();

        r0.mAllIds = r6;

        if r5 == null goto label2;

        $r7 = interfaceinvoke r5.iterator();

     label1:
        $z0 = interfaceinvoke $r7.hasNext();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.next();

        r9 = (androidx.work.impl.WorkContinuationImpl) $r8;

        $r10 = r0.mAllIds;

        r5 = r9.mAllIds;

        interfaceinvoke $r10.addAll(r5);

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $i1 = interfaceinvoke r4.size();

        if $i0 >= $i1 goto label4;

        $r8 = interfaceinvoke r4.get($i0);

        r11 = (androidx.work.WorkRequest) $r8;

        $r2 = virtualinvoke r11.getStringId();

        r5 = r0.mIds;

        interfaceinvoke r5.add($r2);

        r5 = r0.mAllIds;

        interfaceinvoke r5.add($r2);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }

    public void <init>(androidx.work.impl.WorkManagerImpl, java.util.List)
    {
        java.util.List r2;
        androidx.work.ExistingWorkPolicy $r3;
        androidx.work.impl.WorkManagerImpl $r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        $r3 = androidx.work.ExistingWorkPolicy.KEEP;

        specialinvoke r0.<init>($r1, null, $r3, r2, null);

        return;
    }

    private static boolean hasCycles(androidx.work.impl.WorkContinuationImpl, java.util.Set)
    {
        java.util.Iterator $r4;
        java.util.Set r1, $r3;
        androidx.work.impl.WorkContinuationImpl $r0, r7;
        java.util.List $r2;
        java.lang.Object $r5;
        java.lang.String r6;
        boolean $z0;

        $r0 := @parameter0;

        r1 := @parameter1;

        $r2 = virtualinvoke $r0.getIds();

        interfaceinvoke r1.addAll($r2);

        $r3 = androidx.work.impl.WorkContinuationImpl.prerequisitesFor($r0);

        $r4 = interfaceinvoke r1.iterator();

     label1:
        $z0 = interfaceinvoke $r4.hasNext();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.next();

        r6 = (java.lang.String) $r5;

        $z0 = interfaceinvoke $r3.contains(r6);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        $r2 = virtualinvoke $r0.getParents();

        if $r2 == null goto label4;

        $z0 = interfaceinvoke $r2.isEmpty();

        if $z0 != 0 goto label4;

        $r4 = interfaceinvoke $r2.iterator();

     label3:
        $z0 = interfaceinvoke $r4.hasNext();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.next();

        r7 = (androidx.work.impl.WorkContinuationImpl) $r5;

        $z0 = androidx.work.impl.WorkContinuationImpl.hasCycles(r7, r1);

        if $z0 == 0 goto label3;

        return 1;

     label4:
        $r2 = virtualinvoke $r0.getIds();

        interfaceinvoke r1.removeAll($r2);

        return 0;
    }

    public static java.util.Set prerequisitesFor(androidx.work.impl.WorkContinuationImpl)
    {
        java.util.HashSet r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        androidx.work.impl.WorkContinuationImpl $r0;
        boolean $z0;

        $r0 := @parameter0;

        r1 = new java.util.HashSet;

        specialinvoke r1.<init>();

        $r2 = virtualinvoke $r0.getParents();

        if $r2 == null goto label2;

        $z0 = interfaceinvoke $r2.isEmpty();

        if $z0 != 0 goto label2;

        $r3 = interfaceinvoke $r2.iterator();

     label1:
        $z0 = interfaceinvoke $r3.hasNext();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.next();

        $r0 = (androidx.work.impl.WorkContinuationImpl) $r4;

        $r2 = virtualinvoke $r0.getIds();

        interfaceinvoke r1.addAll($r2);

        goto label1;

     label2:
        return r1;
    }

    protected androidx.work.WorkContinuation combineInternal(java.util.List)
    {
        androidx.work.WorkRequest $r4;
        java.util.Iterator $r7;
        androidx.work.OneTimeWorkRequest$Builder r3;
        androidx.work.OneTimeWorkRequest r5;
        androidx.work.WorkContinuation r9;
        androidx.work.impl.WorkContinuationImpl r0, $r10;
        java.util.ArrayList r6;
        java.util.List r1;
        androidx.work.ExistingWorkPolicy $r2;
        int $i0;
        java.lang.Object $r8;
        androidx.work.impl.WorkManagerImpl $r11;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        r3 = new androidx.work.OneTimeWorkRequest$Builder;

        specialinvoke r3.<init>(class "Landroidx/work/impl/workers/CombineContinuationsWorker;");

        r3 = virtualinvoke r3.setInputMerger(class "Landroidx/work/ArrayCreatingInputMerger;");

        $r4 = virtualinvoke r3.build();

        r5 = (androidx.work.OneTimeWorkRequest) $r4;

        r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.size();

        specialinvoke r6.<init>($i0);

        $r7 = interfaceinvoke r1.iterator();

     label1:
        $z0 = interfaceinvoke $r7.hasNext();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.next();

        r9 = (androidx.work.WorkContinuation) $r8;

        $r10 = (androidx.work.impl.WorkContinuationImpl) r9;

        interfaceinvoke r6.add($r10);

        goto label1;

     label2:
        $r10 = new androidx.work.impl.WorkContinuationImpl;

        $r11 = r0.mWorkManagerImpl;

        $r2 = androidx.work.ExistingWorkPolicy.KEEP;

        r1 = java.util.Collections.singletonList(r5);

        specialinvoke $r10.<init>($r11, null, $r2, r1, r6);

        return $r10;
    }

    public androidx.work.Operation enqueue()
    {
        androidx.work.impl.utils.EnqueueRunnable r1;
        java.lang.Object[] $r7;
        androidx.work.Operation $r4;
        androidx.work.impl.WorkContinuationImpl r0;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r3;
        androidx.work.Logger $r5;
        java.util.List $r8;
        java.lang.Throwable[] $r10;
        androidx.work.impl.WorkManagerImpl $r2;
        java.lang.String $r6, $r9;
        boolean z0;

        r0 := @this;

        z0 = r0.mEnqueued;

        if z0 != 0 goto label1;

        r1 = new androidx.work.impl.utils.EnqueueRunnable;

        specialinvoke r1.<init>(r0);

        $r2 = r0.mWorkManagerImpl;

        $r3 = virtualinvoke $r2.getWorkTaskExecutor();

        interfaceinvoke $r3.executeOnBackgroundThread(r1);

        $r4 = virtualinvoke r1.getOperation();

        r0.mOperation = $r4;

        goto label2;

     label1:
        $r5 = androidx.work.Logger.get();

        $r6 = androidx.work.impl.WorkContinuationImpl.TAG;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = r0.mIds;

        $r9 = android.text.TextUtils.join(", ", $r8);

        $r7[0] = $r9;

        $r9 = java.lang.String.format("Already enqueued work ids (%s)", $r7);

        $r10 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r5.warning($r6, $r9, $r10);

     label2:
        $r4 = r0.mOperation;

        return $r4;
    }

    public java.util.List getAllIds()
    {
        java.util.List r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mAllIds;

        return r1;
    }

    public androidx.work.ExistingWorkPolicy getExistingWorkPolicy()
    {
        androidx.work.ExistingWorkPolicy r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mExistingWorkPolicy;

        return r1;
    }

    public java.util.List getIds()
    {
        java.util.List r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mIds;

        return r1;
    }

    public java.lang.String getName()
    {
        java.lang.String r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mName;

        return r1;
    }

    public java.util.List getParents()
    {
        java.util.List r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mParents;

        return r1;
    }

    public java.util.List getWork()
    {
        java.util.List r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mWork;

        return r1;
    }

    public com.google.common.util.concurrent.ListenableFuture getWorkInfos()
    {
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r4;
        java.util.List $r2;
        com.google.common.util.concurrent.ListenableFuture $r5;
        androidx.work.impl.utils.StatusRunnable $r3;
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mWorkManagerImpl;

        $r2 = r0.mAllIds;

        $r3 = androidx.work.impl.utils.StatusRunnable.forStringIds(r1, $r2);

        r1 = r0.mWorkManagerImpl;

        $r4 = virtualinvoke r1.getWorkTaskExecutor();

        interfaceinvoke $r4.executeOnBackgroundThread($r3);

        $r5 = virtualinvoke $r3.getFuture();

        return $r5;
    }

    public androidx.lifecycle.LiveData getWorkInfosLiveData()
    {
        androidx.lifecycle.LiveData $r2;
        java.util.List $r1;
        androidx.work.impl.WorkManagerImpl $r3;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        $r3 = r0.mWorkManagerImpl;

        $r1 = r0.mAllIds;

        $r2 = virtualinvoke $r3.getWorkInfosById($r1);

        return $r2;
    }

    public androidx.work.impl.WorkManagerImpl getWorkManagerImpl()
    {
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r1 = r0.mWorkManagerImpl;

        return r1;
    }

    public boolean hasCycles()
    {
        java.util.HashSet $r1;
        androidx.work.impl.WorkContinuationImpl r0;
        boolean $z0;

        r0 := @this;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<init>();

        $z0 = androidx.work.impl.WorkContinuationImpl.hasCycles(r0, $r1);

        return $z0;
    }

    public boolean isEnqueued()
    {
        androidx.work.impl.WorkContinuationImpl r0;
        boolean z0;

        r0 := @this;

        z0 = r0.mEnqueued;

        return z0;
    }

    public void markEnqueued()
    {
        androidx.work.impl.WorkContinuationImpl r0;

        r0 := @this;

        r0.mEnqueued = 1;

        return;
    }

    public androidx.work.WorkContinuation then(java.util.List)
    {
        androidx.work.impl.WorkContinuationImpl r0, $r5;
        java.util.List r1, $r6;
        androidx.work.ExistingWorkPolicy $r4;
        androidx.work.impl.WorkManagerImpl $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $z0 = interfaceinvoke r1.isEmpty();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r5 = new androidx.work.impl.WorkContinuationImpl;

        $r2 = r0.mWorkManagerImpl;

        $r3 = r0.mName;

        $r4 = androidx.work.ExistingWorkPolicy.KEEP;

        $r6 = java.util.Collections.singletonList(r0);

        specialinvoke $r5.<init>($r2, $r3, $r4, r1, $r6);

        return $r5;
    }
}
