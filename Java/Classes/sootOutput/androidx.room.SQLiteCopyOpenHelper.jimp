class androidx.room.SQLiteCopyOpenHelper extends java.lang.Object implements androidx.sqlite.db.SupportSQLiteOpenHelper
{
    private final android.content.Context mContext;
    private final java.lang.String mCopyFromAssetPath;
    private final java.io.File mCopyFromFile;
    private androidx.room.DatabaseConfiguration mDatabaseConfiguration;
    private final int mDatabaseVersion;
    private final androidx.sqlite.db.SupportSQLiteOpenHelper mDelegate;
    private boolean mVerified;

    void <init>(android.content.Context, java.lang.String, java.io.File, int, androidx.sqlite.db.SupportSQLiteOpenHelper)
    {
        android.content.Context $r1;
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r4;
        int $i0;
        java.lang.String $r2;
        java.io.File $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $i0 := @parameter3;

        $r4 := @parameter4;

        specialinvoke r0.<init>();

        r0.mContext = $r1;

        r0.mCopyFromAssetPath = $r2;

        r0.mCopyFromFile = $r3;

        r0.mDatabaseVersion = $i0;

        r0.mDelegate = $r4;

        return;
    }

    private void copyDatabaseFile(java.io.File) throws java.io.IOException
    {
        android.content.Context r3;
        java.lang.IllegalStateException r14;
        androidx.room.SQLiteCopyOpenHelper r0;
        android.content.res.AssetManager $r4;
        java.lang.String r2;
        boolean $z0;
        java.nio.channels.ReadableByteChannel $r6;
        java.io.FileOutputStream r10;
        java.io.IOException $r12;
        java.io.FileInputStream r8;
        java.io.File $r1, r7, $r11;
        java.lang.StringBuilder $r13;
        java.nio.channels.FileChannel $r9;
        java.io.InputStream $r5;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mCopyFromAssetPath;

        if r2 == null goto label1;

        r3 = r0.mContext;

        $r4 = virtualinvoke r3.getAssets();

        r2 = r0.mCopyFromAssetPath;

        $r5 = virtualinvoke $r4.open(r2);

        $r6 = java.nio.channels.Channels.newChannel($r5);

        goto label2;

     label1:
        r7 = r0.mCopyFromFile;

        if r7 == null goto label6;

        r8 = new java.io.FileInputStream;

        r7 = r0.mCopyFromFile;

        specialinvoke r8.<init>(r7);

        $r6 = virtualinvoke r8.getChannel();

     label2:
        r3 = r0.mContext;

        r7 = virtualinvoke r3.getCacheDir();

        r7 = java.io.File.createTempFile("room-copy-helper", ".tmp", r7);

        virtualinvoke r7.deleteOnExit();

        r10 = new java.io.FileOutputStream;

        specialinvoke r10.<init>(r7);

        $r9 = virtualinvoke r10.getChannel();

        androidx.room.util.FileUtil.copy($r6, $r9);

        $r11 = virtualinvoke $r1.getParentFile();

        if $r11 == null goto label4;

        $z0 = virtualinvoke $r11.exists();

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r11.mkdirs();

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<init>();

        $r13 = virtualinvoke $r13.append("Failed to create directories for ");

        r2 = virtualinvoke $r1.getAbsolutePath();

        $r13 = virtualinvoke $r13.append(r2);

        r2 = virtualinvoke $r13.toString();

        specialinvoke $r12.<init>(r2);

        throw $r12;

     label4:
        $z0 = virtualinvoke r7.renameTo($r1);

        if $z0 == 0 goto label5;

        return;

     label5:
        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<init>();

        $r13 = virtualinvoke $r13.append("Failed to move intermediate file (");

        r2 = virtualinvoke r7.getAbsolutePath();

        $r13 = virtualinvoke $r13.append(r2);

        $r13 = virtualinvoke $r13.append(") to destination (");

        r2 = virtualinvoke $r1.getAbsolutePath();

        $r13 = virtualinvoke $r13.append(r2);

        $r13 = virtualinvoke $r13.append(").");

        r2 = virtualinvoke $r13.toString();

        specialinvoke $r12.<init>(r2);

        throw $r12;

     label6:
        r14 = new java.lang.IllegalStateException;

        specialinvoke r14.<init>("copyFromAssetPath and copyFromFile == null!");

        throw r14;
    }

    private void verifyDatabaseFile()
    {
        java.lang.Throwable r12;
        android.content.Context r4;
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.room.DatabaseConfiguration $r2;
        int $i0, i1;
        androidx.room.util.CopyLock r1;
        java.lang.String $r3;
        boolean z0;
        java.io.IOException r7, r9, r11;
        java.lang.RuntimeException r8;
        java.io.File $r5, $r6;
        java.lang.StringBuilder $r10;

        r0 := @this;

        $r3 = virtualinvoke r0.getDatabaseName();

        r4 = r0.mContext;

        $r5 = virtualinvoke r4.getDatabasePath($r3);

        $r2 = r0.mDatabaseConfiguration;

        if $r2 == null goto label02;

        z0 = $r2.multiInstanceInvalidation;

        if z0 == 0 goto label01;

        goto label02;

     label01:
        z0 = 0;

        goto label03;

     label02:
        z0 = 1;

     label03:
        r1 = new androidx.room.util.CopyLock;

        r4 = r0.mContext;

        $r6 = virtualinvoke r4.getFilesDir();

        specialinvoke r1.<init>($r3, $r6, z0);

     label04:
        virtualinvoke r1.lock();

        z0 = virtualinvoke $r5.exists();

     label05:
        if z0 != 0 goto label10;

     label06:
        specialinvoke r0.copyDatabaseFile($r5);

     label07:
        virtualinvoke r1.unlock();

        return;

     label08:
        r7 := @caughtexception;

     label09:
        r8 = new java.lang.RuntimeException;

        specialinvoke r8.<init>("Unable to copy database file.", r7);

        throw r8;

     label10:
        $r2 = r0.mDatabaseConfiguration;

     label11:
        if $r2 != null goto label12;

        virtualinvoke r1.unlock();

        return;

     label12:
        $i0 = androidx.room.util.DBUtil.readVersion($r5);

     label13:
        i1 = r0.mDatabaseVersion;

     label14:
        if $i0 != i1 goto label15;

        virtualinvoke r1.unlock();

        return;

     label15:
        $r2 = r0.mDatabaseConfiguration;

        z0 = virtualinvoke $r2.isMigrationRequired($i0, i1);

     label16:
        if z0 == 0 goto label17;

        virtualinvoke r1.unlock();

        return;

     label17:
        r4 = r0.mContext;

        z0 = virtualinvoke r4.deleteDatabase($r3);

     label18:
        if z0 == 0 goto label24;

     label19:
        specialinvoke r0.copyDatabaseFile($r5);

     label20:
        goto label25;

     label21:
        r9 := @caughtexception;

     label22:
        android.util.Log.w("ROOM", "Unable to copy database file.", r9);

     label23:
        goto label25;

     label24:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<init>();

        $r10 = virtualinvoke $r10.append("Failed to delete database file (");

        $r10 = virtualinvoke $r10.append($r3);

        $r10 = virtualinvoke $r10.append(") for a copy destructive migration.");

        $r3 = virtualinvoke $r10.toString();

        android.util.Log.w("ROOM", $r3);

     label25:
        virtualinvoke r1.unlock();

        return;

     label26:
        r11 := @caughtexception;

     label27:
        android.util.Log.w("ROOM", "Unable to read database version.", r11);

     label28:
        virtualinvoke r1.unlock();

        return;

     label29:
        r12 := @caughtexception;

        virtualinvoke r1.unlock();

        throw r12;

        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label09 to label11 with label29;
        catch java.io.IOException from label12 to label13 with label26;
        catch java.lang.Throwable from label12 to label13 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label17 to label18 with label29;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
    }

    public void close()
    {
        java.lang.Throwable $r2;
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this;

        entermonitor r0;

     label1:
        $r1 = r0.mDelegate;

        interfaceinvoke $r1.close();

        r0.mVerified = 0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getDatabaseName()
    {
        java.lang.String $r1;
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;

        r0 := @this;

        $r2 = r0.mDelegate;

        $r1 = interfaceinvoke $r2.getDatabaseName();

        return $r1;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()
    {
        java.lang.Throwable $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        boolean $z0;

        r0 := @this;

        entermonitor r0;

     label1:
        $z0 = r0.mVerified;

        if $z0 != 0 goto label2;

        specialinvoke r0.verifyDatabaseFile();

        r0.mVerified = 1;

     label2:
        $r2 = r0.mDelegate;

        $r1 = interfaceinvoke $r2.getReadableDatabase();

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()
    {
        java.lang.Throwable $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        androidx.room.SQLiteCopyOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        boolean $z0;

        r0 := @this;

        entermonitor r0;

     label1:
        $z0 = r0.mVerified;

        if $z0 != 0 goto label2;

        specialinvoke r0.verifyDatabaseFile();

        r0.mVerified = 1;

     label2:
        $r2 = r0.mDelegate;

        $r1 = interfaceinvoke $r2.getWritableDatabase();

     label3:
        exitmonitor r0;

        return $r1;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    void setDatabaseConfiguration(androidx.room.DatabaseConfiguration)
    {
        androidx.room.DatabaseConfiguration $r1;
        androidx.room.SQLiteCopyOpenHelper r0;

        r0 := @this;

        $r1 := @parameter0;

        r0.mDatabaseConfiguration = $r1;

        return;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        androidx.room.SQLiteCopyOpenHelper r0;
        boolean $z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDelegate;

        interfaceinvoke $r1.setWriteAheadLoggingEnabled($z0);

        return;
    }
}
