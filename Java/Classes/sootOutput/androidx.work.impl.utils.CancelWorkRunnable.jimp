public abstract class androidx.work.impl.utils.CancelWorkRunnable extends java.lang.Object implements java.lang.Runnable
{
    private final androidx.work.impl.OperationImpl mOperation;

    public void <init>()
    {
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.OperationImpl $r1;

        r0 := @this;

        specialinvoke r0.<init>();

        $r1 = new androidx.work.impl.OperationImpl;

        specialinvoke $r1.<init>();

        r0.mOperation = $r1;

        return;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forAll(androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.utils.CancelWorkRunnable$4 $r1;
        androidx.work.impl.WorkManagerImpl $r0;

        $r0 := @parameter0;

        $r1 = new androidx.work.impl.utils.CancelWorkRunnable$4;

        specialinvoke $r1.<init>($r0);

        return $r1;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forId(java.util.UUID, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.WorkManagerImpl $r1;
        androidx.work.impl.utils.CancelWorkRunnable$1 $r2;
        java.util.UUID $r0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 = new androidx.work.impl.utils.CancelWorkRunnable$1;

        specialinvoke $r2.<init>($r1, $r0);

        return $r2;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forName(java.lang.String, androidx.work.impl.WorkManagerImpl, boolean)
    {
        androidx.work.impl.utils.CancelWorkRunnable$3 $r2;
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $z0 := @parameter2;

        $r2 = new androidx.work.impl.utils.CancelWorkRunnable$3;

        specialinvoke $r2.<init>($r1, $r0, $z0);

        return $r2;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forTag(java.lang.String, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.String $r0;
        androidx.work.impl.utils.CancelWorkRunnable$2 $r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 = new androidx.work.impl.utils.CancelWorkRunnable$2;

        specialinvoke $r2.<init>($r1, $r0);

        return $r2;
    }

    private void iterativelyCancelWorkAndDependents(androidx.work.impl.WorkDatabase, java.lang.String)
    {
        androidx.work.impl.model.WorkSpecDao $r4;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        java.lang.String[] $r9;
        androidx.work.impl.model.DependencyDao $r5;
        java.util.List $r10;
        androidx.work.impl.WorkDatabase $r1;
        androidx.work.WorkInfo$State $r7, $r8;
        java.lang.Object $r6;
        java.lang.String $r2;
        java.util.LinkedList r3;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r4 = virtualinvoke $r1.workSpecDao();

        $r5 = virtualinvoke $r1.dependencyDao();

        r3 = new java.util.LinkedList;

        specialinvoke r3.<init>();

        virtualinvoke r3.add($r2);

     label1:
        $z0 = virtualinvoke r3.isEmpty();

        if $z0 != 0 goto label3;

        $r6 = virtualinvoke r3.remove();

        $r2 = (java.lang.String) $r6;

        $r7 = interfaceinvoke $r4.getState($r2);

        $r8 = androidx.work.WorkInfo$State.SUCCEEDED;

        if $r7 == $r8 goto label2;

        $r8 = androidx.work.WorkInfo$State.FAILED;

        if $r7 == $r8 goto label2;

        $r7 = androidx.work.WorkInfo$State.CANCELLED;

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = $r2;

        interfaceinvoke $r4.setState($r7, $r9);

     label2:
        $r10 = interfaceinvoke $r5.getDependentWorkIds($r2);

        virtualinvoke r3.addAll($r10);

        goto label1;

     label3:
        return;
    }

    void cancel(androidx.work.impl.WorkManagerImpl, java.lang.String)
    {
        java.util.Iterator $r6;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.Processor $r4;
        java.util.List $r5;
        androidx.work.impl.WorkDatabase $r3;
        androidx.work.impl.Scheduler r8;
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.Object $r7;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = virtualinvoke $r1.getWorkDatabase();

        specialinvoke r0.iterativelyCancelWorkAndDependents($r3, $r2);

        $r4 = virtualinvoke $r1.getProcessor();

        virtualinvoke $r4.stopAndCancelWork($r2);

        $r5 = virtualinvoke $r1.getSchedulers();

        $r6 = interfaceinvoke $r5.iterator();

     label1:
        $z0 = interfaceinvoke $r6.hasNext();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.next();

        r8 = (androidx.work.impl.Scheduler) $r7;

        interfaceinvoke r8.cancel($r2);

        goto label1;

     label2:
        return;
    }

    public androidx.work.Operation getOperation()
    {
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.OperationImpl r1;

        r0 := @this;

        r1 = r0.mOperation;

        return r1;
    }

    void reschedulePendingWorkers(androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.Configuration $r2;
        java.util.List $r4;
        androidx.work.impl.WorkDatabase $r3;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.WorkManagerImpl $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = virtualinvoke $r1.getConfiguration();

        $r3 = virtualinvoke $r1.getWorkDatabase();

        $r4 = virtualinvoke $r1.getSchedulers();

        androidx.work.impl.Schedulers.schedule($r2, $r3, $r4);

        return;
    }

    public void run()
    {
        java.lang.Throwable r4;
        androidx.work.Operation$State$SUCCESS $r3;
        androidx.work.Operation$State$FAILURE $r1;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.OperationImpl r2;

        r0 := @this;

     label1:
        virtualinvoke r0.runInternal();

        r2 = r0.mOperation;

        $r3 = androidx.work.Operation.SUCCESS;

        virtualinvoke r2.setState($r3);

     label2:
        return;

     label3:
        r4 := @caughtexception;

        r2 = r0.mOperation;

        $r1 = new androidx.work.Operation$State$FAILURE;

        specialinvoke $r1.<init>(r4);

        virtualinvoke r2.setState($r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    abstract void runInternal();
}
