final class androidx.concurrent.futures.AbstractResolvableFuture$SetFuture extends java.lang.Object implements java.lang.Runnable
{
    final com.google.common.util.concurrent.ListenableFuture future;
    final androidx.concurrent.futures.AbstractResolvableFuture owner;

    void <init>(androidx.concurrent.futures.AbstractResolvableFuture, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.concurrent.futures.AbstractResolvableFuture$SetFuture r0;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.concurrent.futures.AbstractResolvableFuture r1;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        specialinvoke r0.<init>();

        r0.owner = r1;

        r0.future = r2;

        return;
    }

    public void run()
    {
        androidx.concurrent.futures.AbstractResolvableFuture$SetFuture r0;
        androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper $r4;
        com.google.common.util.concurrent.ListenableFuture r3;
        androidx.concurrent.futures.AbstractResolvableFuture $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.owner;

        r2 = $r1.value;

        if r2 == r0 goto label1;

        return;

     label1:
        r3 = r0.future;

        r2 = androidx.concurrent.futures.AbstractResolvableFuture.getFutureValue(r3);

        $r4 = androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER;

        $r1 = r0.owner;

        $z0 = virtualinvoke $r4.casValue($r1, r0, r2);

        if $z0 == 0 goto label2;

        $r1 = r0.owner;

        androidx.concurrent.futures.AbstractResolvableFuture.complete($r1);

     label2:
        return;
    }
}
