abstract class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl extends java.lang.Object implements androidx.core.text.TextDirectionHeuristicCompat
{
    private final androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm mAlgorithm;

    void <init>(androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm)
    {
        androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm $r1;
        androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mAlgorithm = $r1;

        return;
    }

    private boolean doCheck(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r1;
        androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl r0;
        int $i0, $i1;
        androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        $r2 = r0.mAlgorithm;

        $i0 = interfaceinvoke $r2.checkRtl($r1, $i0, $i1);

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $z0 = virtualinvoke r0.defaultIsRtl();

        return $z0;

     label2:
        return 0;

     label3:
        return 1;
    }

    protected abstract boolean defaultIsRtl();

    public boolean isRtl(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r1;
        java.lang.IllegalArgumentException $r3;
        androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl r0;
        int $i0, $i1, $i2;
        androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        if $r1 == null goto label2;

        if $i0 < 0 goto label2;

        if $i1 < 0 goto label2;

        $i2 = interfaceinvoke $r1.length();

        $i2 = $i2 - $i1;

        if $i2 < $i0 goto label2;

        $r2 = r0.mAlgorithm;

        if $r2 != null goto label1;

        $z0 = virtualinvoke r0.defaultIsRtl();

        return $z0;

     label1:
        $z0 = specialinvoke r0.doCheck($r1, $i0, $i1);

        return $z0;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<init>();

        throw $r3;
    }

    public boolean isRtl(char[], int, int)
    {
        java.nio.CharBuffer $r2;
        androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl r0;
        int $i0, $i1;
        char[] $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        $r2 = java.nio.CharBuffer.wrap($r1);

        $z0 = virtualinvoke r0.isRtl($r2, $i0, $i1);

        return $z0;
    }
}
