abstract class androidx.loader.content.ModernAsyncTask extends java.lang.Object
{
    private static final int CORE_POOL_SIZE;
    private static final int KEEP_ALIVE;
    private static final java.lang.String LOG_TAG;
    private static final int MAXIMUM_POOL_SIZE;
    private static final int MESSAGE_POST_PROGRESS;
    private static final int MESSAGE_POST_RESULT;
    public static final java.util.concurrent.Executor THREAD_POOL_EXECUTOR;
    private static volatile java.util.concurrent.Executor sDefaultExecutor;
    private static androidx.loader.content.ModernAsyncTask$InternalHandler sHandler;
    private static final java.util.concurrent.BlockingQueue sPoolWorkQueue;
    private static final java.util.concurrent.ThreadFactory sThreadFactory;
    final java.util.concurrent.atomic.AtomicBoolean mCancelled;
    private final java.util.concurrent.FutureTask mFuture;
    private volatile androidx.loader.content.ModernAsyncTask$Status mStatus;
    final java.util.concurrent.atomic.AtomicBoolean mTaskInvoked;
    private final androidx.loader.content.ModernAsyncTask$WorkerRunnable mWorker;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.ThreadPoolExecutor $r3;
        java.util.concurrent.LinkedBlockingQueue $r1;
        androidx.loader.content.ModernAsyncTask$1 $r2;

        $r2 = new androidx.loader.content.ModernAsyncTask$1;

        specialinvoke $r2.<init>();

        androidx.loader.content.ModernAsyncTask.sThreadFactory = $r2;

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<init>(10);

        androidx.loader.content.ModernAsyncTask.sPoolWorkQueue = $r1;

        $r3 = new java.util.concurrent.ThreadPoolExecutor;

        $r0 = java.util.concurrent.TimeUnit.SECONDS;

        specialinvoke $r3.<init>(5, 128, 1L, $r0, $r1, $r2);

        androidx.loader.content.ModernAsyncTask.THREAD_POOL_EXECUTOR = $r3;

        androidx.loader.content.ModernAsyncTask.sDefaultExecutor = $r3;

        return;
    }

    void <init>()
    {
        androidx.loader.content.ModernAsyncTask$Status $r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        androidx.loader.content.ModernAsyncTask r0;
        androidx.loader.content.ModernAsyncTask$2 $r4;
        androidx.loader.content.ModernAsyncTask$3 $r1;

        r0 := @this;

        specialinvoke r0.<init>();

        $r2 = androidx.loader.content.ModernAsyncTask$Status.PENDING;

        r0.mStatus = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<init>();

        r0.mCancelled = $r3;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<init>();

        r0.mTaskInvoked = $r3;

        $r4 = new androidx.loader.content.ModernAsyncTask$2;

        specialinvoke $r4.<init>(r0);

        r0.mWorker = $r4;

        $r1 = new androidx.loader.content.ModernAsyncTask$3;

        specialinvoke $r1.<init>(r0, $r4);

        r0.mFuture = $r1;

        return;
    }

    public static void execute(java.lang.Runnable)
    {
        java.lang.Runnable $r0;
        java.util.concurrent.Executor $r1;

        $r0 := @parameter0;

        $r1 = androidx.loader.content.ModernAsyncTask.sDefaultExecutor;

        interfaceinvoke $r1.execute($r0);

        return;
    }

    private static android.os.Handler getHandler()
    {
        androidx.loader.content.ModernAsyncTask$InternalHandler $r0;
        java.lang.Throwable $r1;

        entermonitor class "Landroidx/loader/content/ModernAsyncTask;";

     label1:
        $r0 = androidx.loader.content.ModernAsyncTask.sHandler;

        if $r0 != null goto label2;

        $r0 = new androidx.loader.content.ModernAsyncTask$InternalHandler;

        specialinvoke $r0.<init>();

        androidx.loader.content.ModernAsyncTask.sHandler = $r0;

     label2:
        $r0 = androidx.loader.content.ModernAsyncTask.sHandler;

        exitmonitor class "Landroidx/loader/content/ModernAsyncTask;";

     label3:
        return $r0;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Landroidx/loader/content/ModernAsyncTask;";

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void setDefaultExecutor(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r0;

        $r0 := @parameter0;

        androidx.loader.content.ModernAsyncTask.sDefaultExecutor = $r0;

        return;
    }

    public final boolean cancel(boolean)
    {
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.util.concurrent.FutureTask $r2;
        androidx.loader.content.ModernAsyncTask r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mCancelled;

        virtualinvoke $r1.set(1);

        $r2 = r0.mFuture;

        $z0 = virtualinvoke $r2.cancel($z0);

        return $z0;
    }

    protected abstract transient java.lang.Object doInBackground(java.lang.Object[]);

    public final transient androidx.loader.content.ModernAsyncTask execute(java.lang.Object[])
    {
        java.lang.Object[] r1;
        androidx.loader.content.ModernAsyncTask r0;
        java.util.concurrent.Executor $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = androidx.loader.content.ModernAsyncTask.sDefaultExecutor;

        r0 = virtualinvoke r0.executeOnExecutor($r2, r1);

        return r0;
    }

    public final transient androidx.loader.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor, java.lang.Object[])
    {
        java.lang.IllegalStateException $r6;
        java.lang.Object[] r2;
        androidx.loader.content.ModernAsyncTask$Status $r3, $r4;
        java.util.concurrent.Executor $r1;
        java.util.concurrent.FutureTask $r8;
        androidx.loader.content.ModernAsyncTask r0;
        int[] $r5;
        int $i0;
        androidx.loader.content.ModernAsyncTask$WorkerRunnable $r7;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        $r3 = r0.mStatus;

        $r4 = androidx.loader.content.ModernAsyncTask$Status.PENDING;

        if $r3 == $r4 goto label4;

        $r5 = androidx.loader.content.ModernAsyncTask$4.$SwitchMap$androidx$loader$content$ModernAsyncTask$Status;

        $r3 = r0.mStatus;

        $i0 = virtualinvoke $r3.ordinal();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<init>("We should never reach this state");

        throw $r6;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<init>("Cannot execute task: the task has already been executed (a task can be executed only once)");

        throw $r6;

     label3:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<init>("Cannot execute task: the task is already running.");

        throw $r6;

     label4:
        $r3 = androidx.loader.content.ModernAsyncTask$Status.RUNNING;

        r0.mStatus = $r3;

        virtualinvoke r0.onPreExecute();

        $r7 = r0.mWorker;

        $r7.mParams = r2;

        $r8 = r0.mFuture;

        interfaceinvoke $r1.execute($r8);

        return r0;
    }

    void finish(java.lang.Object)
    {
        androidx.loader.content.ModernAsyncTask$Status $r2;
        java.lang.Object r1;
        androidx.loader.content.ModernAsyncTask r0;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $z0 = virtualinvoke r0.isCancelled();

        if $z0 == 0 goto label1;

        virtualinvoke r0.onCancelled(r1);

        goto label2;

     label1:
        virtualinvoke r0.onPostExecute(r1);

     label2:
        $r2 = androidx.loader.content.ModernAsyncTask$Status.FINISHED;

        r0.mStatus = $r2;

        return;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask $r2;
        java.lang.Object $r1;
        androidx.loader.content.ModernAsyncTask r0;

        r0 := @this;

        $r2 = r0.mFuture;

        $r1 = virtualinvoke $r2.get();

        return $r1;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.FutureTask $r3;
        long $l0;
        java.lang.Object $r2;
        androidx.loader.content.ModernAsyncTask r0;

        r0 := @this;

        $l0 := @parameter0;

        $r1 := @parameter1;

        $r3 = r0.mFuture;

        $r2 = virtualinvoke $r3.get($l0, $r1);

        return $r2;
    }

    public final androidx.loader.content.ModernAsyncTask$Status getStatus()
    {
        androidx.loader.content.ModernAsyncTask r0;
        androidx.loader.content.ModernAsyncTask$Status r1;

        r0 := @this;

        r1 = r0.mStatus;

        return r1;
    }

    public final boolean isCancelled()
    {
        java.util.concurrent.atomic.AtomicBoolean $r1;
        androidx.loader.content.ModernAsyncTask r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mCancelled;

        $z0 = virtualinvoke $r1.get();

        return $z0;
    }

    protected void onCancelled()
    {
        androidx.loader.content.ModernAsyncTask r0;

        r0 := @this;

        return;
    }

    protected void onCancelled(java.lang.Object)
    {
        java.lang.Object r1;
        androidx.loader.content.ModernAsyncTask r0;

        r0 := @this;

        r1 := @parameter0;

        virtualinvoke r0.onCancelled();

        return;
    }

    protected void onPostExecute(java.lang.Object)
    {
        java.lang.Object r1;
        androidx.loader.content.ModernAsyncTask r0;

        r0 := @this;

        r1 := @parameter0;

        return;
    }

    protected void onPreExecute()
    {
        androidx.loader.content.ModernAsyncTask r0;

        r0 := @this;

        return;
    }

    protected transient void onProgressUpdate(java.lang.Object[])
    {
        java.lang.Object[] r1;
        androidx.loader.content.ModernAsyncTask r0;

        r0 := @this;

        r1 := @parameter0;

        return;
    }

    java.lang.Object postResult(java.lang.Object)
    {
        java.lang.Object[] $r3;
        android.os.Message $r5;
        android.os.Handler $r4;
        java.lang.Object r1;
        androidx.loader.content.ModernAsyncTask r0;
        androidx.loader.content.ModernAsyncTask$AsyncTaskResult $r2;

        r0 := @this;

        r1 := @parameter0;

        $r4 = androidx.loader.content.ModernAsyncTask.getHandler();

        $r2 = new androidx.loader.content.ModernAsyncTask$AsyncTaskResult;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        specialinvoke $r2.<init>(r0, $r3);

        $r5 = virtualinvoke $r4.obtainMessage(1, $r2);

        virtualinvoke $r5.sendToTarget();

        return r1;
    }

    void postResultIfNotInvoked(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicBoolean r2;
        java.lang.Object r1;
        androidx.loader.content.ModernAsyncTask r0;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        r2 = r0.mTaskInvoked;

        $z0 = virtualinvoke r2.get();

        if $z0 != 0 goto label1;

        virtualinvoke r0.postResult(r1);

     label1:
        return;
    }

    protected final transient void publishProgress(java.lang.Object[])
    {
        java.lang.Object[] r1;
        android.os.Message $r4;
        android.os.Handler $r3;
        androidx.loader.content.ModernAsyncTask r0;
        androidx.loader.content.ModernAsyncTask$AsyncTaskResult $r2;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $z0 = virtualinvoke r0.isCancelled();

        if $z0 != 0 goto label1;

        $r3 = androidx.loader.content.ModernAsyncTask.getHandler();

        $r2 = new androidx.loader.content.ModernAsyncTask$AsyncTaskResult;

        specialinvoke $r2.<init>(r0, r1);

        $r4 = virtualinvoke $r3.obtainMessage(2, $r2);

        virtualinvoke $r4.sendToTarget();

     label1:
        return;
    }
}
