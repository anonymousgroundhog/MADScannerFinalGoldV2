class androidx.appcompat.graphics.drawable.DrawableContainer extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback
{
    private static final boolean DEBUG;
    private static final boolean DEFAULT_DITHER;
    private static final java.lang.String TAG;
    private int mAlpha;
    private java.lang.Runnable mAnimationRunnable;
    private androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback mBlockInvalidateCallback;
    private int mCurIndex;
    private android.graphics.drawable.Drawable mCurrDrawable;
    private androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState mDrawableContainerState;
    private long mEnterAnimationEnd;
    private long mExitAnimationEnd;
    private boolean mHasAlpha;
    private android.graphics.Rect mHotspotBounds;
    private android.graphics.drawable.Drawable mLastDrawable;
    private boolean mMutated;

    void <init>()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;

        r0 := @this;

        specialinvoke r0.<init>();

        r0.mAlpha = 255;

        r0.mCurIndex = -1;

        return;
    }

    private void initializeDrawableForDisplay(android.graphics.drawable.Drawable)
    {
        java.lang.Throwable r10;
        android.graphics.Rect $r9;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState r4;
        android.graphics.drawable.Drawable$Callback $r3;
        android.graphics.drawable.Drawable $r1;
        android.content.res.ColorStateList r6;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        int[] $r8;
        int $i0, $i1, $i2, $i3;
        boolean z0;
        android.graphics.ColorFilter r5;
        androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback r2;
        android.graphics.PorterDuff$Mode r7;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mBlockInvalidateCallback;

        if r2 != null goto label01;

        r2 = new androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback;

        specialinvoke r2.<init>();

        r0.mBlockInvalidateCallback = r2;

     label01:
        r2 = r0.mBlockInvalidateCallback;

        $r3 = virtualinvoke $r1.getCallback();

        r2 = virtualinvoke r2.wrap($r3);

        virtualinvoke $r1.setCallback(r2);

     label02:
        r4 = r0.mDrawableContainerState;

        $i0 = r4.mEnterFadeDuration;

     label03:
        if $i0 > 0 goto label07;

     label04:
        z0 = r0.mHasAlpha;

     label05:
        if z0 == 0 goto label07;

     label06:
        $i0 = r0.mAlpha;

        virtualinvoke $r1.setAlpha($i0);

     label07:
        r4 = r0.mDrawableContainerState;

        z0 = r4.mHasColorFilter;

     label08:
        if z0 == 0 goto label11;

     label09:
        r4 = r0.mDrawableContainerState;

        r5 = r4.mColorFilter;

        virtualinvoke $r1.setColorFilter(r5);

     label10:
        goto label17;

     label11:
        r4 = r0.mDrawableContainerState;

        z0 = r4.mHasTintList;

     label12:
        if z0 == 0 goto label14;

     label13:
        r4 = r0.mDrawableContainerState;

        r6 = r4.mTintList;

        androidx.core.graphics.drawable.DrawableCompat.setTintList($r1, r6);

     label14:
        r4 = r0.mDrawableContainerState;

        z0 = r4.mHasTintMode;

     label15:
        if z0 == 0 goto label17;

     label16:
        r4 = r0.mDrawableContainerState;

        r7 = r4.mTintMode;

        androidx.core.graphics.drawable.DrawableCompat.setTintMode($r1, r7);

     label17:
        z0 = virtualinvoke r0.isVisible();

        virtualinvoke $r1.setVisible(z0, 1);

        r4 = r0.mDrawableContainerState;

        z0 = r4.mDither;

        virtualinvoke $r1.setDither(z0);

        $r8 = virtualinvoke r0.getState();

        virtualinvoke $r1.setState($r8);

        $i0 = virtualinvoke r0.getLevel();

        virtualinvoke $r1.setLevel($i0);

        $r9 = virtualinvoke r0.getBounds();

        virtualinvoke $r1.setBounds($r9);

        $i0 = android.os.Build$VERSION.SDK_INT;

     label18:
        if $i0 < 23 goto label20;

     label19:
        $i0 = virtualinvoke r0.getLayoutDirection();

        virtualinvoke $r1.setLayoutDirection($i0);

     label20:
        r4 = r0.mDrawableContainerState;

        z0 = r4.mAutoMirrored;

        virtualinvoke $r1.setAutoMirrored(z0);

        $r9 = r0.mHotspotBounds;

        $i0 = android.os.Build$VERSION.SDK_INT;

     label21:
        if $i0 < 21 goto label23;

        if $r9 == null goto label23;

     label22:
        $i2 = $r9.left;

        $i3 = $r9.top;

        $i0 = $r9.right;

        $i1 = $r9.bottom;

        virtualinvoke $r1.setHotspotBounds($i2, $i3, $i0, $i1);

     label23:
        r2 = r0.mBlockInvalidateCallback;

        $r3 = virtualinvoke r2.unwrap();

        virtualinvoke $r1.setCallback($r3);

        return;

     label24:
        r10 := @caughtexception;

        r2 = r0.mBlockInvalidateCallback;

        $r3 = virtualinvoke r2.unwrap();

        virtualinvoke $r1.setCallback($r3);

        throw r10;

        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label06 to label08 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label15 with label24;
        catch java.lang.Throwable from label16 to label18 with label24;
        catch java.lang.Throwable from label19 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
    }

    private boolean needsMirroring()
    {
        int $i0;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        boolean $z0;

        r0 := @this;

        $z0 = virtualinvoke r0.isAutoMirrored();

        if $z0 == 0 goto label1;

        $i0 = androidx.core.graphics.drawable.DrawableCompat.getLayoutDirection(r0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    static int resolveDensity(android.content.res.Resources, int)
    {
        int $i0;
        android.util.DisplayMetrics $r1;
        android.content.res.Resources $r0;

        $r0 := @parameter0;

        $i0 := @parameter1;

        if $r0 != null goto label1;

        goto label2;

     label1:
        $r1 = virtualinvoke $r0.getDisplayMetrics();

        $i0 = $r1.densityDpi;

     label2:
        if $i0 != 0 goto label3;

        return 160;

     label3:
        return $i0;
    }

    void animate(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        long $l0, $l1;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r3;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        byte $b2;
        int $i3, $i4;
        boolean $z0, z1;

        r0 := @this;

        $z0 := @parameter0;

        r0.mHasAlpha = 1;

        $l0 = android.os.SystemClock.uptimeMillis();

        z1 = 0;

        r1 = r0.mCurrDrawable;

        if r1 == null goto label2;

        $l1 = r0.mEnterAnimationEnd;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label3;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 > 0 goto label1;

        $i3 = r0.mAlpha;

        virtualinvoke r1.setAlpha($i3);

        r0.mEnterAnimationEnd = 0L;

        goto label3;

     label1:
        $l1 = $l1 - $l0;

        $l1 = $l1 * 255L;

        $i3 = (int) $l1;

        $r2 = r0.mDrawableContainerState;

        $i4 = $r2.mEnterFadeDuration;

        $i3 = $i3 / $i4;

        r1 = r0.mCurrDrawable;

        $i3 = 255 - $i3;

        $i4 = r0.mAlpha;

        $i3 = $i3 * $i4;

        $i3 = $i3 / 255;

        virtualinvoke r1.setAlpha($i3);

        z1 = 1;

        goto label3;

     label2:
        r0.mEnterAnimationEnd = 0L;

     label3:
        r1 = r0.mLastDrawable;

        if r1 == null goto label5;

        $l1 = r0.mExitAnimationEnd;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label6;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 > 0 goto label4;

        virtualinvoke r1.setVisible(0, 0);

        r0.mLastDrawable = null;

        r0.mExitAnimationEnd = 0L;

        goto label6;

     label4:
        $l1 = $l1 - $l0;

        $l1 = $l1 * 255L;

        $i3 = (int) $l1;

        $r2 = r0.mDrawableContainerState;

        $i4 = $r2.mExitFadeDuration;

        $i3 = $i3 / $i4;

        r1 = r0.mLastDrawable;

        $i4 = r0.mAlpha;

        $i3 = $i4 * $i3;

        $i3 = $i3 / 255;

        virtualinvoke r1.setAlpha($i3);

        z1 = 1;

        goto label6;

     label5:
        r0.mExitAnimationEnd = 0L;

     label6:
        if $z0 == 0 goto label7;

        if z1 == 0 goto label7;

        r3 = r0.mAnimationRunnable;

        $l0 = 16L + $l0;

        virtualinvoke r0.scheduleSelf(r3, $l0);

     label7:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.content.res.Resources$Theme $r1;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawableContainerState;

        virtualinvoke $r2.applyTheme($r1);

        return;
    }

    public boolean canApplyTheme()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        $z0 = virtualinvoke $r1.canApplyTheme();

        return $z0;
    }

    void clearMutated()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        virtualinvoke $r1.clearMutated();

        r0.mMutated = 0;

        return;
    }

    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState r1;

        r0 := @this;

        r1 = r0.mDrawableContainerState;

        return r1;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.Canvas $r1;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.draw($r1);

     label1:
        $r2 = r0.mLastDrawable;

        if $r2 == null goto label2;

        virtualinvoke $r2.draw($r1);

     label2:
        return;
    }

    public int getAlpha()
    {
        int i0;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;

        r0 := @this;

        i0 = r0.mAlpha;

        return i0;
    }

    public int getChangingConfigurations()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0, $i1;

        r0 := @this;

        $i0 = specialinvoke r0.getChangingConfigurations();

        $r1 = r0.mDrawableContainerState;

        $i1 = virtualinvoke $r1.getChangingConfigurations();

        $i0 = $i0 | $i1;

        return $i0;
    }

    public final android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        $z0 = virtualinvoke $r1.canConstantState();

        if $z0 == 0 goto label1;

        $r1 = r0.mDrawableContainerState;

        $i0 = virtualinvoke r0.getChangingConfigurations();

        $r1.mChangingConfigurations = $i0;

        $r1 = r0.mDrawableContainerState;

        return $r1;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this;

        r1 = r0.mCurrDrawable;

        return r1;
    }

    int getCurrentIndex()
    {
        int i0;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;

        r0 := @this;

        i0 = r0.mCurIndex;

        return i0;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.graphics.Rect $r1, $r2;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHotspotBounds;

        if $r2 == null goto label1;

        virtualinvoke $r1.set($r2);

        return;

     label1:
        specialinvoke r0.getHotspotBounds($r1);

        return;
    }

    public int getIntrinsicHeight()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        $z0 = virtualinvoke $r1.isConstantSize();

        if $z0 == 0 goto label1;

        $r1 = r0.mDrawableContainerState;

        $i0 = virtualinvoke $r1.getConstantHeight();

        return $i0;

     label1:
        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.getIntrinsicHeight();

        return $i0;

     label2:
        return -1;
    }

    public int getIntrinsicWidth()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        $z0 = virtualinvoke $r1.isConstantSize();

        if $z0 == 0 goto label1;

        $r1 = r0.mDrawableContainerState;

        $i0 = virtualinvoke $r1.getConstantWidth();

        return $i0;

     label1:
        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.getIntrinsicWidth();

        return $i0;

     label2:
        return -1;
    }

    public int getMinimumHeight()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        $z0 = virtualinvoke $r1.isConstantSize();

        if $z0 == 0 goto label1;

        $r1 = r0.mDrawableContainerState;

        $i0 = virtualinvoke $r1.getConstantMinimumHeight();

        return $i0;

     label1:
        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.getMinimumHeight();

        return $i0;

     label2:
        return 0;
    }

    public int getMinimumWidth()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        $z0 = virtualinvoke $r1.isConstantSize();

        if $z0 == 0 goto label1;

        $r1 = r0.mDrawableContainerState;

        $i0 = virtualinvoke $r1.getConstantMinimumWidth();

        return $i0;

     label1:
        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.getMinimumWidth();

        return $i0;

     label2:
        return 0;
    }

    public int getOpacity()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mCurrDrawable;

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.isVisible();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r2 = r0.mDrawableContainerState;

        $i0 = virtualinvoke $r2.getOpacity();

        return $i0;

     label2:
        return -2;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.Outline $r1;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.getOutline($r1);

     label1:
        return;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.Rect $r1, $r3;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState r2;
        android.graphics.drawable.Drawable r4;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        int i0, i1;
        boolean z0, $z1;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mDrawableContainerState;

        $r3 = virtualinvoke r2.getConstantPadding();

        if $r3 == null goto label3;

        virtualinvoke $r1.set($r3);

        i0 = $r3.left;

        i1 = $r3.top;

        i0 = i0 | i1;

        i1 = $r3.bottom;

        i0 = i0 | i1;

        i1 = $r3.right;

        i0 = i0 | i1;

        if i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        goto label5;

     label3:
        r4 = r0.mCurrDrawable;

        if r4 == null goto label4;

        z0 = virtualinvoke r4.getPadding($r1);

        goto label5;

     label4:
        z0 = specialinvoke r0.getPadding($r1);

     label5:
        $z1 = specialinvoke r0.needsMirroring();

        if $z1 == 0 goto label6;

        i1 = $r1.left;

        i0 = $r1.right;

        $r1.left = i0;

        $r1.right = i1;

     label6:
        return z0;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        android.graphics.drawable.Drawable$Callback $r4;
        android.graphics.drawable.Drawable $r1, $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawableContainerState;

        if $r2 == null goto label1;

        virtualinvoke $r2.invalidateCache();

     label1:
        $r3 = r0.mCurrDrawable;

        if $r1 != $r3 goto label2;

        $r4 = virtualinvoke r0.getCallback();

        if $r4 == null goto label2;

        $r4 = virtualinvoke r0.getCallback();

        interfaceinvoke $r4.invalidateDrawable(r0);

     label2:
        return;
    }

    public boolean isAutoMirrored()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        boolean z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        z0 = $r1.mAutoMirrored;

        return z0;
    }

    public boolean isStateful()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawableContainerState;

        $z0 = virtualinvoke $r1.isStateful();

        return $z0;
    }

    public void jumpToCurrentState()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        byte $b2;
        int $i0;
        long $l1;
        android.graphics.drawable.Drawable $r1;
        boolean z0, $z1;

        r0 := @this;

        z0 = 0;

        $r1 = r0.mLastDrawable;

        if $r1 == null goto label1;

        virtualinvoke $r1.jumpToCurrentState();

        r0.mLastDrawable = null;

        z0 = 1;

     label1:
        $r1 = r0.mCurrDrawable;

        if $r1 == null goto label2;

        virtualinvoke $r1.jumpToCurrentState();

        $z1 = r0.mHasAlpha;

        if $z1 == 0 goto label2;

        $r1 = r0.mCurrDrawable;

        $i0 = r0.mAlpha;

        virtualinvoke $r1.setAlpha($i0);

     label2:
        $l1 = r0.mExitAnimationEnd;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label3;

        r0.mExitAnimationEnd = 0L;

        z0 = 1;

     label3:
        $l1 = r0.mEnterAnimationEnd;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

        r0.mEnterAnimationEnd = 0L;

        z0 = 1;

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r0.invalidateSelf();

     label5:
        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        android.graphics.drawable.Drawable $r1;
        boolean z0;

        r0 := @this;

        z0 = r0.mMutated;

        if z0 != 0 goto label1;

        $r1 = specialinvoke r0.mutate();

        if $r1 != r0 goto label1;

        $r2 = virtualinvoke r0.cloneConstantState();

        virtualinvoke $r2.mutate();

        virtualinvoke r0.setConstantState($r2);

        r0.mMutated = 1;

     label1:
        return r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mLastDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.setBounds($r1);

     label1:
        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label2;

        virtualinvoke $r2.setBounds($r1);

     label2:
        return;
    }

    public boolean onLayoutDirectionChanged(int)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawableContainerState;

        $i1 = virtualinvoke r0.getCurrentIndex();

        $z0 = virtualinvoke $r1.setLayoutDirection($i0, $i1);

        return $z0;
    }

    protected boolean onLevelChange(int)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mLastDrawable;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.setLevel($i0);

        return $z0;

     label1:
        $r1 = r0.mCurrDrawable;

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.setLevel($i0);

        return $z0;

     label2:
        return 0;
    }

    protected boolean onStateChange(int[])
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        int[] $r1;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mLastDrawable;

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.setState($r1);

        return $z0;

     label1:
        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.setState($r1);

        return $z0;

     label2:
        return 0;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.graphics.drawable.Drawable$Callback $r4;
        long $l0;
        android.graphics.drawable.Drawable $r1, $r3;
        java.lang.Runnable $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $l0 := @parameter2;

        $r3 = r0.mCurrDrawable;

        if $r1 != $r3 goto label1;

        $r4 = virtualinvoke r0.getCallback();

        if $r4 == null goto label1;

        $r4 = virtualinvoke r0.getCallback();

        interfaceinvoke $r4.scheduleDrawable(r0, $r2, $l0);

     label1:
        return;
    }

    boolean selectDrawable(int)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState r1;
        long $l2, l3;
        android.graphics.drawable.Drawable r2;
        java.lang.Runnable r3;
        androidx.appcompat.graphics.drawable.DrawableContainer$1 $r4;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        byte $b4;
        int $i0, i1;

        r0 := @this;

        $i0 := @parameter0;

        i1 = r0.mCurIndex;

        if $i0 != i1 goto label01;

        return 0;

     label01:
        $l2 = android.os.SystemClock.uptimeMillis();

        r1 = r0.mDrawableContainerState;

        i1 = r1.mExitFadeDuration;

        if i1 <= 0 goto label04;

        r2 = r0.mLastDrawable;

        if r2 == null goto label02;

        virtualinvoke r2.setVisible(0, 0);

     label02:
        r2 = r0.mCurrDrawable;

        if r2 == null goto label03;

        r0.mLastDrawable = r2;

        r1 = r0.mDrawableContainerState;

        i1 = r1.mExitFadeDuration;

        l3 = (long) i1;

        l3 = l3 + $l2;

        r0.mExitAnimationEnd = l3;

        goto label05;

     label03:
        r0.mLastDrawable = null;

        r0.mExitAnimationEnd = 0L;

        goto label05;

     label04:
        r2 = r0.mCurrDrawable;

        if r2 == null goto label05;

        virtualinvoke r2.setVisible(0, 0);

     label05:
        if $i0 < 0 goto label08;

        r1 = r0.mDrawableContainerState;

        i1 = r1.mNumChildren;

        if $i0 >= i1 goto label08;

        r1 = r0.mDrawableContainerState;

        r2 = virtualinvoke r1.getChild($i0);

        r0.mCurrDrawable = r2;

        r0.mCurIndex = $i0;

        if r2 == null goto label07;

        r1 = r0.mDrawableContainerState;

        $i0 = r1.mEnterFadeDuration;

        if $i0 <= 0 goto label06;

        r1 = r0.mDrawableContainerState;

        $i0 = r1.mEnterFadeDuration;

        l3 = (long) $i0;

        $l2 = l3 + $l2;

        r0.mEnterAnimationEnd = $l2;

     label06:
        specialinvoke r0.initializeDrawableForDisplay(r2);

     label07:
        goto label09;

     label08:
        r0.mCurrDrawable = null;

        r0.mCurIndex = -1;

     label09:
        $l2 = r0.mEnterAnimationEnd;

        $b4 = $l2 cmp 0L;

        if $b4 != 0 goto label10;

        $l2 = r0.mExitAnimationEnd;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label13;

     label10:
        r3 = r0.mAnimationRunnable;

        if r3 != null goto label11;

        $r4 = new androidx.appcompat.graphics.drawable.DrawableContainer$1;

        specialinvoke $r4.<init>(r0);

        r0.mAnimationRunnable = $r4;

        goto label12;

     label11:
        virtualinvoke r0.unscheduleSelf(r3);

     label12:
        virtualinvoke r0.animate(1);

     label13:
        virtualinvoke r0.invalidateSelf();

        return 1;
    }

    public void setAlpha(int)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        byte $b2;
        int $i0, $i3;
        long $l1;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $z0 = r0.mHasAlpha;

        if $z0 == 0 goto label1;

        $i3 = r0.mAlpha;

        if $i3 == $i0 goto label3;

     label1:
        r0.mHasAlpha = 1;

        r0.mAlpha = $i0;

        $r1 = r0.mCurrDrawable;

        if $r1 == null goto label3;

        $l1 = r0.mEnterAnimationEnd;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        virtualinvoke $r1.setAlpha($i0);

        return;

     label2:
        virtualinvoke r0.animate(0);

     label3:
        return;
    }

    public void setAutoMirrored(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        android.graphics.drawable.Drawable $r2;
        boolean $z0, $z1;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawableContainerState;

        $z1 = $r1.mAutoMirrored;

        if $z1 == $z0 goto label1;

        $r1 = r0.mDrawableContainerState;

        $r1.mAutoMirrored = $z0;

        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label1;

        $r1 = r0.mDrawableContainerState;

        $z0 = $r1.mAutoMirrored;

        androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored($r2, $z0);

     label1:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.ColorFilter $r1, $r3;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        android.graphics.drawable.Drawable $r4;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawableContainerState;

        $r2.mHasColorFilter = 1;

        $r2 = r0.mDrawableContainerState;

        $r3 = $r2.mColorFilter;

        if $r3 == $r1 goto label1;

        $r2 = r0.mDrawableContainerState;

        $r2.mColorFilter = $r1;

        $r4 = r0.mCurrDrawable;

        if $r4 == null goto label1;

        virtualinvoke $r4.setColorFilter($r1);

     label1:
        return;
    }

    void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        int $i0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $r1 := @parameter0;

        r0.mDrawableContainerState = $r1;

        $i0 = r0.mCurIndex;

        if $i0 < 0 goto label1;

        $r2 = virtualinvoke $r1.getChild($i0);

        r0.mCurrDrawable = $r2;

        if $r2 == null goto label1;

        specialinvoke r0.initializeDrawableForDisplay($r2);

     label1:
        r0.mLastDrawable = null;

        return;
    }

    void setCurrentIndex(int)
    {
        int $i0;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;

        r0 := @this;

        $i0 := @parameter0;

        virtualinvoke r0.selectDrawable($i0);

        return;
    }

    public void setDither(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;
        android.graphics.drawable.Drawable $r2;
        boolean $z0, $z1;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawableContainerState;

        $z1 = $r1.mDither;

        if $z1 == $z0 goto label1;

        $r1 = r0.mDrawableContainerState;

        $r1.mDither = $z0;

        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label1;

        $r1 = r0.mDrawableContainerState;

        $z0 = $r1.mDither;

        virtualinvoke $r2.setDither($z0);

     label1:
        return;
    }

    public void setEnterFadeDuration(int)
    {
        int $i0;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawableContainerState;

        $r1.mEnterFadeDuration = $i0;

        return;
    }

    public void setExitFadeDuration(int)
    {
        int $i0;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r1;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawableContainerState;

        $r1.mExitFadeDuration = $i0;

        return;
    }

    public void setHotspot(float, float)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        float $f0, $f1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $r1 = r0.mCurrDrawable;

        if $r1 == null goto label1;

        androidx.core.graphics.drawable.DrawableCompat.setHotspot($r1, $f0, $f1);

     label1:
        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        android.graphics.Rect $r1;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $i2 := @parameter2;

        $i3 := @parameter3;

        $r1 = r0.mHotspotBounds;

        if $r1 != null goto label1;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<init>($i0, $i1, $i2, $i3);

        r0.mHotspotBounds = $r1;

        goto label2;

     label1:
        virtualinvoke $r1.set($i0, $i1, $i2, $i3);

     label2:
        $r2 = r0.mCurrDrawable;

        if $r2 == null goto label3;

        androidx.core.graphics.drawable.DrawableCompat.setHotspotBounds($r2, $i0, $i1, $i2, $i3);

     label3:
        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r3;
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        android.graphics.drawable.Drawable $r4;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawableContainerState;

        $r2.mHasTintList = 1;

        $r2 = r0.mDrawableContainerState;

        $r3 = $r2.mTintList;

        if $r3 == $r1 goto label1;

        $r2 = r0.mDrawableContainerState;

        $r2.mTintList = $r1;

        $r4 = r0.mCurrDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTintList($r4, $r1);

     label1:
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        android.graphics.drawable.Drawable $r4;
        android.graphics.PorterDuff$Mode $r1, $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawableContainerState;

        $r2.mHasTintMode = 1;

        $r2 = r0.mDrawableContainerState;

        $r3 = $r2.mTintMode;

        if $r3 == $r1 goto label1;

        $r2 = r0.mDrawableContainerState;

        $r2.mTintMode = $r1;

        $r4 = r0.mCurrDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTintMode($r4, $r1);

     label1:
        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1, $z2;

        r0 := @this;

        $z0 := @parameter0;

        $z1 := @parameter1;

        $z2 = specialinvoke r0.setVisible($z0, $z1);

        $r1 = r0.mLastDrawable;

        if $r1 == null goto label1;

        virtualinvoke $r1.setVisible($z0, $z1);

     label1:
        $r1 = r0.mCurrDrawable;

        if $r1 == null goto label2;

        virtualinvoke $r1.setVisible($z0, $z1);

     label2:
        return $z2;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        android.graphics.drawable.Drawable$Callback $r4;
        android.graphics.drawable.Drawable $r1, $r3;
        java.lang.Runnable $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = r0.mCurrDrawable;

        if $r1 != $r3 goto label1;

        $r4 = virtualinvoke r0.getCallback();

        if $r4 == null goto label1;

        $r4 = virtualinvoke r0.getCallback();

        interfaceinvoke $r4.unscheduleDrawable(r0, $r2);

     label1:
        return;
    }

    final void updateDensity(android.content.res.Resources)
    {
        androidx.appcompat.graphics.drawable.DrawableContainer r0;
        androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState $r2;
        android.content.res.Resources $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawableContainerState;

        virtualinvoke $r2.updateDensity($r1);

        return;
    }
}
