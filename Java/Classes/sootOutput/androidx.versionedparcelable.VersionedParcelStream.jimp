class androidx.versionedparcelable.VersionedParcelStream extends androidx.versionedparcelable.VersionedParcel
{
    private static final int TYPE_BOOLEAN;
    private static final int TYPE_BOOLEAN_ARRAY;
    private static final int TYPE_DOUBLE;
    private static final int TYPE_DOUBLE_ARRAY;
    private static final int TYPE_FLOAT;
    private static final int TYPE_FLOAT_ARRAY;
    private static final int TYPE_INT;
    private static final int TYPE_INT_ARRAY;
    private static final int TYPE_LONG;
    private static final int TYPE_LONG_ARRAY;
    private static final int TYPE_NULL;
    private static final int TYPE_STRING;
    private static final int TYPE_STRING_ARRAY;
    private static final int TYPE_SUB_BUNDLE;
    private static final int TYPE_SUB_PERSISTABLE_BUNDLE;
    private static final java.nio.charset.Charset UTF_16;
    int mCount;
    private java.io.DataInputStream mCurrentInput;
    private java.io.DataOutputStream mCurrentOutput;
    private androidx.versionedparcelable.VersionedParcelStream$FieldBuffer mFieldBuffer;
    private int mFieldId;
    int mFieldSize;
    private boolean mIgnoreParcelables;
    private final java.io.DataInputStream mMasterInput;
    private final java.io.DataOutputStream mMasterOutput;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = java.nio.charset.Charset.forName("UTF-16");

        androidx.versionedparcelable.VersionedParcelStream.UTF_16 = $r0;

        return;
    }

    public void <init>(java.io.InputStream, java.io.OutputStream)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.OutputStream $r2;
        java.io.InputStream $r1;
        androidx.collection.ArrayMap $r3, $r4, $r5;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = new androidx.collection.ArrayMap;

        specialinvoke $r3.<init>();

        $r4 = new androidx.collection.ArrayMap;

        specialinvoke $r4.<init>();

        $r5 = new androidx.collection.ArrayMap;

        specialinvoke $r5.<init>();

        specialinvoke r0.<init>($r1, $r2, $r3, $r4, $r5);

        return;
    }

    private void <init>(java.io.InputStream, java.io.OutputStream, androidx.collection.ArrayMap, androidx.collection.ArrayMap, androidx.collection.ArrayMap)
    {
        java.io.OutputStream $r2;
        java.io.DataInputStream $r7, $r9;
        androidx.versionedparcelable.VersionedParcelStream$1 $r8;
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream $r6, $r10;
        java.io.InputStream $r1;
        androidx.collection.ArrayMap r3, r4, r5;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        r3 := @parameter2;

        r4 := @parameter3;

        r5 := @parameter4;

        specialinvoke r0.<init>(r3, r4, r5);

        r0.mCount = 0;

        r0.mFieldId = -1;

        r0.mFieldSize = -1;

        $r6 = null;

        if $r1 == null goto label1;

        $r9 = new java.io.DataInputStream;

        $r7 = $r9;

        $r8 = new androidx.versionedparcelable.VersionedParcelStream$1;

        specialinvoke $r8.<init>(r0, $r1);

        specialinvoke $r9.<init>($r8);

        goto label2;

     label1:
        $r7 = null;

     label2:
        r0.mMasterInput = $r7;

        if $r2 == null goto label3;

        $r10 = new java.io.DataOutputStream;

        $r6 = $r10;

        specialinvoke $r10.<init>($r2);

     label3:
        r0.mMasterOutput = $r6;

        r0.mCurrentInput = $r7;

        r0.mCurrentOutput = $r6;

        return;
    }

    private void readObject(int, java.lang.String, android.os.Bundle)
    {
        android.os.Bundle $r2, $r13;
        java.lang.Object[] $r11;
        double[] $r8;
        float[] $r5;
        long $l1;
        java.lang.String[] $r10;
        long[] $r6;
        int[] $r7;
        int $i0;
        java.lang.String $r1, $r12;
        double $d0;
        boolean $z0;
        boolean[] $r9;
        java.lang.RuntimeException $r3;
        androidx.versionedparcelable.VersionedParcelStream r0;
        float $f0;
        java.lang.StringBuilder $r4;

        r0 := @this;

        $i0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        lookupswitch($i0)
        {
            case 0: goto label16;
            case 1: goto label15;
            case 2: goto label14;
            case 3: goto label13;
            case 4: goto label12;
            case 5: goto label11;
            case 6: goto label10;
            case 7: goto label09;
            case 8: goto label08;
            case 9: goto label07;
            case 10: goto label06;
            case 11: goto label05;
            case 12: goto label04;
            case 13: goto label03;
            case 14: goto label02;
            default: goto label01;
        };

     label01:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r4 = virtualinvoke $r4.append("Unknown type ");

        $r4 = virtualinvoke $r4.append($i0);

        $r1 = virtualinvoke $r4.toString();

        specialinvoke $r3.<init>($r1);

        throw $r3;

     label02:
        $r5 = virtualinvoke r0.readFloatArray();

        virtualinvoke $r2.putFloatArray($r1, $r5);

        return;

     label03:
        $f0 = virtualinvoke r0.readFloat();

        virtualinvoke $r2.putFloat($r1, $f0);

        return;

     label04:
        $r6 = virtualinvoke r0.readLongArray();

        virtualinvoke $r2.putLongArray($r1, $r6);

        return;

     label05:
        $l1 = virtualinvoke r0.readLong();

        virtualinvoke $r2.putLong($r1, $l1);

        return;

     label06:
        $r7 = virtualinvoke r0.readIntArray();

        virtualinvoke $r2.putIntArray($r1, $r7);

        return;

     label07:
        $i0 = virtualinvoke r0.readInt();

        virtualinvoke $r2.putInt($r1, $i0);

        return;

     label08:
        $r8 = virtualinvoke r0.readDoubleArray();

        virtualinvoke $r2.putDoubleArray($r1, $r8);

        return;

     label09:
        $d0 = virtualinvoke r0.readDouble();

        virtualinvoke $r2.putDouble($r1, $d0);

        return;

     label10:
        $r9 = virtualinvoke r0.readBooleanArray();

        virtualinvoke $r2.putBooleanArray($r1, $r9);

        return;

     label11:
        $z0 = virtualinvoke r0.readBoolean();

        virtualinvoke $r2.putBoolean($r1, $z0);

        return;

     label12:
        $r10 = newarray (java.lang.String)[0];

        $r11 = virtualinvoke r0.readArray($r10);

        $r10 = (java.lang.String[]) $r11;

        virtualinvoke $r2.putStringArray($r1, $r10);

        return;

     label13:
        $r12 = virtualinvoke r0.readString();

        virtualinvoke $r2.putString($r1, $r12);

        return;

     label14:
        $r13 = virtualinvoke r0.readBundle();

        virtualinvoke $r2.putBundle($r1, $r13);

        return;

     label15:
        $r13 = virtualinvoke r0.readBundle();

        virtualinvoke $r2.putBundle($r1, $r13);

        return;

     label16:
        virtualinvoke $r2.putParcelable($r1, null);

        return;
    }

    private void writeObject(java.lang.Object)
    {
        java.lang.Float $r13;
        android.os.Bundle $r2;
        java.lang.Double $r7;
        double[] $r8;
        java.lang.String[] $r4;
        long $l1;
        float[] $r14;
        java.lang.Integer $r9;
        long[] $r12;
        int[] $r10;
        java.lang.Long $r11;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.String $r3;
        boolean $z0;
        double $d0;
        boolean[] $r6;
        java.lang.IllegalArgumentException $r15;
        androidx.versionedparcelable.VersionedParcelStream r0;
        float $f0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r16;
        java.lang.Class $r17;

        r0 := @this;

        $r1 := @parameter0;

        if $r1 != null goto label01;

        virtualinvoke r0.writeInt(0);

        return;

     label01:
        $z0 = $r1 instanceof android.os.Bundle;

        if $z0 == 0 goto label02;

        virtualinvoke r0.writeInt(1);

        $r2 = (android.os.Bundle) $r1;

        virtualinvoke r0.writeBundle($r2);

        return;

     label02:
        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label03;

        virtualinvoke r0.writeInt(3);

        $r3 = (java.lang.String) $r1;

        virtualinvoke r0.writeString($r3);

        return;

     label03:
        $z0 = $r1 instanceof java.lang.String[];

        if $z0 == 0 goto label04;

        virtualinvoke r0.writeInt(4);

        $r4 = (java.lang.String[]) $r1;

        virtualinvoke r0.writeArray($r4);

        return;

     label04:
        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label05;

        virtualinvoke r0.writeInt(5);

        $r5 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r5.booleanValue();

        virtualinvoke r0.writeBoolean($z0);

        return;

     label05:
        $z0 = $r1 instanceof boolean[];

        if $z0 == 0 goto label06;

        virtualinvoke r0.writeInt(6);

        $r6 = (boolean[]) $r1;

        virtualinvoke r0.writeBooleanArray($r6);

        return;

     label06:
        $z0 = $r1 instanceof java.lang.Double;

        if $z0 == 0 goto label07;

        virtualinvoke r0.writeInt(7);

        $r7 = (java.lang.Double) $r1;

        $d0 = virtualinvoke $r7.doubleValue();

        virtualinvoke r0.writeDouble($d0);

        return;

     label07:
        $z0 = $r1 instanceof double[];

        if $z0 == 0 goto label08;

        virtualinvoke r0.writeInt(8);

        $r8 = (double[]) $r1;

        virtualinvoke r0.writeDoubleArray($r8);

        return;

     label08:
        $z0 = $r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label09;

        virtualinvoke r0.writeInt(9);

        $r9 = (java.lang.Integer) $r1;

        $i0 = virtualinvoke $r9.intValue();

        virtualinvoke r0.writeInt($i0);

        return;

     label09:
        $z0 = $r1 instanceof int[];

        if $z0 == 0 goto label10;

        virtualinvoke r0.writeInt(10);

        $r10 = (int[]) $r1;

        virtualinvoke r0.writeIntArray($r10);

        return;

     label10:
        $z0 = $r1 instanceof java.lang.Long;

        if $z0 == 0 goto label11;

        virtualinvoke r0.writeInt(11);

        $r11 = (java.lang.Long) $r1;

        $l1 = virtualinvoke $r11.longValue();

        virtualinvoke r0.writeLong($l1);

        return;

     label11:
        $z0 = $r1 instanceof long[];

        if $z0 == 0 goto label12;

        virtualinvoke r0.writeInt(12);

        $r12 = (long[]) $r1;

        virtualinvoke r0.writeLongArray($r12);

        return;

     label12:
        $z0 = $r1 instanceof java.lang.Float;

        if $z0 == 0 goto label13;

        virtualinvoke r0.writeInt(13);

        $r13 = (java.lang.Float) $r1;

        $f0 = virtualinvoke $r13.floatValue();

        virtualinvoke r0.writeFloat($f0);

        return;

     label13:
        $z0 = $r1 instanceof float[];

        if $z0 == 0 goto label14;

        virtualinvoke r0.writeInt(14);

        $r14 = (float[]) $r1;

        virtualinvoke r0.writeFloatArray($r14);

        return;

     label14:
        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<init>();

        $r16 = virtualinvoke $r16.append("Unsupported type ");

        $r17 = virtualinvoke $r1.getClass();

        $r16 = virtualinvoke $r16.append($r17);

        $r3 = virtualinvoke $r16.toString();

        specialinvoke $r15.<init>($r3);

        throw $r15;
    }

    public void closeField()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.ByteArrayOutputStream r3;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        int $i0;
        androidx.versionedparcelable.VersionedParcelStream$FieldBuffer r2;
        java.io.IOException r4;

        r0 := @this;

        r2 = r0.mFieldBuffer;

        if r2 == null goto label6;

        r3 = r2.mOutput;

     label1:
        $i0 = virtualinvoke r3.size();

     label2:
        if $i0 == 0 goto label4;

        r2 = r0.mFieldBuffer;

     label3:
        virtualinvoke r2.flushField();

     label4:
        r0.mFieldBuffer = null;

        return;

     label5:
        r4 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r4);

        throw $r1;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    protected androidx.versionedparcelable.VersionedParcel createSubParcel()
    {
        androidx.versionedparcelable.VersionedParcelStream r0, $r6;
        java.io.DataInputStream $r1;
        java.io.DataOutputStream $r2;
        androidx.collection.ArrayMap $r3, $r4, $r5;

        r0 := @this;

        $r6 = new androidx.versionedparcelable.VersionedParcelStream;

        $r1 = r0.mCurrentInput;

        $r2 = r0.mCurrentOutput;

        $r3 = r0.mReadCache;

        $r4 = r0.mWriteCache;

        $r5 = r0.mParcelizerCache;

        specialinvoke $r6.<init>($r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

    public boolean isStream()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;

        r0 := @this;

        return 1;
    }

    public boolean readBoolean()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataInputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        java.io.IOException r3;
        boolean $z0;

        r0 := @this;

        r2 = r0.mCurrentInput;

     label1:
        $z0 = virtualinvoke r2.readBoolean();

     label2:
        return $z0;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.os.Bundle readBundle()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        android.os.Bundle r1;
        int $i0, i1, $i2;
        java.lang.String $r2;

        r0 := @this;

        $i0 = virtualinvoke r0.readInt();

        if $i0 >= 0 goto label1;

        return null;

     label1:
        r1 = new android.os.Bundle;

        specialinvoke r1.<init>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r0.readString();

        $i2 = virtualinvoke r0.readInt();

        specialinvoke r0.readObject($i2, $r2, r1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public byte[] readByteArray()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataInputStream $r1;
        byte[] r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException r4;
        int $i0;
        java.io.IOException r3;

        r0 := @this;

        $r1 = r0.mCurrentInput;

     label1:
        $i0 = virtualinvoke $r1.readInt();

     label2:
        if $i0 <= 0 goto label5;

        r2 = newarray (byte)[$i0];

        $r1 = r0.mCurrentInput;

     label3:
        virtualinvoke $r1.readFully(r2);

     label4:
        return r2;

     label5:
        return null;

     label6:
        r3 := @caughtexception;

        r4 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke r4.<init>(r3);

        throw r4;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    protected java.lang.CharSequence readCharSequence()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;

        r0 := @this;

        return null;
    }

    public double readDouble()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataInputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        java.io.IOException r3;
        double $d0;

        r0 := @this;

        r2 = r0.mCurrentInput;

     label1:
        $d0 = virtualinvoke r2.readDouble();

     label2:
        return $d0;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean readField(int)
    {
        java.io.DataInputStream r3;
        long l3;
        java.io.IOException r4;
        androidx.versionedparcelable.VersionedParcelStream r0;
        int $i0, i1, i2;
        java.lang.String $r1, $r2;

        r0 := @this;

        $i0 := @parameter0;

     label01:
        i1 = r0.mFieldId;

        if i1 != $i0 goto label02;

        return 1;

     label02:
        $r1 = java.lang.String.valueOf(i1);

        $r2 = java.lang.String.valueOf($i0);

        i1 = virtualinvoke $r1.compareTo($r2);

     label03:
        if i1 <= 0 goto label04;

        return 0;

     label04:
        i1 = r0.mCount;

        i2 = r0.mFieldSize;

        if i1 >= i2 goto label06;

        r3 = r0.mMasterInput;

        i1 = i2 - i1;

        l3 = (long) i1;

     label05:
        virtualinvoke r3.skip(l3);

     label06:
        i1 = -1;

        r0.mFieldSize = i1;

        r3 = r0.mMasterInput;

     label07:
        i2 = virtualinvoke r3.readInt();

     label08:
        r0.mCount = 0;

        i1 = 65535;

        i1 = i2 & i1;

        if i1 != 65535 goto label10;

        r3 = r0.mMasterInput;

     label09:
        i1 = virtualinvoke r3.readInt();

     label10:
        i2 = i2 >> 16;

        i2 = 65535 & i2;

        r0.mFieldId = i2;

        r0.mFieldSize = i1;

        goto label01;

     label11:
        r4 := @caughtexception;

        return 0;

        catch java.io.IOException from label02 to label03 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
    }

    public float readFloat()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataInputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        float $f0;
        java.io.IOException r3;

        r0 := @this;

        r2 = r0.mCurrentInput;

     label1:
        $f0 = virtualinvoke r2.readFloat();

     label2:
        return $f0;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int readInt()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataInputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        int $i0;
        java.io.IOException r3;

        r0 := @this;

        r2 = r0.mCurrentInput;

     label1:
        $i0 = virtualinvoke r2.readInt();

     label2:
        return $i0;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public long readLong()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataInputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        long $l0;
        java.io.IOException r3;

        r0 := @this;

        r2 = r0.mCurrentInput;

     label1:
        $l0 = virtualinvoke r2.readLong();

     label2:
        return $l0;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.os.Parcelable readParcelable()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;

        r0 := @this;

        return null;
    }

    public java.lang.String readString()
    {
        java.io.DataInputStream r2;
        byte[] r3;
        java.io.IOException r5;
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.nio.charset.Charset $r1;
        androidx.versionedparcelable.VersionedParcel$ParcelException r6;
        int $i0;
        java.lang.String $r4;

        r0 := @this;

        r2 = r0.mCurrentInput;

     label1:
        $i0 = virtualinvoke r2.readInt();

     label2:
        if $i0 <= 0 goto label7;

        r3 = newarray (byte)[$i0];

        r2 = r0.mCurrentInput;

     label3:
        virtualinvoke r2.readFully(r3);

     label4:
        $r4 = new java.lang.String;

        $r1 = androidx.versionedparcelable.VersionedParcelStream.UTF_16;

     label5:
        specialinvoke $r4.<init>(r3, $r1);

     label6:
        return $r4;

     label7:
        return null;

     label8:
        r5 := @caughtexception;

        r6 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke r6.<init>(r5);

        throw r6;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
    }

    public android.os.IBinder readStrongBinder()
    {
        androidx.versionedparcelable.VersionedParcelStream r0;

        r0 := @this;

        return null;
    }

    public void setOutputField(int)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream $r1;
        int $i0;
        androidx.versionedparcelable.VersionedParcelStream$FieldBuffer $r2;

        r0 := @this;

        $i0 := @parameter0;

        virtualinvoke r0.closeField();

        $r2 = new androidx.versionedparcelable.VersionedParcelStream$FieldBuffer;

        $r1 = r0.mMasterOutput;

        specialinvoke $r2.<init>($i0, $r1);

        r0.mFieldBuffer = $r2;

        $r1 = $r2.mDataStream;

        r0.mCurrentOutput = $r1;

        return;
    }

    public void setSerializationFlags(boolean, boolean)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.lang.RuntimeException $r1;
        boolean $z0, $z1;

        r0 := @this;

        $z0 := @parameter0;

        $z1 := @parameter1;

        if $z0 == 0 goto label1;

        r0.mIgnoreParcelables = $z1;

        return;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<init>("Serialization of this object is not allowed");

        throw $r1;
    }

    public void writeBoolean(boolean)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        java.io.IOException r3;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        r2 = r0.mCurrentOutput;

     label1:
        virtualinvoke r2.writeBoolean($z0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeBundle(android.os.Bundle)
    {
        android.os.Bundle $r1;
        java.util.Iterator $r4;
        java.util.Set $r2;
        java.io.IOException r7;
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream $r3;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r8;
        int $i0;
        java.lang.Object $r5;
        java.lang.String r6;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        if $r1 == null goto label11;

     label01:
        $r2 = virtualinvoke $r1.keySet();

     label02:
        $r3 = r0.mCurrentOutput;

     label03:
        $i0 = interfaceinvoke $r2.size();

        virtualinvoke $r3.writeInt($i0);

        $r4 = interfaceinvoke $r2.iterator();

     label04:
        $z0 = interfaceinvoke $r4.hasNext();

     label05:
        if $z0 == 0 goto label10;

     label06:
        $r5 = interfaceinvoke $r4.next();

     label07:
        r6 = (java.lang.String) $r5;

     label08:
        virtualinvoke r0.writeString(r6);

        $r5 = virtualinvoke $r1.get(r6);

        specialinvoke r0.writeObject($r5);

     label09:
        goto label04;

     label10:
        goto label13;

     label11:
        $r3 = r0.mCurrentOutput;

     label12:
        virtualinvoke $r3.writeInt(-1);

     label13:
        return;

     label14:
        r7 := @caughtexception;

        $r8 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r8.<init>(r7);

        goto label15;

     label15:
        throw $r8;

        catch java.io.IOException from label01 to label02 with label14;
        catch java.io.IOException from label03 to label05 with label14;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.io.IOException from label08 to label09 with label14;
        catch java.io.IOException from label12 to label13 with label14;
    }

    public void writeByteArray(byte[])
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        byte[] $r1;
        java.io.DataOutputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r4;
        int $i0;
        java.io.IOException r3;

        r0 := @this;

        $r1 := @parameter0;

        if $r1 == null goto label5;

        r2 = r0.mCurrentOutput;

        $i0 = lengthof $r1;

     label1:
        virtualinvoke r2.writeInt($i0);

     label2:
        r2 = r0.mCurrentOutput;

     label3:
        virtualinvoke r2.write($r1);

     label4:
        goto label7;

     label5:
        r2 = r0.mCurrentOutput;

     label6:
        virtualinvoke r2.writeInt(-1);

     label7:
        return;

     label8:
        r3 := @caughtexception;

        $r4 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r4.<init>(r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public void writeByteArray(byte[], int, int)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        byte[] $r1;
        java.io.DataOutputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r4;
        int $i0, $i1;
        java.io.IOException r3;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        if $r1 == null goto label5;

        r2 = r0.mCurrentOutput;

     label1:
        virtualinvoke r2.writeInt($i1);

     label2:
        r2 = r0.mCurrentOutput;

     label3:
        virtualinvoke r2.write($r1, $i0, $i1);

     label4:
        goto label7;

     label5:
        r2 = r0.mCurrentOutput;

     label6:
        virtualinvoke r2.writeInt(-1);

     label7:
        return;

     label8:
        r3 := @caughtexception;

        $r4 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r4.<init>(r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    protected void writeCharSequence(java.lang.CharSequence)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.lang.CharSequence $r1;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = r0.mIgnoreParcelables;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<init>("CharSequence cannot be written to an OutputStream");

        throw $r2;
    }

    public void writeDouble(double)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        java.io.IOException r3;
        double $d0;

        r0 := @this;

        $d0 := @parameter0;

        r2 = r0.mCurrentOutput;

     label1:
        virtualinvoke r2.writeDouble($d0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeFloat(float)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        float $f0;
        java.io.IOException r3;

        r0 := @this;

        $f0 := @parameter0;

        r2 = r0.mCurrentOutput;

     label1:
        virtualinvoke r2.writeFloat($f0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeInt(int)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        int $i0;
        java.io.IOException r3;

        r0 := @this;

        $i0 := @parameter0;

        r2 = r0.mCurrentOutput;

     label1:
        virtualinvoke r2.writeInt($i0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeLong(long)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.io.DataOutputStream r2;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r1;
        long $l0;
        java.io.IOException r3;

        r0 := @this;

        $l0 := @parameter0;

        r2 = r0.mCurrentOutput;

     label1:
        virtualinvoke r2.writeLong($l0);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r1 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r1.<init>(r3);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeParcelable(android.os.Parcelable)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        android.os.Parcelable $r1;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = r0.mIgnoreParcelables;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<init>("Parcelables cannot be written to an OutputStream");

        throw $r2;
    }

    public void writeString(java.lang.String)
    {
        byte[] $r2;
        java.io.IOException r5;
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.nio.charset.Charset r3;
        java.io.DataOutputStream $r4;
        androidx.versionedparcelable.VersionedParcel$ParcelException $r6;
        int $i0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        if $r1 == null goto label07;

        r3 = androidx.versionedparcelable.VersionedParcelStream.UTF_16;

     label01:
        $r2 = virtualinvoke $r1.getBytes(r3);

     label02:
        $r4 = r0.mCurrentOutput;

        $i0 = lengthof $r2;

     label03:
        virtualinvoke $r4.writeInt($i0);

     label04:
        $r4 = r0.mCurrentOutput;

     label05:
        virtualinvoke $r4.write($r2);

     label06:
        goto label09;

     label07:
        $r4 = r0.mCurrentOutput;

     label08:
        virtualinvoke $r4.writeInt(-1);

     label09:
        return;

     label10:
        r5 := @caughtexception;

        $r6 = new androidx.versionedparcelable.VersionedParcel$ParcelException;

        specialinvoke $r6.<init>(r5);

        throw $r6;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public void writeStrongBinder(android.os.IBinder)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        java.lang.RuntimeException $r2;
        android.os.IBinder $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = r0.mIgnoreParcelables;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<init>("Binders cannot be written to an OutputStream");

        throw $r2;
    }

    public void writeStrongInterface(android.os.IInterface)
    {
        androidx.versionedparcelable.VersionedParcelStream r0;
        android.os.IInterface $r1;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = r0.mIgnoreParcelables;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<init>("Binders cannot be written to an OutputStream");

        throw $r2;
    }
}
