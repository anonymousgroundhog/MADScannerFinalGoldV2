public class androidx.room.RoomSQLiteQuery extends java.lang.Object implements androidx.sqlite.db.SupportSQLiteQuery, androidx.sqlite.db.SupportSQLiteProgram
{
    private static final int BLOB;
    static final int DESIRED_POOL_SIZE;
    private static final int DOUBLE;
    private static final int LONG;
    private static final int NULL;
    static final int POOL_LIMIT;
    private static final int STRING;
    static final java.util.TreeMap sQueryPool;
    int mArgCount;
    private final int[] mBindingTypes;
    final byte[][] mBlobBindings;
    final int mCapacity;
    final double[] mDoubleBindings;
    final long[] mLongBindings;
    private volatile java.lang.String mQuery;
    final java.lang.String[] mStringBindings;

    static void <clinit>()
    {
        java.util.TreeMap $r0;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<init>();

        androidx.room.RoomSQLiteQuery.sQueryPool = $r0;

        return;
    }

    private void <init>(int)
    {
        androidx.room.RoomSQLiteQuery r0;
        byte[][] $r5;
        long[] $r2;
        int[] $r1;
        int $i0;
        double[] $r3;
        java.lang.String[] $r4;

        r0 := @this;

        $i0 := @parameter0;

        specialinvoke r0.<init>();

        r0.mCapacity = $i0;

        $i0 = $i0 + 1;

        $r1 = newarray (int)[$i0];

        r0.mBindingTypes = $r1;

        $r2 = newarray (long)[$i0];

        r0.mLongBindings = $r2;

        $r3 = newarray (double)[$i0];

        r0.mDoubleBindings = $r3;

        $r4 = newarray (java.lang.String)[$i0];

        r0.mStringBindings = $r4;

        $r5 = newarray (byte[])[$i0];

        r0.mBlobBindings = $r5;

        return;
    }

    public static androidx.room.RoomSQLiteQuery acquire(java.lang.String, int)
    {
        java.lang.Throwable r6;
        androidx.room.RoomSQLiteQuery r5;
        java.util.Map$Entry $r3;
        java.lang.Integer $r2;
        java.util.TreeMap r1;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r0;

        $r0 := @parameter0;

        $i0 := @parameter1;

        r1 = androidx.room.RoomSQLiteQuery.sQueryPool;

        entermonitor r1;

     label1:
        $r2 = java.lang.Integer.valueOf($i0);

        $r3 = virtualinvoke r1.ceilingEntry($r2);

        if $r3 == null goto label3;

        $r4 = interfaceinvoke $r3.getKey();

        virtualinvoke r1.remove($r4);

        $r4 = interfaceinvoke $r3.getValue();

        r5 = (androidx.room.RoomSQLiteQuery) $r4;

        virtualinvoke r5.init($r0, $i0);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        exitmonitor r1;

     label4:
        r5 = new androidx.room.RoomSQLiteQuery;

        specialinvoke r5.<init>($i0);

        virtualinvoke r5.init($r0, $i0);

        return r5;

     label5:
        r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static androidx.room.RoomSQLiteQuery copyFrom(androidx.sqlite.db.SupportSQLiteQuery)
    {
        androidx.room.RoomSQLiteQuery $r2;
        androidx.sqlite.db.SupportSQLiteQuery $r0;
        androidx.room.RoomSQLiteQuery$1 $r3;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0;

        $r1 = interfaceinvoke $r0.getSql();

        $i0 = interfaceinvoke $r0.getArgCount();

        $r2 = androidx.room.RoomSQLiteQuery.acquire($r1, $i0);

        $r3 = new androidx.room.RoomSQLiteQuery$1;

        specialinvoke $r3.<init>($r2);

        interfaceinvoke $r0.bindTo($r3);

        return $r2;
    }

    private static void prunePoolLocked()
    {
        java.util.TreeMap r0;
        java.util.Iterator $r2;
        int $i0, i1;
        java.util.NavigableSet $r1;

        r0 = androidx.room.RoomSQLiteQuery.sQueryPool;

        $i0 = virtualinvoke r0.size();

        if $i0 <= 15 goto label2;

        $i0 = virtualinvoke r0.size();

        i1 = -10;

        $i0 = $i0 + i1;

        $r1 = virtualinvoke r0.descendingKeySet();

        $r2 = interfaceinvoke $r1.iterator();

     label1:
        i1 = -1;

        if $i0 <= 0 goto label2;

        interfaceinvoke $r2.next();

        interfaceinvoke $r2.remove();

        $i0 = $i0 + i1;

        goto label1;

     label2:
        return;
    }

    public void bindBlob(int, byte[])
    {
        androidx.room.RoomSQLiteQuery r0;
        byte[] $r1;
        byte[][] $r3;
        int[] $r2;
        int $i0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 := @parameter1;

        $r2 = r0.mBindingTypes;

        $r2[$i0] = 5;

        $r3 = r0.mBlobBindings;

        $r3[$i0] = $r1;

        return;
    }

    public void bindDouble(int, double)
    {
        androidx.room.RoomSQLiteQuery r0;
        int[] $r1;
        int $i0;
        double[] $r2;
        double $d0;

        r0 := @this;

        $i0 := @parameter0;

        $d0 := @parameter1;

        $r1 = r0.mBindingTypes;

        $r1[$i0] = 3;

        $r2 = r0.mDoubleBindings;

        $r2[$i0] = $d0;

        return;
    }

    public void bindLong(int, long)
    {
        androidx.room.RoomSQLiteQuery r0;
        long[] $r2;
        int[] $r1;
        int $i0;
        long $l1;

        r0 := @this;

        $i0 := @parameter0;

        $l1 := @parameter1;

        $r1 = r0.mBindingTypes;

        $r1[$i0] = 2;

        $r2 = r0.mLongBindings;

        $r2[$i0] = $l1;

        return;
    }

    public void bindNull(int)
    {
        int $i0;
        androidx.room.RoomSQLiteQuery r0;
        int[] $r1;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mBindingTypes;

        $r1[$i0] = 1;

        return;
    }

    public void bindString(int, java.lang.String)
    {
        androidx.room.RoomSQLiteQuery r0;
        int[] $r2;
        int $i0;
        java.lang.String[] $r3;
        java.lang.String $r1;

        r0 := @this;

        $i0 := @parameter0;

        $r1 := @parameter1;

        $r2 = r0.mBindingTypes;

        $r2[$i0] = 4;

        $r3 = r0.mStringBindings;

        $r3[$i0] = $r1;

        return;
    }

    public void bindTo(androidx.sqlite.db.SupportSQLiteProgram)
    {
        androidx.room.RoomSQLiteQuery r0;
        byte[] $r4;
        double[] $r7;
        java.lang.String[] $r5;
        long $l2;
        androidx.sqlite.db.SupportSQLiteProgram $r1;
        byte[][] $r3;
        long[] $r8;
        int[] $r2;
        int i0, $i1;
        java.lang.String $r6;
        double $d0;

        r0 := @this;

        $r1 := @parameter0;

        i0 = 1;

     label1:
        $i1 = r0.mArgCount;

        if i0 > $i1 goto label9;

        $r2 = r0.mBindingTypes;

        $i1 = $r2[i0];

        lookupswitch($i1)
        {
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            default: goto label2;
        };

     label2:
        goto label8;

     label3:
        $r3 = r0.mBlobBindings;

        $r4 = $r3[i0];

        interfaceinvoke $r1.bindBlob(i0, $r4);

        goto label8;

     label4:
        $r5 = r0.mStringBindings;

        $r6 = $r5[i0];

        interfaceinvoke $r1.bindString(i0, $r6);

        goto label8;

     label5:
        $r7 = r0.mDoubleBindings;

        $d0 = $r7[i0];

        interfaceinvoke $r1.bindDouble(i0, $d0);

        goto label8;

     label6:
        $r8 = r0.mLongBindings;

        $l2 = $r8[i0];

        interfaceinvoke $r1.bindLong(i0, $l2);

        goto label8;

     label7:
        interfaceinvoke $r1.bindNull(i0);

     label8:
        i0 = i0 + 1;

        goto label1;

     label9:
        return;
    }

    public void clearBindings()
    {
        androidx.room.RoomSQLiteQuery r0;
        byte[][] $r3;
        int[] $r1;
        java.lang.String[] $r2;

        r0 := @this;

        $r1 = r0.mBindingTypes;

        java.util.Arrays.fill($r1, 1);

        $r2 = r0.mStringBindings;

        java.util.Arrays.fill($r2, null);

        $r3 = r0.mBlobBindings;

        java.util.Arrays.fill($r3, null);

        r0.mQuery = null;

        return;
    }

    public void close()
    {
        androidx.room.RoomSQLiteQuery r0;

        r0 := @this;

        return;
    }

    public void copyArgumentsFrom(androidx.room.RoomSQLiteQuery)
    {
        androidx.room.RoomSQLiteQuery r0, $r1;
        double[] $r10, $r11;
        java.lang.String[] $r6, $r7;
        byte[][] $r8, $r9;
        long[] $r4, $r5;
        int[] $r2, $r3;
        int $i0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 = virtualinvoke $r1.getArgCount();

        $i0 = $i0 + 1;

        $r2 = $r1.mBindingTypes;

        $r3 = r0.mBindingTypes;

        java.lang.System.arraycopy($r2, 0, $r3, 0, $i0);

        $r4 = $r1.mLongBindings;

        $r5 = r0.mLongBindings;

        java.lang.System.arraycopy($r4, 0, $r5, 0, $i0);

        $r6 = $r1.mStringBindings;

        $r7 = r0.mStringBindings;

        java.lang.System.arraycopy($r6, 0, $r7, 0, $i0);

        $r8 = $r1.mBlobBindings;

        $r9 = r0.mBlobBindings;

        java.lang.System.arraycopy($r8, 0, $r9, 0, $i0);

        $r10 = $r1.mDoubleBindings;

        $r11 = r0.mDoubleBindings;

        java.lang.System.arraycopy($r10, 0, $r11, 0, $i0);

        return;
    }

    public int getArgCount()
    {
        int i0;
        androidx.room.RoomSQLiteQuery r0;

        r0 := @this;

        i0 = r0.mArgCount;

        return i0;
    }

    public java.lang.String getSql()
    {
        androidx.room.RoomSQLiteQuery r0;
        java.lang.String r1;

        r0 := @this;

        r1 = r0.mQuery;

        return r1;
    }

    void init(java.lang.String, int)
    {
        int $i0;
        androidx.room.RoomSQLiteQuery r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        r0.mQuery = $r1;

        r0.mArgCount = $i0;

        return;
    }

    public void release()
    {
        java.lang.Throwable $r3;
        androidx.room.RoomSQLiteQuery r0;
        java.util.TreeMap $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @this;

        $r1 = androidx.room.RoomSQLiteQuery.sQueryPool;

        entermonitor $r1;

     label1:
        $i0 = r0.mCapacity;

        $r2 = java.lang.Integer.valueOf($i0);

        virtualinvoke $r1.put($r2, r0);

        androidx.room.RoomSQLiteQuery.prunePoolLocked();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
