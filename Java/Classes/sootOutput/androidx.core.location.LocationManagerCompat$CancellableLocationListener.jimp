final class androidx.core.location.LocationManagerCompat$CancellableLocationListener extends java.lang.Object implements android.location.LocationListener
{
    private androidx.core.util.Consumer mConsumer;
    private final java.util.concurrent.Executor mExecutor;
    private final android.location.LocationManager mLocationManager;
    private final android.os.Handler mTimeoutHandler;
    java.lang.Runnable mTimeoutRunnable;
    private boolean mTriggered;

    void <init>(android.location.LocationManager, java.util.concurrent.Executor, androidx.core.util.Consumer)
    {
        androidx.core.util.Consumer r3;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;
        java.util.concurrent.Executor $r2;
        android.os.Handler $r4;
        android.os.Looper $r5;
        android.location.LocationManager $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        r3 := @parameter2;

        specialinvoke r0.<init>();

        r0.mLocationManager = $r1;

        r0.mExecutor = $r2;

        $r4 = new android.os.Handler;

        $r5 = android.os.Looper.getMainLooper();

        specialinvoke $r4.<init>($r5);

        r0.mTimeoutHandler = $r4;

        r0.mConsumer = r3;

        return;
    }

    private void cleanup()
    {
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;
        android.os.Handler $r1;
        android.location.LocationManager $r2;
        java.lang.Runnable $r3;

        r0 := @this;

        r0.mConsumer = null;

        $r2 = r0.mLocationManager;

        virtualinvoke $r2.removeUpdates(r0);

        $r3 = r0.mTimeoutRunnable;

        if $r3 == null goto label1;

        $r1 = r0.mTimeoutHandler;

        virtualinvoke $r1.removeCallbacks($r3);

        r0.mTimeoutRunnable = null;

     label1:
        return;
    }

    public void cancel()
    {
        java.lang.Throwable $r1;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;
        boolean $z0;

        r0 := @this;

        entermonitor r0;

     label1:
        $z0 = r0.mTriggered;

        if $z0 == 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        r0.mTriggered = 1;

        exitmonitor r0;

     label4:
        specialinvoke r0.cleanup();

        return;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onLocationChanged(android.location.Location)
    {
        androidx.core.util.Consumer r4;
        java.lang.Throwable r5;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;
        java.util.concurrent.Executor $r2;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener$2 $r3;
        android.location.Location $r1;
        boolean z0;

        r0 := @this;

        $r1 := @parameter0;

        entermonitor r0;

     label1:
        z0 = r0.mTriggered;

        if z0 == 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        r0.mTriggered = 1;

        exitmonitor r0;

     label4:
        r4 = r0.mConsumer;

        $r2 = r0.mExecutor;

        $r3 = new androidx.core.location.LocationManagerCompat$CancellableLocationListener$2;

        specialinvoke $r3.<init>(r0, r4, $r1);

        interfaceinvoke $r2.execute($r3);

        specialinvoke r0.cleanup();

        return;

     label5:
        r5 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onProviderDisabled(java.lang.String)
    {
        java.lang.String $r1;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;

        r0 := @this;

        $r1 := @parameter0;

        virtualinvoke r0.onLocationChanged(null);

        return;
    }

    public void onProviderEnabled(java.lang.String)
    {
        java.lang.String $r1;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;

        r0 := @this;

        $r1 := @parameter0;

        return;
    }

    public void onStatusChanged(java.lang.String, int, android.os.Bundle)
    {
        android.os.Bundle $r2;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r2 := @parameter2;

        return;
    }

    public void startTimeout(long)
    {
        java.lang.Throwable $r3;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener r0;
        android.os.Handler $r1;
        long $l0;
        androidx.core.location.LocationManagerCompat$CancellableLocationListener$1 $r2;
        boolean $z0;

        r0 := @this;

        $l0 := @parameter0;

        entermonitor r0;

     label1:
        $z0 = r0.mTriggered;

        if $z0 == 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 = new androidx.core.location.LocationManagerCompat$CancellableLocationListener$1;

        specialinvoke $r2.<init>(r0);

        r0.mTimeoutRunnable = $r2;

        $r1 = r0.mTimeoutHandler;

        virtualinvoke $r1.postDelayed($r2, $l0);

        exitmonitor r0;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
