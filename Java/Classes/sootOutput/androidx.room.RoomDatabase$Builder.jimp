public class androidx.room.RoomDatabase$Builder extends java.lang.Object
{
    private boolean mAllowDestructiveMigrationOnDowngrade;
    private boolean mAllowMainThreadQueries;
    private java.util.ArrayList mCallbacks;
    private final android.content.Context mContext;
    private java.lang.String mCopyFromAssetPath;
    private java.io.File mCopyFromFile;
    private final java.lang.Class mDatabaseClass;
    private androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mFactory;
    private androidx.room.RoomDatabase$JournalMode mJournalMode;
    private final androidx.room.RoomDatabase$MigrationContainer mMigrationContainer;
    private java.util.Set mMigrationStartAndEndVersions;
    private java.util.Set mMigrationsNotRequiredFrom;
    private boolean mMultiInstanceInvalidation;
    private final java.lang.String mName;
    private java.util.concurrent.Executor mQueryExecutor;
    private boolean mRequireMigration;
    private java.util.concurrent.Executor mTransactionExecutor;

    void <init>(android.content.Context, java.lang.Class, java.lang.String)
    {
        android.content.Context $r1;
        androidx.room.RoomDatabase$JournalMode $r4;
        androidx.room.RoomDatabase$Builder r0;
        androidx.room.RoomDatabase$MigrationContainer $r5;
        java.lang.Class r2;
        java.lang.String $r3;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        $r3 := @parameter2;

        specialinvoke r0.<init>();

        r0.mContext = $r1;

        r0.mDatabaseClass = r2;

        r0.mName = $r3;

        $r4 = androidx.room.RoomDatabase$JournalMode.AUTOMATIC;

        r0.mJournalMode = $r4;

        r0.mRequireMigration = 1;

        $r5 = new androidx.room.RoomDatabase$MigrationContainer;

        specialinvoke $r5.<init>();

        r0.mMigrationContainer = $r5;

        return;
    }

    public androidx.room.RoomDatabase$Builder addCallback(androidx.room.RoomDatabase$Callback)
    {
        androidx.room.RoomDatabase$Builder r0;
        androidx.room.RoomDatabase$Callback $r1;
        java.util.ArrayList $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mCallbacks;

        if $r2 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<init>();

        r0.mCallbacks = $r2;

     label1:
        $r2 = r0.mCallbacks;

        virtualinvoke $r2.add($r1);

        return r0;
    }

    public transient androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])
    {
        androidx.room.RoomDatabase$Builder r0;
        java.util.Set $r3;
        androidx.room.migration.Migration[] $r1;
        java.lang.Integer $r5;
        java.util.HashSet $r4;
        int $i0, $i1, $i2;
        androidx.room.RoomDatabase$MigrationContainer $r6;
        androidx.room.migration.Migration r2;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mMigrationStartAndEndVersions;

        if $r3 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<init>();

        r0.mMigrationStartAndEndVersions = $r4;

     label1:
        $i0 = lengthof $r1;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        r2 = $r1[$i1];

        $r3 = r0.mMigrationStartAndEndVersions;

        $i2 = r2.startVersion;

        $r5 = java.lang.Integer.valueOf($i2);

        interfaceinvoke $r3.add($r5);

        $r3 = r0.mMigrationStartAndEndVersions;

        $i2 = r2.endVersion;

        $r5 = java.lang.Integer.valueOf($i2);

        interfaceinvoke $r3.add($r5);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r6 = r0.mMigrationContainer;

        virtualinvoke $r6.addMigrations($r1);

        return r0;
    }

    public androidx.room.RoomDatabase$Builder allowMainThreadQueries()
    {
        androidx.room.RoomDatabase$Builder r0;

        r0 := @this;

        r0.mAllowMainThreadQueries = 1;

        return r0;
    }

    public androidx.room.RoomDatabase build()
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r3;
        android.content.Context $r1;
        androidx.room.SQLiteCopyOpenHelperFactory r19;
        androidx.room.RoomDatabase$Builder r0;
        java.lang.Integer r13;
        java.util.ArrayList $r5;
        androidx.room.RoomDatabase$JournalMode r21;
        androidx.room.DatabaseConfiguration r20;
        androidx.room.RoomDatabase$MigrationContainer $r4;
        java.lang.String $r2, r18;
        boolean $z0, $z1, z2, $z3;
        java.util.Iterator $r11;
        androidx.room.RoomDatabase r22;
        java.util.concurrent.Executor $r6, $r7;
        java.util.Set r9, r10;
        java.lang.IllegalArgumentException r14;
        java.io.File r17;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory r16;
        java.lang.Class r8;
        java.lang.Object $r12;
        java.lang.StringBuilder $r15;

        r0 := @this;

        $r1 = r0.mContext;

        if $r1 == null goto label14;

        r8 = r0.mDatabaseClass;

        if r8 == null goto label13;

        $r6 = r0.mQueryExecutor;

        if $r6 != null goto label01;

        $r7 = r0.mTransactionExecutor;

        if $r7 != null goto label01;

        $r6 = androidx.arch.core.executor.ArchTaskExecutor.getIOThreadExecutor();

        r0.mTransactionExecutor = $r6;

        r0.mQueryExecutor = $r6;

        goto label03;

     label01:
        if $r6 == null goto label02;

        $r7 = r0.mTransactionExecutor;

        if $r7 != null goto label02;

        r0.mTransactionExecutor = $r6;

        goto label03;

     label02:
        if $r6 != null goto label03;

        $r6 = r0.mTransactionExecutor;

        if $r6 == null goto label03;

        r0.mQueryExecutor = $r6;

     label03:
        r9 = r0.mMigrationStartAndEndVersions;

        if r9 == null goto label06;

        r10 = r0.mMigrationsNotRequiredFrom;

        if r10 == null goto label06;

        $r11 = interfaceinvoke r9.iterator();

     label04:
        $z0 = interfaceinvoke $r11.hasNext();

        if $z0 == 0 goto label06;

        $r12 = interfaceinvoke $r11.next();

        r13 = (java.lang.Integer) $r12;

        r9 = r0.mMigrationsNotRequiredFrom;

        $z0 = interfaceinvoke r9.contains(r13);

        if $z0 != 0 goto label05;

        goto label04;

     label05:
        r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r15 = virtualinvoke $r15.append("Inconsistency detected. A Migration was supplied to addMigration(Migration... migrations) that has a start or end version equal to a start version supplied to fallbackToDestructiveMigrationFrom(int... startVersions). Start version: ");

        $r15 = virtualinvoke $r15.append(r13);

        $r2 = virtualinvoke $r15.toString();

        specialinvoke r14.<init>($r2);

        throw r14;

     label06:
        $r3 = r0.mFactory;

        if $r3 != null goto label07;

        r16 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory;

        specialinvoke r16.<init>();

        r0.mFactory = r16;

     label07:
        $r2 = r0.mCopyFromAssetPath;

        if $r2 != null goto label08;

        r17 = r0.mCopyFromFile;

        if r17 == null goto label11;

     label08:
        r18 = r0.mName;

        if r18 == null goto label12;

        if $r2 == null goto label10;

        r17 = r0.mCopyFromFile;

        if r17 != null goto label09;

        goto label10;

     label09:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<init>("Both createFromAsset() and createFromFile() was called on this Builder but the database can only be created using one of the two configurations.");

        throw r14;

     label10:
        r19 = new androidx.room.SQLiteCopyOpenHelperFactory;

        r17 = r0.mCopyFromFile;

        $r3 = r0.mFactory;

        specialinvoke r19.<init>($r2, r17, $r3);

        r0.mFactory = r19;

     label11:
        r20 = new androidx.room.DatabaseConfiguration;

        $r1 = r0.mContext;

        $r2 = r0.mName;

        $r3 = r0.mFactory;

        $r4 = r0.mMigrationContainer;

        $r5 = r0.mCallbacks;

        $z0 = r0.mAllowMainThreadQueries;

        r21 = r0.mJournalMode;

        r21 = virtualinvoke r21.resolve($r1);

        $r6 = r0.mQueryExecutor;

        $r7 = r0.mTransactionExecutor;

        $z1 = r0.mMultiInstanceInvalidation;

        z2 = r0.mRequireMigration;

        $z3 = r0.mAllowDestructiveMigrationOnDowngrade;

        r9 = r0.mMigrationsNotRequiredFrom;

        r18 = r0.mCopyFromAssetPath;

        r17 = r0.mCopyFromFile;

        specialinvoke r20.<init>($r1, $r2, $r3, $r4, $r5, $z0, r21, $r6, $r7, $z1, z2, $z3, r9, r18, r17);

        r8 = r0.mDatabaseClass;

        $r12 = androidx.room.Room.getGeneratedImplementation(r8, "_Impl");

        r22 = (androidx.room.RoomDatabase) $r12;

        virtualinvoke r22.init(r20);

        return r22;

     label12:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<init>("Cannot create from asset or file for an in-memory database.");

        throw r14;

     label13:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<init>("Must provide an abstract class that extends RoomDatabase");

        throw r14;

     label14:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<init>("Cannot provide null context for the database.");

        goto label15;

     label15:
        throw r14;
    }

    public androidx.room.RoomDatabase$Builder createFromAsset(java.lang.String)
    {
        androidx.room.RoomDatabase$Builder r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mCopyFromAssetPath = $r1;

        return r0;
    }

    public androidx.room.RoomDatabase$Builder createFromFile(java.io.File)
    {
        androidx.room.RoomDatabase$Builder r0;
        java.io.File $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mCopyFromFile = $r1;

        return r0;
    }

    public androidx.room.RoomDatabase$Builder enableMultiInstanceInvalidation()
    {
        androidx.room.RoomDatabase$Builder r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mName;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.mMultiInstanceInvalidation = $z0;

        return r0;
    }

    public androidx.room.RoomDatabase$Builder fallbackToDestructiveMigration()
    {
        androidx.room.RoomDatabase$Builder r0;

        r0 := @this;

        r0.mRequireMigration = 0;

        r0.mAllowDestructiveMigrationOnDowngrade = 1;

        return r0;
    }

    public transient androidx.room.RoomDatabase$Builder fallbackToDestructiveMigrationFrom(int[])
    {
        androidx.room.RoomDatabase$Builder r0;
        java.util.Set $r2;
        java.lang.Integer $r3;
        java.util.HashSet $r4;
        int[] $r1;
        int i0, $i1, $i2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mMigrationsNotRequiredFrom;

        if $r2 != null goto label1;

        $r4 = new java.util.HashSet;

        i0 = lengthof $r1;

        specialinvoke $r4.<init>(i0);

        r0.mMigrationsNotRequiredFrom = $r4;

     label1:
        $i1 = lengthof $r1;

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        i0 = $r1[$i2];

        $r2 = r0.mMigrationsNotRequiredFrom;

        $r3 = java.lang.Integer.valueOf(i0);

        interfaceinvoke $r2.add($r3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return r0;
    }

    public androidx.room.RoomDatabase$Builder fallbackToDestructiveMigrationOnDowngrade()
    {
        androidx.room.RoomDatabase$Builder r0;

        r0 := @this;

        r0.mRequireMigration = 1;

        r0.mAllowDestructiveMigrationOnDowngrade = 1;

        return r0;
    }

    public androidx.room.RoomDatabase$Builder openHelperFactory(androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)
    {
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r1;
        androidx.room.RoomDatabase$Builder r0;

        r0 := @this;

        $r1 := @parameter0;

        r0.mFactory = $r1;

        return r0;
    }

    public androidx.room.RoomDatabase$Builder setJournalMode(androidx.room.RoomDatabase$JournalMode)
    {
        androidx.room.RoomDatabase$Builder r0;
        androidx.room.RoomDatabase$JournalMode $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mJournalMode = $r1;

        return r0;
    }

    public androidx.room.RoomDatabase$Builder setQueryExecutor(java.util.concurrent.Executor)
    {
        androidx.room.RoomDatabase$Builder r0;
        java.util.concurrent.Executor $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mQueryExecutor = $r1;

        return r0;
    }

    public androidx.room.RoomDatabase$Builder setTransactionExecutor(java.util.concurrent.Executor)
    {
        androidx.room.RoomDatabase$Builder r0;
        java.util.concurrent.Executor $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mTransactionExecutor = $r1;

        return r0;
    }
}
