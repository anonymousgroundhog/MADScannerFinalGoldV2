public final class androidx.sqlite.db.SupportSQLiteQueryBuilder extends java.lang.Object
{
    private static final java.util.regex.Pattern sLimitPattern;
    private java.lang.Object[] mBindArgs;
    private java.lang.String[] mColumns;
    private boolean mDistinct;
    private java.lang.String mGroupBy;
    private java.lang.String mHaving;
    private java.lang.String mLimit;
    private java.lang.String mOrderBy;
    private java.lang.String mSelection;
    private final java.lang.String mTable;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = java.util.regex.Pattern.compile("\\s*\\d+\\s*(,\\s*\\d+\\s*)?");

        androidx.sqlite.db.SupportSQLiteQueryBuilder.sLimitPattern = $r0;

        return;
    }

    private void <init>(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mDistinct = 0;

        r0.mColumns = null;

        r0.mGroupBy = null;

        r0.mHaving = null;

        r0.mOrderBy = null;

        r0.mLimit = null;

        r0.mTable = $r1;

        return;
    }

    private static void appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $z0 = androidx.sqlite.db.SupportSQLiteQueryBuilder.isEmpty($r2);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.append($r1);

        virtualinvoke $r0.append($r2);

     label1:
        return;
    }

    private static void appendColumns(java.lang.StringBuilder, java.lang.String[])
    {
        int i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.String[] $r1;
        java.lang.String r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if i1 <= 0 goto label2;

        virtualinvoke $r0.append(", ");

     label2:
        virtualinvoke $r0.append(r2);

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.append(32);

        return;
    }

    public static androidx.sqlite.db.SupportSQLiteQueryBuilder builder(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder $r1;
        java.lang.String $r0;

        $r0 := @parameter0;

        $r1 = new androidx.sqlite.db.SupportSQLiteQueryBuilder;

        specialinvoke $r1.<init>($r0);

        return $r1;
    }

    private static boolean isEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;

        $r0 := @parameter0;

        if $r0 == null goto label2;

        $i0 = virtualinvoke $r0.length();

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public androidx.sqlite.db.SupportSQLiteQueryBuilder columns(java.lang.String[])
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String[] $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mColumns = $r1;

        return r0;
    }

    public androidx.sqlite.db.SupportSQLiteQuery create()
    {
        java.lang.Object[] $r1;
        java.lang.String[] $r5;
        java.lang.IllegalArgumentException r3;
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        int $i0;
        java.lang.StringBuilder r4;
        java.lang.String r2;
        boolean $z0;
        androidx.sqlite.db.SimpleSQLiteQuery $r6;

        r0 := @this;

        r2 = r0.mGroupBy;

        $z0 = androidx.sqlite.db.SupportSQLiteQueryBuilder.isEmpty(r2);

        if $z0 == 0 goto label2;

        r2 = r0.mHaving;

        $z0 = androidx.sqlite.db.SupportSQLiteQueryBuilder.isEmpty(r2);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r3 = new java.lang.IllegalArgumentException;

        specialinvoke r3.<init>("HAVING clauses are only permitted when using a groupBy clause");

        throw r3;

     label2:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<init>(120);

        virtualinvoke r4.append("SELECT ");

        $z0 = r0.mDistinct;

        if $z0 == 0 goto label3;

        virtualinvoke r4.append("DISTINCT ");

     label3:
        $r5 = r0.mColumns;

        if $r5 == null goto label4;

        $i0 = lengthof $r5;

        if $i0 == 0 goto label4;

        androidx.sqlite.db.SupportSQLiteQueryBuilder.appendColumns(r4, $r5);

        goto label5;

     label4:
        virtualinvoke r4.append(" * ");

     label5:
        virtualinvoke r4.append(" FROM ");

        r2 = r0.mTable;

        virtualinvoke r4.append(r2);

        r2 = r0.mSelection;

        androidx.sqlite.db.SupportSQLiteQueryBuilder.appendClause(r4, " WHERE ", r2);

        r2 = r0.mGroupBy;

        androidx.sqlite.db.SupportSQLiteQueryBuilder.appendClause(r4, " GROUP BY ", r2);

        r2 = r0.mHaving;

        androidx.sqlite.db.SupportSQLiteQueryBuilder.appendClause(r4, " HAVING ", r2);

        r2 = r0.mOrderBy;

        androidx.sqlite.db.SupportSQLiteQueryBuilder.appendClause(r4, " ORDER BY ", r2);

        r2 = r0.mLimit;

        androidx.sqlite.db.SupportSQLiteQueryBuilder.appendClause(r4, " LIMIT ", r2);

        $r6 = new androidx.sqlite.db.SimpleSQLiteQuery;

        r2 = virtualinvoke r4.toString();

        $r1 = r0.mBindArgs;

        specialinvoke $r6.<init>(r2, $r1);

        return $r6;
    }

    public androidx.sqlite.db.SupportSQLiteQueryBuilder distinct()
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;

        r0 := @this;

        r0.mDistinct = 1;

        return r0;
    }

    public androidx.sqlite.db.SupportSQLiteQueryBuilder groupBy(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mGroupBy = $r1;

        return r0;
    }

    public androidx.sqlite.db.SupportSQLiteQueryBuilder having(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mHaving = $r1;

        return r0;
    }

    public androidx.sqlite.db.SupportSQLiteQueryBuilder limit(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.util.regex.Matcher $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = androidx.sqlite.db.SupportSQLiteQueryBuilder.isEmpty($r1);

        if $z0 != 0 goto label2;

        $r2 = androidx.sqlite.db.SupportSQLiteQueryBuilder.sLimitPattern;

        $r3 = virtualinvoke $r2.matcher($r1);

        $z0 = virtualinvoke $r3.matches();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r5 = virtualinvoke $r5.append("invalid LIMIT clauses:");

        $r5 = virtualinvoke $r5.append($r1);

        $r1 = virtualinvoke $r5.toString();

        specialinvoke $r4.<init>($r1);

        throw $r4;

     label2:
        r0.mLimit = $r1;

        return r0;
    }

    public androidx.sqlite.db.SupportSQLiteQueryBuilder orderBy(java.lang.String)
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mOrderBy = $r1;

        return r0;
    }

    public androidx.sqlite.db.SupportSQLiteQueryBuilder selection(java.lang.String, java.lang.Object[])
    {
        androidx.sqlite.db.SupportSQLiteQueryBuilder r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        r0.mSelection = $r1;

        r0.mBindArgs = $r2;

        return r0;
    }
}
