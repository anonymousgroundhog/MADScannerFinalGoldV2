class androidx.core.graphics.drawable.WrappedDrawableApi14 extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback, androidx.core.graphics.drawable.WrappedDrawable, androidx.core.graphics.drawable.TintAwareDrawable
{
    static final android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;
    private boolean mColorFilterSet;
    private int mCurrentColor;
    private android.graphics.PorterDuff$Mode mCurrentMode;
    android.graphics.drawable.Drawable mDrawable;
    private boolean mMutated;
    androidx.core.graphics.drawable.WrappedDrawableState mState;

    static void <clinit>()
    {
        android.graphics.PorterDuff$Mode $r0;

        $r0 = android.graphics.PorterDuff$Mode.SRC_IN;

        androidx.core.graphics.drawable.WrappedDrawableApi14.DEFAULT_TINT_MODE = $r0;

        return;
    }

    void <init>(android.graphics.drawable.Drawable)
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        $r2 = specialinvoke r0.mutateConstantState();

        r0.mState = $r2;

        virtualinvoke r0.setWrappedDrawable($r1);

        return;
    }

    void <init>(androidx.core.graphics.drawable.WrappedDrawableState, android.content.res.Resources)
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.content.res.Resources $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        specialinvoke r0.<init>();

        r0.mState = $r1;

        specialinvoke r0.updateLocalState($r2);

        return;
    }

    private androidx.core.graphics.drawable.WrappedDrawableState mutateConstantState()
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r1, $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = new androidx.core.graphics.drawable.WrappedDrawableState;

        $r2 = r0.mState;

        specialinvoke $r1.<init>($r2);

        return $r1;
    }

    private void updateLocalState(android.content.res.Resources)
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r3;
        android.graphics.drawable.Drawable$ConstantState $r4;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.drawable.Drawable $r2;
        android.content.res.Resources $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mState;

        if $r3 == null goto label1;

        $r4 = $r3.mDrawableState;

        if $r4 == null goto label1;

        $r3 = r0.mState;

        $r4 = $r3.mDrawableState;

        $r2 = virtualinvoke $r4.newDrawable($r1);

        virtualinvoke r0.setWrappedDrawable($r2);

     label1:
        return;
    }

    private boolean updateTint(int[])
    {
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.PorterDuff$Mode r4, $r5;
        android.content.res.ColorStateList r3;
        androidx.core.graphics.drawable.WrappedDrawableState r2;
        int[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = virtualinvoke r0.isCompatTintEnabled();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = r0.mState;

        r3 = r2.mTint;

        r2 = r0.mState;

        r4 = r2.mTintMode;

        if r3 == null goto label4;

        if r4 == null goto label4;

        $i0 = virtualinvoke r3.getDefaultColor();

        $i0 = virtualinvoke r3.getColorForState($r1, $i0);

        $z0 = r0.mColorFilterSet;

        if $z0 == 0 goto label3;

        $i1 = r0.mCurrentColor;

        if $i0 != $i1 goto label3;

        $r5 = r0.mCurrentMode;

        if r4 == $r5 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        virtualinvoke r0.setColorFilter($i0, r4);

        r0.mCurrentColor = $i0;

        r0.mCurrentMode = r4;

        r0.mColorFilterSet = 1;

        return 1;

     label4:
        r0.mColorFilterSet = 0;

        virtualinvoke r0.clearColorFilter();

        return 0;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.Canvas $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        virtualinvoke $r2.draw($r1);

        return;
    }

    public int getChangingConfigurations()
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        int $i0, $i1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $i0 = specialinvoke r0.getChangingConfigurations();

        $r1 = r0.mState;

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.getChangingConfigurations();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $i0 = $i0 | $i1;

        $r2 = r0.mDrawable;

        $i1 = virtualinvoke $r2.getChangingConfigurations();

        $i0 = $i0 | $i1;

        return $i0;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        int $i0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mState;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.canConstantState();

        if $z0 == 0 goto label1;

        $r1 = r0.mState;

        $i0 = virtualinvoke r0.getChangingConfigurations();

        $r1.mChangingConfigurations = $i0;

        $r1 = r0.mState;

        return $r1;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $r1 = virtualinvoke $r1.getCurrent();

        return $r1;
    }

    public int getIntrinsicHeight()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getIntrinsicHeight();

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getIntrinsicWidth();

        return $i0;
    }

    public int getLayoutDirection()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = androidx.core.graphics.drawable.DrawableCompat.getLayoutDirection($r1);

        return $i0;
    }

    public int getMinimumHeight()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getMinimumHeight();

        return $i0;
    }

    public int getMinimumWidth()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getMinimumWidth();

        return $i0;
    }

    public int getOpacity()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getOpacity();

        return $i0;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        $z0 = virtualinvoke $r2.getPadding($r1);

        return $z0;
    }

    public int[] getState()
    {
        int[] $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r2 = r0.mDrawable;

        $r1 = virtualinvoke $r2.getState();

        return $r1;
    }

    public android.graphics.Region getTransparentRegion()
    {
        android.graphics.Region $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r2 = r0.mDrawable;

        $r1 = virtualinvoke $r2.getTransparentRegion();

        return $r1;
    }

    public final android.graphics.drawable.Drawable getWrappedDrawable()
    {
        android.graphics.drawable.Drawable r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        r1 = r0.mDrawable;

        return r1;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 := @parameter0;

        virtualinvoke r0.invalidateSelf();

        return;
    }

    public boolean isAutoMirrored()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $z0 = androidx.core.graphics.drawable.DrawableCompat.isAutoMirrored($r1);

        return $z0;
    }

    protected boolean isCompatTintEnabled()
    {
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        return 1;
    }

    public boolean isStateful()
    {
        android.content.res.ColorStateList r2;
        androidx.core.graphics.drawable.WrappedDrawableState r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.drawable.Drawable $r3;
        boolean $z0;

        r0 := @this;

        $z0 = virtualinvoke r0.isCompatTintEnabled();

        if $z0 == 0 goto label1;

        r1 = r0.mState;

        if r1 == null goto label1;

        r2 = r1.mTint;

        goto label2;

     label1:
        r2 = null;

     label2:
        if r2 == null goto label3;

        $z0 = virtualinvoke r2.isStateful();

        if $z0 != 0 goto label4;

     label3:
        $r3 = r0.mDrawable;

        $z0 = virtualinvoke $r3.isStateful();

        if $z0 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.jumpToCurrentState();

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r2;
        android.graphics.drawable.Drawable$ConstantState $r3;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        $z0 = r0.mMutated;

        if $z0 != 0 goto label5;

        $r1 = specialinvoke r0.mutate();

        if $r1 != r0 goto label5;

        $r2 = specialinvoke r0.mutateConstantState();

        r0.mState = $r2;

        $r1 = r0.mDrawable;

        if $r1 == null goto label1;

        virtualinvoke $r1.mutate();

     label1:
        $r2 = r0.mState;

        if $r2 == null goto label4;

        $r1 = r0.mDrawable;

        if $r1 == null goto label2;

        $r3 = virtualinvoke $r1.getConstantState();

        goto label3;

     label2:
        $r3 = null;

     label3:
        $r2.mDrawableState = $r3;

     label4:
        r0.mMutated = 1;

     label5:
        return r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.setBounds($r1);

     label1:
        return;
    }

    public boolean onLayoutDirectionChanged(int)
    {
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        $z0 = androidx.core.graphics.drawable.DrawableCompat.setLayoutDirection($r1, $i0);

        return $z0;
    }

    protected boolean onLevelChange(int)
    {
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        $z0 = virtualinvoke $r1.setLevel($i0);

        return $z0;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        long $l0;
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $l0 := @parameter2;

        virtualinvoke r0.scheduleSelf($r2, $l0);

        return;
    }

    public void setAlpha(int)
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setAlpha($i0);

        return;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored($r1, $z0);

        return;
    }

    public void setChangingConfigurations(int)
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setChangingConfigurations($i0);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.ColorFilter $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        virtualinvoke $r2.setColorFilter($r1);

        return;
    }

    public void setDither(boolean)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setDither($z0);

        return;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setFilterBitmap($z0);

        return;
    }

    public boolean setState(int[])
    {
        int[] $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.drawable.Drawable r2;
        boolean $z0, $z1;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mDrawable;

        $z0 = virtualinvoke r2.setState($r1);

        $z1 = specialinvoke r0.updateTint($r1);

        if $z1 != 0 goto label2;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        return $z0;
    }

    public void setTint(int)
    {
        int $i0;
        android.content.res.ColorStateList $r1;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = android.content.res.ColorStateList.valueOf($i0);

        virtualinvoke r0.setTintList($r1);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        androidx.core.graphics.drawable.WrappedDrawableState $r3;
        int[] $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mState;

        $r3.mTint = $r1;

        $r2 = virtualinvoke r0.getState();

        specialinvoke r0.updateTint($r2);

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.core.graphics.drawable.WrappedDrawableState $r3;
        int[] $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mState;

        $r3.mTintMode = $r1;

        $r2 = virtualinvoke r0.getState();

        specialinvoke r0.updateTint($r2);

        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1, $z2;

        r0 := @this;

        $z0 := @parameter0;

        $z1 := @parameter1;

        $z2 = specialinvoke r0.setVisible($z0, $z1);

        if $z2 != 0 goto label2;

        $r1 = r0.mDrawable;

        $z0 = virtualinvoke $r1.setVisible($z0, $z1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public final void setWrappedDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.Rect $r4;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;
        android.graphics.drawable.Drawable $r1, $r2;
        androidx.core.graphics.drawable.WrappedDrawableState $r5;
        android.graphics.drawable.Drawable$ConstantState $r6;
        int[] $r3;
        int $i0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.setCallback(null);

     label1:
        r0.mDrawable = $r1;

        if $r1 == null goto label2;

        virtualinvoke $r1.setCallback(r0);

        $z0 = virtualinvoke $r1.isVisible();

        virtualinvoke r0.setVisible($z0, 1);

        $r3 = virtualinvoke $r1.getState();

        virtualinvoke r0.setState($r3);

        $i0 = virtualinvoke $r1.getLevel();

        virtualinvoke r0.setLevel($i0);

        $r4 = virtualinvoke $r1.getBounds();

        virtualinvoke r0.setBounds($r4);

        $r5 = r0.mState;

        if $r5 == null goto label2;

        $r6 = virtualinvoke $r1.getConstantState();

        $r5.mDrawableState = $r6;

     label2:
        virtualinvoke r0.invalidateSelf();

        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;
        androidx.core.graphics.drawable.WrappedDrawableApi14 r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        virtualinvoke r0.unscheduleSelf($r2);

        return;
    }
}
