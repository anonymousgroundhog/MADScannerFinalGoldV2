public class androidx.appcompat.graphics.drawable.DrawableWrapper extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback
{
    private android.graphics.drawable.Drawable mDrawable;

    public void <init>(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        virtualinvoke r0.setWrappedDrawable($r1);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.Canvas $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        virtualinvoke $r2.draw($r1);

        return;
    }

    public int getChangingConfigurations()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getChangingConfigurations();

        return $i0;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $r1 = virtualinvoke $r1.getCurrent();

        return $r1;
    }

    public int getIntrinsicHeight()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getIntrinsicHeight();

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getIntrinsicWidth();

        return $i0;
    }

    public int getMinimumHeight()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getMinimumHeight();

        return $i0;
    }

    public int getMinimumWidth()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getMinimumWidth();

        return $i0;
    }

    public int getOpacity()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $i0 = virtualinvoke $r1.getOpacity();

        return $i0;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        $z0 = virtualinvoke $r2.getPadding($r1);

        return $z0;
    }

    public int[] getState()
    {
        int[] $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r2 = r0.mDrawable;

        $r1 = virtualinvoke $r2.getState();

        return $r1;
    }

    public android.graphics.Region getTransparentRegion()
    {
        android.graphics.Region $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r2 = r0.mDrawable;

        $r1 = virtualinvoke $r2.getTransparentRegion();

        return $r1;
    }

    public android.graphics.drawable.Drawable getWrappedDrawable()
    {
        android.graphics.drawable.Drawable r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        r1 = r0.mDrawable;

        return r1;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        virtualinvoke r0.invalidateSelf();

        return;
    }

    public boolean isAutoMirrored()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $z0 = androidx.core.graphics.drawable.DrawableCompat.isAutoMirrored($r1);

        return $z0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDrawable;

        $z0 = virtualinvoke $r1.isStateful();

        return $z0;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.jumpToCurrentState();

        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        virtualinvoke $r2.setBounds($r1);

        return;
    }

    protected boolean onLevelChange(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        $z0 = virtualinvoke $r1.setLevel($i0);

        return $z0;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        long $l0;
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $l0 := @parameter2;

        virtualinvoke r0.scheduleSelf($r2, $l0);

        return;
    }

    public void setAlpha(int)
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setAlpha($i0);

        return;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored($r1, $z0);

        return;
    }

    public void setChangingConfigurations(int)
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setChangingConfigurations($i0);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.ColorFilter $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        virtualinvoke $r2.setColorFilter($r1);

        return;
    }

    public void setDither(boolean)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setDither($z0);

        return;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDrawable;

        virtualinvoke $r1.setFilterBitmap($z0);

        return;
    }

    public void setHotspot(float, float)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        float $f0, $f1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $r1 = r0.mDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setHotspot($r1, $f0, $f1);

        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable $r1;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $i2 := @parameter2;

        $i3 := @parameter3;

        $r1 = r0.mDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setHotspotBounds($r1, $i0, $i1, $i2, $i3);

        return;
    }

    public boolean setState(int[])
    {
        int[] $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        $z0 = virtualinvoke $r2.setState($r1);

        return $z0;
    }

    public void setTint(int)
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTint($r1, $i0);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTintList($r2, $r1);

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTintMode($r2, $r1);

        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1, $z2;

        r0 := @this;

        $z0 := @parameter0;

        $z1 := @parameter1;

        $z2 = specialinvoke r0.setVisible($z0, $z1);

        if $z2 != 0 goto label2;

        $r1 = r0.mDrawable;

        $z0 = virtualinvoke $r1.setVisible($z0, $z1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public void setWrappedDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r1, $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.setCallback(null);

     label1:
        r0.mDrawable = $r1;

        if $r1 == null goto label2;

        virtualinvoke $r1.setCallback(r0);

     label2:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;
        androidx.appcompat.graphics.drawable.DrawableWrapper r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        virtualinvoke r0.unscheduleSelf($r2);

        return;
    }
}
