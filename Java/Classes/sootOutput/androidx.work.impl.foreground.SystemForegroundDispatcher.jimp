public class androidx.work.impl.foreground.SystemForegroundDispatcher extends java.lang.Object implements androidx.work.impl.constraints.WorkConstraintsCallback, androidx.work.impl.ExecutionListener
{
    private static final java.lang.String ACTION_CANCEL_WORK;
    private static final java.lang.String ACTION_NOTIFY;
    private static final java.lang.String ACTION_START_FOREGROUND;
    private static final java.lang.String ACTION_STOP_FOREGROUND;
    private static final java.lang.String KEY_FOREGROUND_SERVICE_TYPE;
    private static final java.lang.String KEY_NOTIFICATION;
    private static final java.lang.String KEY_NOTIFICATION_ID;
    private static final java.lang.String KEY_WORKSPEC_ID;
    static final java.lang.String TAG;
    private androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback;
    final androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker;
    private android.content.Context mContext;
    java.lang.String mCurrentForegroundWorkSpecId;
    final java.util.Map mForegroundInfoById;
    final java.lang.Object mLock;
    private final androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor;
    final java.util.Set mTrackedWorkSpecs;
    private androidx.work.impl.WorkManagerImpl mWorkManagerImpl;
    final java.util.Map mWorkSpecById;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = androidx.work.Logger.tagWithPrefix("SystemFgDispatcher");

        androidx.work.impl.foreground.SystemForegroundDispatcher.TAG = $r0;

        return;
    }

    void <init>(android.content.Context)
    {
        android.content.Context $r1;
        java.util.HashMap $r7;
        androidx.work.impl.Processor $r9;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r4;
        java.util.LinkedHashMap $r5;
        java.util.HashSet $r6;
        androidx.work.impl.constraints.WorkConstraintsTracker $r8;
        java.lang.Object $r2;
        androidx.work.impl.WorkManagerImpl $r3;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mContext = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<init>();

        r0.mLock = $r2;

        $r1 = r0.mContext;

        $r3 = androidx.work.impl.WorkManagerImpl.getInstance($r1);

        r0.mWorkManagerImpl = $r3;

        $r4 = virtualinvoke $r3.getWorkTaskExecutor();

        r0.mTaskExecutor = $r4;

        r0.mCurrentForegroundWorkSpecId = null;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<init>();

        r0.mForegroundInfoById = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<init>();

        r0.mTrackedWorkSpecs = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<init>();

        r0.mWorkSpecById = $r7;

        $r8 = new androidx.work.impl.constraints.WorkConstraintsTracker;

        $r1 = r0.mContext;

        specialinvoke $r8.<init>($r1, $r4, r0);

        r0.mConstraintsTracker = $r8;

        $r3 = r0.mWorkManagerImpl;

        $r9 = virtualinvoke $r3.getProcessor();

        virtualinvoke $r9.addExecutionListener(r0);

        return;
    }

    void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl, androidx.work.impl.constraints.WorkConstraintsTracker)
    {
        android.content.Context $r1;
        java.util.HashMap $r8;
        androidx.work.impl.Processor $r9;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r5;
        java.util.LinkedHashMap $r6;
        java.util.HashSet $r7;
        androidx.work.impl.constraints.WorkConstraintsTracker $r3;
        androidx.work.impl.WorkManagerImpl $r2;
        java.lang.Object $r4;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        specialinvoke r0.<init>();

        r0.mContext = $r1;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<init>();

        r0.mLock = $r4;

        r0.mWorkManagerImpl = $r2;

        $r5 = virtualinvoke $r2.getWorkTaskExecutor();

        r0.mTaskExecutor = $r5;

        r0.mCurrentForegroundWorkSpecId = null;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<init>();

        r0.mForegroundInfoById = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<init>();

        r0.mTrackedWorkSpecs = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<init>();

        r0.mWorkSpecById = $r8;

        r0.mConstraintsTracker = $r3;

        $r2 = r0.mWorkManagerImpl;

        $r9 = virtualinvoke $r2.getProcessor();

        virtualinvoke $r9.addExecutionListener(r0);

        return;
    }

    public static android.content.Intent createCancelWorkIntent(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.Object[] $r3;
        android.net.Uri $r5;
        android.content.Intent r2;
        java.lang.String $r1, $r4;

        $r0 := @parameter0;

        $r1 := @parameter1;

        r2 = new android.content.Intent;

        specialinvoke r2.<init>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r2.setAction("ACTION_CANCEL_WORK");

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        $r4 = java.lang.String.format("workspec://%s", $r3);

        $r5 = android.net.Uri.parse($r4);

        virtualinvoke r2.setData($r5);

        virtualinvoke r2.putExtra("KEY_WORKSPEC_ID", $r1);

        return r2;
    }

    public static android.content.Intent createNotifyIntent(android.content.Context, java.lang.String, androidx.work.ForegroundInfo)
    {
        android.content.Context $r0;
        androidx.work.ForegroundInfo $r2;
        int $i0;
        android.app.Notification $r4;
        android.content.Intent r3;
        java.lang.String $r1;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        r3 = new android.content.Intent;

        specialinvoke r3.<init>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r3.setAction("ACTION_NOTIFY");

        $i0 = virtualinvoke $r2.getNotificationId();

        virtualinvoke r3.putExtra("KEY_NOTIFICATION_ID", $i0);

        $i0 = virtualinvoke $r2.getForegroundServiceType();

        virtualinvoke r3.putExtra("KEY_FOREGROUND_SERVICE_TYPE", $i0);

        $r4 = virtualinvoke $r2.getNotification();

        virtualinvoke r3.putExtra("KEY_NOTIFICATION", $r4);

        virtualinvoke r3.putExtra("KEY_WORKSPEC_ID", $r1);

        return r3;
    }

    public static android.content.Intent createStartForegroundIntent(android.content.Context, java.lang.String, androidx.work.ForegroundInfo)
    {
        android.content.Context $r0;
        androidx.work.ForegroundInfo $r2;
        int $i0;
        android.app.Notification $r4;
        android.content.Intent r3;
        java.lang.String $r1;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        r3 = new android.content.Intent;

        specialinvoke r3.<init>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r3.setAction("ACTION_START_FOREGROUND");

        virtualinvoke r3.putExtra("KEY_WORKSPEC_ID", $r1);

        $i0 = virtualinvoke $r2.getNotificationId();

        virtualinvoke r3.putExtra("KEY_NOTIFICATION_ID", $i0);

        $i0 = virtualinvoke $r2.getForegroundServiceType();

        virtualinvoke r3.putExtra("KEY_FOREGROUND_SERVICE_TYPE", $i0);

        $r4 = virtualinvoke $r2.getNotification();

        virtualinvoke r3.putExtra("KEY_NOTIFICATION", $r4);

        virtualinvoke r3.putExtra("KEY_WORKSPEC_ID", $r1);

        return r3;
    }

    public static android.content.Intent createStopForegroundIntent(android.content.Context)
    {
        android.content.Context $r0;
        android.content.Intent r1;

        $r0 := @parameter0;

        r1 = new android.content.Intent;

        specialinvoke r1.<init>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r1.setAction("ACTION_STOP_FOREGROUND");

        return r1;
    }

    private void handleCancelWork(android.content.Intent)
    {
        java.lang.Object[] $r4;
        android.content.Intent $r1;
        java.util.UUID $r8;
        androidx.work.Logger $r2;
        java.lang.Throwable[] $r6;
        androidx.work.impl.WorkManagerImpl $r7;
        java.lang.String $r3, $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.foreground.SystemForegroundDispatcher.TAG;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r5 = java.lang.String.format("Stopping foreground work for %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.info($r3, $r5, $r6);

        $r3 = virtualinvoke $r1.getStringExtra("KEY_WORKSPEC_ID");

        if $r3 == null goto label1;

        $z0 = android.text.TextUtils.isEmpty($r3);

        if $z0 != 0 goto label1;

        $r7 = r0.mWorkManagerImpl;

        $r8 = java.util.UUID.fromString($r3);

        virtualinvoke $r7.cancelWorkById($r8);

     label1:
        return;
    }

    private void handleNotify(android.content.Intent)
    {
        java.lang.Object[] r7;
        android.content.Intent $r1;
        java.lang.Integer $r8;
        androidx.work.Logger $r5;
        androidx.work.ForegroundInfo r12;
        java.util.Map r13;
        int $i0, $i1;
        java.lang.String $r2, r6, $r9;
        boolean $z0;
        java.util.Map$Entry r17;
        android.os.Parcelable $r3;
        java.util.Iterator $r15;
        java.util.Set $r14;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback r11;
        java.lang.Throwable[] r10;
        android.app.Notification r4;
        java.lang.Object $r16;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 = virtualinvoke $r1.getIntExtra("KEY_NOTIFICATION_ID", 0);

        $i1 = virtualinvoke $r1.getIntExtra("KEY_FOREGROUND_SERVICE_TYPE", 0);

        $r2 = virtualinvoke $r1.getStringExtra("KEY_WORKSPEC_ID");

        $r3 = virtualinvoke $r1.getParcelableExtra("KEY_NOTIFICATION");

        r4 = (android.app.Notification) $r3;

        $r5 = androidx.work.Logger.get();

        r6 = androidx.work.impl.foreground.SystemForegroundDispatcher.TAG;

        r7 = newarray (java.lang.Object)[3];

        $r8 = java.lang.Integer.valueOf($i0);

        r7[0] = $r8;

        r7[1] = $r2;

        $r8 = java.lang.Integer.valueOf($i1);

        r7[2] = $r8;

        $r9 = java.lang.String.format("Notifying with (id: %s, workSpecId: %s, notificationType: %s)", r7);

        r10 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r5.debug(r6, $r9, r10);

        if r4 == null goto label4;

        r11 = r0.mCallback;

        if r11 == null goto label4;

        r12 = new androidx.work.ForegroundInfo;

        specialinvoke r12.<init>($i0, r4, $i1);

        r13 = r0.mForegroundInfoById;

        interfaceinvoke r13.put($r2, r12);

        r6 = r0.mCurrentForegroundWorkSpecId;

        $z0 = android.text.TextUtils.isEmpty(r6);

        if $z0 == 0 goto label1;

        r0.mCurrentForegroundWorkSpecId = $r2;

        r11 = r0.mCallback;

        interfaceinvoke r11.startForeground($i0, $i1, r4);

        return;

     label1:
        r11 = r0.mCallback;

        interfaceinvoke r11.notify($i0, r4);

        if $i1 == 0 goto label4;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 29 goto label4;

        $i0 = 0;

        r13 = r0.mForegroundInfoById;

        $r14 = interfaceinvoke r13.entrySet();

        $r15 = interfaceinvoke $r14.iterator();

     label2:
        $z0 = interfaceinvoke $r15.hasNext();

        if $z0 == 0 goto label3;

        $r16 = interfaceinvoke $r15.next();

        r17 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke r17.getValue();

        r12 = (androidx.work.ForegroundInfo) $r16;

        $i1 = virtualinvoke r12.getForegroundServiceType();

        $i0 = $i0 | $i1;

        goto label2;

     label3:
        r13 = r0.mForegroundInfoById;

        $r2 = r0.mCurrentForegroundWorkSpecId;

        $r16 = interfaceinvoke r13.get($r2);

        r12 = (androidx.work.ForegroundInfo) $r16;

        if r12 == null goto label4;

        r11 = r0.mCallback;

        $i1 = virtualinvoke r12.getNotificationId();

        r4 = virtualinvoke r12.getNotification();

        interfaceinvoke r11.startForeground($i1, $i0, r4);

     label4:
        return;
    }

    private void handleStartForeground(android.content.Intent)
    {
        java.lang.Object[] $r4;
        androidx.work.impl.foreground.SystemForegroundDispatcher$1 $r10;
        android.content.Intent $r1;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r9;
        androidx.work.Logger $r2;
        androidx.work.impl.WorkDatabase $r8;
        java.lang.Throwable[] $r6;
        androidx.work.impl.WorkManagerImpl r7;
        java.lang.String r3, $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = androidx.work.Logger.get();

        r3 = androidx.work.impl.foreground.SystemForegroundDispatcher.TAG;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r5 = java.lang.String.format("Started foreground service %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.info(r3, $r5, $r6);

        r3 = virtualinvoke $r1.getStringExtra("KEY_WORKSPEC_ID");

        r7 = r0.mWorkManagerImpl;

        $r8 = virtualinvoke r7.getWorkDatabase();

        $r9 = r0.mTaskExecutor;

        $r10 = new androidx.work.impl.foreground.SystemForegroundDispatcher$1;

        specialinvoke $r10.<init>(r0, $r8, r3);

        interfaceinvoke $r9.executeOnBackgroundThread($r10);

        return;
    }

    androidx.work.impl.WorkManagerImpl getWorkManager()
    {
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        r1 = r0.mWorkManagerImpl;

        return r1;
    }

    void handleStop(android.content.Intent)
    {
        androidx.work.Logger $r3;
        java.lang.Throwable[] $r4;
        android.content.Intent $r1;
        java.lang.String $r2;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = androidx.work.Logger.get();

        $r2 = androidx.work.impl.foreground.SystemForegroundDispatcher.TAG;

        $r4 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r3.info($r2, "Stopping foreground service", $r4);

        $r5 = r0.mCallback;

        if $r5 == null goto label1;

        interfaceinvoke $r5.stop();

     label1:
        return;
    }

    public void onAllConstraintsMet(java.util.List)
    {
        java.util.List r1;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        r1 := @parameter0;

        return;
    }

    public void onAllConstraintsNotMet(java.util.List)
    {
        java.lang.Object[] $r7;
        java.util.Iterator $r3;
        java.util.List r1;
        androidx.work.Logger $r6;
        java.lang.Throwable[] $r9;
        java.lang.Object $r4;
        androidx.work.impl.WorkManagerImpl $r10;
        java.lang.String $r2, r5, $r8;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $z0 = interfaceinvoke r1.isEmpty();

        if $z0 != 0 goto label2;

        $r3 = interfaceinvoke r1.iterator();

     label1:
        $z0 = interfaceinvoke $r3.hasNext();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.next();

        r5 = (java.lang.String) $r4;

        $r6 = androidx.work.Logger.get();

        $r2 = androidx.work.impl.foreground.SystemForegroundDispatcher.TAG;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r5;

        $r8 = java.lang.String.format("Constraints unmet for WorkSpec %s", $r7);

        $r9 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r6.debug($r2, $r8, $r9);

        $r10 = r0.mWorkManagerImpl;

        virtualinvoke $r10.stopForegroundWork(r5);

        goto label1;

     label2:
        return;
    }

    void onDestroy()
    {
        java.lang.Throwable $r5;
        androidx.work.impl.constraints.WorkConstraintsTracker $r3;
        java.lang.Object $r2;
        androidx.work.impl.WorkManagerImpl $r4;
        androidx.work.impl.Processor $r1;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        r0.mCallback = null;

        $r2 = r0.mLock;

        entermonitor $r2;

     label1:
        $r3 = r0.mConstraintsTracker;

        virtualinvoke $r3.reset();

        exitmonitor $r2;

     label2:
        $r4 = r0.mWorkManagerImpl;

        $r1 = virtualinvoke $r4.getProcessor();

        virtualinvoke $r1.removeExecutionListener(r0);

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onExecuted(java.lang.String, boolean)
    {
        java.lang.Throwable r19;
        java.lang.Object[] $r16;
        java.lang.Integer $r17;
        androidx.work.impl.model.WorkSpec r5;
        androidx.work.Logger $r15;
        androidx.work.impl.constraints.WorkConstraintsTracker r7;
        androidx.work.ForegroundInfo r8, r13;
        java.util.Map r3;
        int $i0, $i1;
        java.lang.String $r1, r9;
        boolean $z0;
        java.util.Map$Entry r11;
        java.util.Iterator $r10;
        java.util.Set r6;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback r12;
        java.lang.Throwable[] $r18;
        android.app.Notification $r14;
        java.lang.Object r2, $r4;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 := @parameter1;

        $z0 = 0;

        r2 = r0.mLock;

        entermonitor r2;

     label01:
        r3 = r0.mWorkSpecById;

        $r4 = interfaceinvoke r3.remove($r1);

        r5 = (androidx.work.impl.model.WorkSpec) $r4;

        if r5 == null goto label02;

        r6 = r0.mTrackedWorkSpecs;

        $z0 = interfaceinvoke r6.remove(r5);

     label02:
        if $z0 == 0 goto label03;

        r7 = r0.mConstraintsTracker;

        r6 = r0.mTrackedWorkSpecs;

        virtualinvoke r7.replace(r6);

     label03:
        exitmonitor r2;

     label04:
        r3 = r0.mForegroundInfoById;

        r2 = interfaceinvoke r3.remove($r1);

        r8 = (androidx.work.ForegroundInfo) r2;

        r9 = r0.mCurrentForegroundWorkSpecId;

        $z0 = virtualinvoke $r1.equals(r9);

        if $z0 == 0 goto label07;

        r3 = r0.mForegroundInfoById;

        $i0 = interfaceinvoke r3.size();

        if $i0 <= 0 goto label07;

        r3 = r0.mForegroundInfoById;

        r6 = interfaceinvoke r3.entrySet();

        $r10 = interfaceinvoke r6.iterator();

        r2 = interfaceinvoke $r10.next();

        r11 = (java.util.Map$Entry) r2;

     label05:
        $z0 = interfaceinvoke $r10.hasNext();

        if $z0 == 0 goto label06;

        r2 = interfaceinvoke $r10.next();

        r11 = (java.util.Map$Entry) r2;

        goto label05;

     label06:
        r2 = interfaceinvoke r11.getKey();

        r9 = (java.lang.String) r2;

        r0.mCurrentForegroundWorkSpecId = r9;

        r12 = r0.mCallback;

        if r12 == null goto label07;

        r2 = interfaceinvoke r11.getValue();

        r13 = (androidx.work.ForegroundInfo) r2;

        r12 = r0.mCallback;

        $i0 = virtualinvoke r13.getNotificationId();

        $i1 = virtualinvoke r13.getForegroundServiceType();

        $r14 = virtualinvoke r13.getNotification();

        interfaceinvoke r12.startForeground($i0, $i1, $r14);

        r12 = r0.mCallback;

        $i0 = virtualinvoke r13.getNotificationId();

        interfaceinvoke r12.cancelNotification($i0);

     label07:
        r12 = r0.mCallback;

        if r8 == null goto label12;

        if r12 == null goto label12;

        $r15 = androidx.work.Logger.get();

        r9 = androidx.work.impl.foreground.SystemForegroundDispatcher.TAG;

        $r16 = newarray (java.lang.Object)[3];

        $i0 = virtualinvoke r8.getNotificationId();

        $r17 = java.lang.Integer.valueOf($i0);

        $r16[0] = $r17;

        $r16[1] = $r1;

        $i0 = virtualinvoke r8.getForegroundServiceType();

        $r17 = java.lang.Integer.valueOf($i0);

        $r16[2] = $r17;

        $r1 = java.lang.String.format("Removing Notification (id: %s, workSpecId: %s ,notificationType: %s)", $r16);

        $r18 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r15.debug(r9, $r1, $r18);

        $i0 = virtualinvoke r8.getNotificationId();

        interfaceinvoke r12.cancelNotification($i0);

        return;

     label08:
        r19 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        goto label11;

     label11:
        throw r19;

     label12:
        return;

        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void onStartCommand(android.content.Intent)
    {
        android.content.Intent $r1;
        java.lang.String $r2, $r3;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = virtualinvoke $r1.getAction();

        $r3 = "ACTION_START_FOREGROUND";

        $z0 = virtualinvoke $r3.equals($r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.handleStartForeground($r1);

        specialinvoke r0.handleNotify($r1);

        return;

     label1:
        $r3 = "ACTION_NOTIFY";

        $z0 = virtualinvoke $r3.equals($r2);

        if $z0 == 0 goto label2;

        specialinvoke r0.handleNotify($r1);

        return;

     label2:
        $r3 = "ACTION_CANCEL_WORK";

        $z0 = virtualinvoke $r3.equals($r2);

        if $z0 == 0 goto label3;

        specialinvoke r0.handleCancelWork($r1);

        return;

     label3:
        $r3 = "ACTION_STOP_FOREGROUND";

        $z0 = virtualinvoke $r3.equals($r2);

        if $z0 == 0 goto label4;

        virtualinvoke r0.handleStop($r1);

     label4:
        return;
    }

    void setCallback(androidx.work.impl.foreground.SystemForegroundDispatcher$Callback)
    {
        androidx.work.Logger $r3;
        java.lang.Throwable[] $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback $r1, $r4;
        java.lang.String $r2;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this;

        $r1 := @parameter0;

        $r4 = r0.mCallback;

        if $r4 == null goto label1;

        $r3 = androidx.work.Logger.get();

        $r2 = androidx.work.impl.foreground.SystemForegroundDispatcher.TAG;

        $r5 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r3.error($r2, "A callback already exists.", $r5);

        return;

     label1:
        r0.mCallback = $r1;

        return;
    }
}
