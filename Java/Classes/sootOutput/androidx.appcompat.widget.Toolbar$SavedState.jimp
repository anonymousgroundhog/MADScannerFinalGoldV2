public class androidx.appcompat.widget.Toolbar$SavedState extends androidx.customview.view.AbsSavedState
{
    public static final android.os.Parcelable$Creator CREATOR;
    int expandedMenuItemId;
    boolean isOverflowOpen;

    static void <clinit>()
    {
        androidx.appcompat.widget.Toolbar$SavedState$1 $r0;

        $r0 = new androidx.appcompat.widget.Toolbar$SavedState$1;

        specialinvoke $r0.<init>();

        androidx.appcompat.widget.Toolbar$SavedState.CREATOR = $r0;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        android.os.Parcel $r1;
        androidx.appcompat.widget.Toolbar$SavedState r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>($r1, null);

        return;
    }

    public void <init>(android.os.Parcel, java.lang.ClassLoader)
    {
        int $i0;
        java.lang.ClassLoader $r2;
        android.os.Parcel $r1;
        androidx.appcompat.widget.Toolbar$SavedState r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        specialinvoke r0.<init>($r1, $r2);

        $i0 = virtualinvoke $r1.readInt();

        r0.expandedMenuItemId = $i0;

        $i0 = virtualinvoke $r1.readInt();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.isOverflowOpen = $z0;

        return;
    }

    public void <init>(android.os.Parcelable)
    {
        android.os.Parcelable $r1;
        androidx.appcompat.widget.Toolbar$SavedState r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>($r1);

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        int $i0;
        android.os.Parcel $r1;
        androidx.appcompat.widget.Toolbar$SavedState r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        specialinvoke r0.writeToParcel($r1, $i0);

        $i0 = r0.expandedMenuItemId;

        virtualinvoke $r1.writeInt($i0);

        $z0 = r0.isOverflowOpen;

        $i0 = (int) $z0;

        virtualinvoke $r1.writeInt($i0);

        return;
    }
}
