public class androidx.work.impl.model.WorkTypeConverters extends java.lang.Object
{

    private void <init>()
    {
        androidx.work.impl.model.WorkTypeConverters r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public static int backoffPolicyToInt(androidx.work.BackoffPolicy)
    {
        androidx.work.BackoffPolicy $r0;
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0;

        $r1 = androidx.work.impl.model.WorkTypeConverters$1.$SwitchMap$androidx$work$BackoffPolicy;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("Could not convert ");

        $r3 = virtualinvoke $r3.append($r0);

        $r3 = virtualinvoke $r3.append(" to int");

        $r4 = virtualinvoke $r3.toString();

        specialinvoke $r2.<init>($r4);

        throw $r2;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])
    {
        java.lang.Throwable r9;
        byte[] $r0;
        java.io.ObjectInputStream r3, r4, $r16;
        android.net.Uri $r6;
        java.io.ByteArrayInputStream r2, $r15;
        int $i0;
        java.lang.String $r5;
        boolean $z0;
        java.io.IOException r7, r8, r10, r11, r12, r13;
        androidx.work.ContentUriTriggers r1, $r14;

        $r0 := @parameter0;

        $r14 = new androidx.work.ContentUriTriggers;

        r1 = $r14;

        specialinvoke $r14.<init>();

        if $r0 != null goto label01;

        return r1;

     label01:
        $r15 = new java.io.ByteArrayInputStream;

        r2 = $r15;

        specialinvoke $r15.<init>($r0);

        r3 = null;

     label02:
        $r16 = new java.io.ObjectInputStream;

     label03:
        r4 = $r16;

     label04:
        specialinvoke $r16.<init>(r2);

     label05:
        r3 = r4;

     label06:
        $i0 = virtualinvoke r4.readInt();

     label07:
        if $i0 <= 0 goto label10;

     label08:
        $r5 = virtualinvoke r4.readUTF();

        $r6 = android.net.Uri.parse($r5);

        $z0 = virtualinvoke r4.readBoolean();

        virtualinvoke r1.add($r6, $z0);

     label09:
        $i0 = $i0 + -1;

        goto label07;

     label10:
        virtualinvoke r4.close();

     label11:
        goto label13;

     label12:
        r7 := @caughtexception;

        virtualinvoke r7.printStackTrace();

     label13:
        virtualinvoke r2.close();

     label14:
        return r1;

     label15:
        r8 := @caughtexception;

        virtualinvoke r8.printStackTrace();

        return r1;

     label16:
        r9 := @caughtexception;

        goto label25;

     label17:
        r10 := @caughtexception;

     label18:
        virtualinvoke r10.printStackTrace();

     label19:
        if r3 == null goto label23;

     label20:
        virtualinvoke r3.close();

     label21:
        goto label23;

     label22:
        r11 := @caughtexception;

        virtualinvoke r11.printStackTrace();

     label23:
        virtualinvoke r2.close();

     label24:
        goto label14;

     label25:
        if r3 == null goto label29;

     label26:
        virtualinvoke r3.close();

     label27:
        goto label29;

     label28:
        r12 := @caughtexception;

        virtualinvoke r12.printStackTrace();

     label29:
        virtualinvoke r2.close();

     label30:
        goto label32;

     label31:
        r13 := @caughtexception;

        virtualinvoke r13.printStackTrace();

     label32:
        goto label33;

     label33:
        throw r9;

        catch java.io.IOException from label04 to label05 with label17;
        catch java.io.IOException from label06 to label07 with label17;
        catch java.io.IOException from label08 to label09 with label17;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label16;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.io.IOException from label23 to label24 with label15;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.io.IOException from label29 to label30 with label31;
    }

    public static byte[] contentUriTriggersToByteArray(androidx.work.ContentUriTriggers)
    {
        java.lang.Throwable r12;
        byte[] $r15;
        java.io.ByteArrayOutputStream r1;
        android.net.Uri $r8;
        int $i0;
        java.io.ObjectOutputStream r2, r3;
        java.lang.String $r9;
        boolean $z0;
        androidx.work.ContentUriTriggers$Trigger r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.io.IOException r10, r11, r13, r14, r16, r17;
        androidx.work.ContentUriTriggers $r0;
        java.lang.Object $r6;

        $r0 := @parameter0;

        $i0 = virtualinvoke $r0.size();

        if $i0 != 0 goto label01;

        return null;

     label01:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<init>();

        r2 = null;

     label02:
        r3 = new java.io.ObjectOutputStream;

     label03:
        specialinvoke r3.<init>(r1);

     label04:
        r2 = r3;

     label05:
        $i0 = virtualinvoke $r0.size();

        virtualinvoke r3.writeInt($i0);

        $r4 = virtualinvoke $r0.getTriggers();

        $r5 = interfaceinvoke $r4.iterator();

     label06:
        $z0 = interfaceinvoke $r5.hasNext();

     label07:
        if $z0 == 0 goto label12;

     label08:
        $r6 = interfaceinvoke $r5.next();

     label09:
        r7 = (androidx.work.ContentUriTriggers$Trigger) $r6;

     label10:
        $r8 = virtualinvoke r7.getUri();

        $r9 = virtualinvoke $r8.toString();

        virtualinvoke r3.writeUTF($r9);

        $z0 = virtualinvoke r7.shouldTriggerForDescendants();

        virtualinvoke r3.writeBoolean($z0);

     label11:
        goto label06;

     label12:
        virtualinvoke r3.close();

     label13:
        goto label15;

     label14:
        r10 := @caughtexception;

        virtualinvoke r10.printStackTrace();

     label15:
        virtualinvoke r1.close();

     label16:
        goto label27;

     label17:
        r11 := @caughtexception;

        virtualinvoke r11.printStackTrace();

        goto label27;

     label18:
        r12 := @caughtexception;

        goto label28;

     label19:
        r13 := @caughtexception;

     label20:
        virtualinvoke r13.printStackTrace();

     label21:
        if r2 == null goto label25;

     label22:
        virtualinvoke r2.close();

     label23:
        goto label25;

     label24:
        r14 := @caughtexception;

        virtualinvoke r14.printStackTrace();

     label25:
        virtualinvoke r1.close();

     label26:
        goto label16;

     label27:
        $r15 = virtualinvoke r1.toByteArray();

        return $r15;

     label28:
        if r2 == null goto label32;

     label29:
        virtualinvoke r2.close();

     label30:
        goto label32;

     label31:
        r16 := @caughtexception;

        virtualinvoke r16.printStackTrace();

     label32:
        virtualinvoke r1.close();

     label33:
        goto label35;

     label34:
        r17 := @caughtexception;

        virtualinvoke r17.printStackTrace();

     label35:
        goto label36;

     label36:
        throw r12;

        catch java.io.IOException from label03 to label04 with label19;
        catch java.io.IOException from label05 to label07 with label19;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.lang.Throwable from label02 to label04 with label18;
        catch java.lang.Throwable from label05 to label07 with label18;
        catch java.lang.Throwable from label08 to label11 with label18;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.io.IOException from label25 to label26 with label17;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.io.IOException from label32 to label33 with label34;
    }

    public static androidx.work.BackoffPolicy intToBackoffPolicy(int)
    {
        androidx.work.BackoffPolicy r3;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r1 = virtualinvoke $r1.append("Could not convert ");

        $r1 = virtualinvoke $r1.append($i0);

        $r1 = virtualinvoke $r1.append(" to BackoffPolicy");

        $r2 = virtualinvoke $r1.toString();

        specialinvoke $r0.<init>($r2);

        throw $r0;

     label2:
        r3 = androidx.work.BackoffPolicy.LINEAR;

        return r3;

     label3:
        r3 = androidx.work.BackoffPolicy.EXPONENTIAL;

        return r3;
    }

    public static androidx.work.NetworkType intToNetworkType(int)
    {
        androidx.work.NetworkType r3;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0;

        lookupswitch($i0)
        {
            case 0: goto label6;
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label1;
        };

     label1:
        $i1 = android.os.Build$VERSION.SDK_INT;

        if $i1 < 30 goto label7;

        if $i0 != 5 goto label7;

        r3 = androidx.work.NetworkType.TEMPORARILY_UNMETERED;

        return r3;

     label2:
        r3 = androidx.work.NetworkType.METERED;

        return r3;

     label3:
        r3 = androidx.work.NetworkType.NOT_ROAMING;

        return r3;

     label4:
        r3 = androidx.work.NetworkType.UNMETERED;

        return r3;

     label5:
        r3 = androidx.work.NetworkType.CONNECTED;

        return r3;

     label6:
        r3 = androidx.work.NetworkType.NOT_REQUIRED;

        return r3;

     label7:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r1 = virtualinvoke $r1.append("Could not convert ");

        $r1 = virtualinvoke $r1.append($i0);

        $r1 = virtualinvoke $r1.append(" to NetworkType");

        $r2 = virtualinvoke $r1.toString();

        specialinvoke $r0.<init>($r2);

        throw $r0;
    }

    public static androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)
    {
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        androidx.work.OutOfQuotaPolicy r3;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r1 = virtualinvoke $r1.append("Could not convert ");

        $r1 = virtualinvoke $r1.append($i0);

        $r1 = virtualinvoke $r1.append(" to OutOfQuotaPolicy");

        $r2 = virtualinvoke $r1.toString();

        specialinvoke $r0.<init>($r2);

        throw $r0;

     label2:
        r3 = androidx.work.OutOfQuotaPolicy.DROP_WORK_REQUEST;

        return r3;

     label3:
        r3 = androidx.work.OutOfQuotaPolicy.RUN_AS_NON_EXPEDITED_WORK_REQUEST;

        return r3;
    }

    public static androidx.work.WorkInfo$State intToState(int)
    {
        androidx.work.WorkInfo$State r3;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0;

        lookupswitch($i0)
        {
            case 0: goto label7;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r1 = virtualinvoke $r1.append("Could not convert ");

        $r1 = virtualinvoke $r1.append($i0);

        $r1 = virtualinvoke $r1.append(" to State");

        $r2 = virtualinvoke $r1.toString();

        specialinvoke $r0.<init>($r2);

        throw $r0;

     label2:
        r3 = androidx.work.WorkInfo$State.CANCELLED;

        return r3;

     label3:
        r3 = androidx.work.WorkInfo$State.BLOCKED;

        return r3;

     label4:
        r3 = androidx.work.WorkInfo$State.FAILED;

        return r3;

     label5:
        r3 = androidx.work.WorkInfo$State.SUCCEEDED;

        return r3;

     label6:
        r3 = androidx.work.WorkInfo$State.RUNNING;

        return r3;

     label7:
        r3 = androidx.work.WorkInfo$State.ENQUEUED;

        return r3;
    }

    public static int networkTypeToInt(androidx.work.NetworkType)
    {
        androidx.work.NetworkType $r0, $r2;
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0;

        $r1 = androidx.work.impl.model.WorkTypeConverters$1.$SwitchMap$androidx$work$NetworkType;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 30 goto label7;

        $r2 = androidx.work.NetworkType.TEMPORARILY_UNMETERED;

        if $r0 != $r2 goto label7;

        return 5;

     label2:
        return 4;

     label3:
        return 3;

     label4:
        return 2;

     label5:
        return 1;

     label6:
        return 0;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r4 = virtualinvoke $r4.append("Could not convert ");

        $r4 = virtualinvoke $r4.append($r0);

        $r4 = virtualinvoke $r4.append(" to int");

        $r5 = virtualinvoke $r4.toString();

        specialinvoke $r3.<init>($r5);

        throw $r3;
    }

    public static int outOfQuotaPolicyToInt(androidx.work.OutOfQuotaPolicy)
    {
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        androidx.work.OutOfQuotaPolicy $r0;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0;

        $r1 = androidx.work.impl.model.WorkTypeConverters$1.$SwitchMap$androidx$work$OutOfQuotaPolicy;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("Could not convert ");

        $r3 = virtualinvoke $r3.append($r0);

        $r3 = virtualinvoke $r3.append(" to int");

        $r4 = virtualinvoke $r3.toString();

        specialinvoke $r2.<init>($r4);

        throw $r2;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static int stateToInt(androidx.work.WorkInfo$State)
    {
        int[] $r1;
        androidx.work.WorkInfo$State $r0;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0;

        $r1 = androidx.work.impl.model.WorkTypeConverters$1.$SwitchMap$androidx$work$WorkInfo$State;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("Could not convert ");

        $r3 = virtualinvoke $r3.append($r0);

        $r3 = virtualinvoke $r3.append(" to int");

        $r4 = virtualinvoke $r3.toString();

        specialinvoke $r2.<init>($r4);

        throw $r2;

     label2:
        return 5;

     label3:
        return 4;

     label4:
        return 3;

     label5:
        return 2;

     label6:
        return 1;

     label7:
        return 0;
    }
}
