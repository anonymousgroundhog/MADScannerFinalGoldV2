public class com.google.android.gms.common.data.BitmapTeleporter extends com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable implements com.google.android.gms.common.internal.ReflectedParcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    final int zaa;
    android.os.ParcelFileDescriptor zab;
    final int zac;
    private android.graphics.Bitmap zad;
    private boolean zae;
    private java.io.File zaf;

    static void <clinit>()
    {
        com.google.android.gms.common.data.zaa $r0;

        $r0 = new com.google.android.gms.common.data.zaa;

        specialinvoke $r0.<init>();

        com.google.android.gms.common.data.BitmapTeleporter.CREATOR = $r0;

        return;
    }

    void <init>(int, android.os.ParcelFileDescriptor, int)
    {
        android.os.ParcelFileDescriptor $r1;
        com.google.android.gms.common.data.BitmapTeleporter r0;
        int $i0, $i1;

        r0 := @this;

        $i1 := @parameter0;

        $r1 := @parameter1;

        $i0 := @parameter2;

        specialinvoke r0.<init>();

        r0.zaa = $i1;

        r0.zab = $r1;

        r0.zac = $i0;

        r0.zad = null;

        r0.zae = 0;

        return;
    }

    public void <init>(android.graphics.Bitmap)
    {
        com.google.android.gms.common.data.BitmapTeleporter r0;
        android.graphics.Bitmap $r1;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.zaa = 1;

        r0.zab = null;

        r0.zac = 0;

        r0.zad = $r1;

        r0.zae = 1;

        return;
    }

    private static final void zaa(java.io.Closeable)
    {
        java.io.IOException $r1;
        java.io.Closeable $r0;

        $r0 := @parameter0;

     label1:
        interfaceinvoke $r0.close();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        android.util.Log.w("BitmapTeleporter", "Could not close stream", $r1);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.graphics.Bitmap get()
    {
        java.lang.Throwable $r10;
        java.io.DataInputStream $r1;
        byte[] $r5;
        java.lang.IllegalStateException $r12;
        android.os.ParcelFileDescriptor $r3;
        android.graphics.Bitmap$Config $r7;
        java.nio.ByteBuffer $r8;
        int $i0, $i1;
        java.lang.String $r6;
        boolean $z0;
        com.google.android.gms.common.data.BitmapTeleporter r0;
        java.io.IOException $r11;
        android.graphics.Bitmap $r9;
        java.lang.Object $r4;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r2;

        r0 := @this;

        $z0 = r0.zae;

        if $z0 != 0 goto label9;

        $r1 = new java.io.DataInputStream;

        $r2 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        $r3 = r0.zab;

        $r4 = com.google.android.gms.common.internal.Preconditions.checkNotNull($r3);

        $r3 = (android.os.ParcelFileDescriptor) $r4;

        specialinvoke $r2.<init>($r3);

        specialinvoke $r1.<init>($r2);

     label1:
        $i0 = virtualinvoke $r1.readInt();

     label2:
        $r5 = newarray (byte)[$i0];

     label3:
        $i0 = virtualinvoke $r1.readInt();

        $i1 = virtualinvoke $r1.readInt();

        $r6 = virtualinvoke $r1.readUTF();

        $r7 = android.graphics.Bitmap$Config.valueOf($r6);

        virtualinvoke $r1.read($r5);

     label4:
        com.google.android.gms.common.data.BitmapTeleporter.zaa($r1);

        $r8 = java.nio.ByteBuffer.wrap($r5);

        $r9 = android.graphics.Bitmap.createBitmap($i0, $i1, $r7);

        virtualinvoke $r9.copyPixelsFromBuffer($r8);

        r0.zad = $r9;

        r0.zae = 1;

        goto label9;

     label5:
        $r10 := @caughtexception;

        goto label8;

     label6:
        $r11 := @caughtexception;

     label7:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<init>("Could not read from parcel file descriptor", $r11);

        throw $r12;

     label8:
        com.google.android.gms.common.data.BitmapTeleporter.zaa($r1);

        throw $r10;

     label9:
        $r9 = r0.zad;

        return $r9;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label5;
    }

    public void release()
    {
        android.os.ParcelFileDescriptor $r2;
        com.google.android.gms.common.data.BitmapTeleporter r0;
        java.lang.Object $r1;
        java.io.IOException $r3;
        boolean $z0;

        r0 := @this;

        $z0 = r0.zae;

        if $z0 != 0 goto label6;

        $r2 = r0.zab;

     label1:
        $r1 = com.google.android.gms.common.internal.Preconditions.checkNotNull($r2);

     label2:
        $r2 = (android.os.ParcelFileDescriptor) $r1;

     label3:
        virtualinvoke $r2.close();

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        android.util.Log.w("BitmapTeleporter", "Could not close PFD", $r3);

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public void setTempDir(java.io.File)
    {
        com.google.android.gms.common.data.BitmapTeleporter r0;
        java.io.File $r1;
        java.lang.NullPointerException $r2;

        r0 := @this;

        $r1 := @parameter0;

        if $r1 == null goto label1;

        r0.zaf = $r1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<init>("Cannot set null temp directory");

        throw $r2;
    }

    public final void writeToParcel(android.os.Parcel, int)
    {
        java.lang.Throwable $r13;
        byte[] $r6;
        java.lang.IllegalStateException $r15;
        android.os.ParcelFileDescriptor $r2;
        android.graphics.Bitmap$Config $r11;
        android.os.Parcel $r1;
        java.nio.ByteBuffer $r5;
        java.io.BufferedOutputStream $r7;
        java.io.DataOutputStream $r10;
        int $i0, $i1, $i2;
        java.lang.String $r12;
        com.google.android.gms.common.data.BitmapTeleporter r0;
        java.io.FileOutputStream $r9;
        java.io.IOException $r14, $r17;
        java.io.File $r8;
        java.io.FileNotFoundException $r16;
        android.graphics.Bitmap $r3;
        java.lang.Object $r4;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r2 = r0.zab;

        if $r2 != null goto label15;

        $r3 = r0.zad;

        $r4 = com.google.android.gms.common.internal.Preconditions.checkNotNull($r3);

        $r3 = (android.graphics.Bitmap) $r4;

        $i1 = virtualinvoke $r3.getRowBytes();

        $i2 = virtualinvoke $r3.getHeight();

        $i1 = $i1 * $i2;

        $r5 = java.nio.ByteBuffer.allocate($i1);

        virtualinvoke $r3.copyPixelsToBuffer($r5);

        $r6 = virtualinvoke $r5.array();

        $r7 = new java.io.BufferedOutputStream;

        $r8 = r0.zaf;

        if $r8 == null goto label14;

     label01:
        $r8 = java.io.File.createTempFile("teleporter", ".tmp", $r8);

     label02:
        $r9 = new java.io.FileOutputStream;

     label03:
        specialinvoke $r9.<init>($r8);

        $r2 = android.os.ParcelFileDescriptor.open($r8, 268435456);

     label04:
        r0.zab = $r2;

        virtualinvoke $r8.delete();

        specialinvoke $r7.<init>($r9);

        $r10 = new java.io.DataOutputStream;

        specialinvoke $r10.<init>($r7);

     label05:
        $i1 = lengthof $r6;

     label06:
        virtualinvoke $r10.writeInt($i1);

        $i1 = virtualinvoke $r3.getWidth();

        virtualinvoke $r10.writeInt($i1);

        $i1 = virtualinvoke $r3.getHeight();

        virtualinvoke $r10.writeInt($i1);

        $r11 = virtualinvoke $r3.getConfig();

        $r12 = virtualinvoke $r11.toString();

        virtualinvoke $r10.writeUTF($r12);

        virtualinvoke $r10.write($r6);

     label07:
        com.google.android.gms.common.data.BitmapTeleporter.zaa($r10);

        goto label15;

     label08:
        $r13 := @caughtexception;

        goto label11;

     label09:
        $r14 := @caughtexception;

     label10:
        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<init>("Could not write into unlinked file", $r14);

        throw $r15;

     label11:
        com.google.android.gms.common.data.BitmapTeleporter.zaa($r10);

        throw $r13;

     label12:
        $r16 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<init>("Temporary file is somehow already deleted");

        throw $r15;

     label13:
        $r17 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<init>("Could not create temporary file", $r17);

        throw $r15;

     label14:
        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<init>("setTempDir() must be called before writing this object to a parcel");

        throw $r15;

     label15:
        $i1 = com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.beginObjectHeader($r1);

        $i2 = r0.zaa;

        com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeInt($r1, 1, $i2);

        $r2 = r0.zab;

        $i0 = $i0 | 1;

        com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeParcelable($r1, 2, $r2, $i0, 0);

        $i0 = r0.zac;

        com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.writeInt($r1, 3, $i0);

        com.google.android.gms.common.internal.safeparcel.SafeParcelWriter.finishObjectHeader($r1, $i1);

        r0.zab = null;

        return;

        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.FileNotFoundException from label03 to label04 with label12;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
    }
}
