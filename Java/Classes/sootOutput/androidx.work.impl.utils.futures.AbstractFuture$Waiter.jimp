final class androidx.work.impl.utils.futures.AbstractFuture$Waiter extends java.lang.Object
{
    static final androidx.work.impl.utils.futures.AbstractFuture$Waiter TOMBSTONE;
    volatile androidx.work.impl.utils.futures.AbstractFuture$Waiter next;
    volatile java.lang.Thread thread;

    static void <clinit>()
    {
        androidx.work.impl.utils.futures.AbstractFuture$Waiter $r0;

        $r0 = new androidx.work.impl.utils.futures.AbstractFuture$Waiter;

        specialinvoke $r0.<init>(0);

        androidx.work.impl.utils.futures.AbstractFuture$Waiter.TOMBSTONE = $r0;

        return;
    }

    void <init>()
    {
        androidx.work.impl.utils.futures.AbstractFuture$AtomicHelper $r1;
        androidx.work.impl.utils.futures.AbstractFuture$Waiter r0;
        java.lang.Thread $r2;

        r0 := @this;

        specialinvoke r0.<init>();

        $r1 = androidx.work.impl.utils.futures.AbstractFuture.ATOMIC_HELPER;

        $r2 = java.lang.Thread.currentThread();

        virtualinvoke $r1.putThread(r0, $r2);

        return;
    }

    void <init>(boolean)
    {
        androidx.work.impl.utils.futures.AbstractFuture$Waiter r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        specialinvoke r0.<init>();

        return;
    }

    void setNext(androidx.work.impl.utils.futures.AbstractFuture$Waiter)
    {
        androidx.work.impl.utils.futures.AbstractFuture$AtomicHelper $r2;
        androidx.work.impl.utils.futures.AbstractFuture$Waiter r0, $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = androidx.work.impl.utils.futures.AbstractFuture.ATOMIC_HELPER;

        virtualinvoke $r2.putNext(r0, $r1);

        return;
    }

    void unpark()
    {
        androidx.work.impl.utils.futures.AbstractFuture$Waiter r0;
        java.lang.Thread r1;

        r0 := @this;

        r1 = r0.thread;

        if r1 == null goto label1;

        r0.thread = null;

        java.util.concurrent.locks.LockSupport.unpark(r1);

     label1:
        return;
    }
}
