public class androidx.appcompat.widget.ViewUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static java.lang.reflect.Method sComputeFitSystemWindowsMethod;

    static void <clinit>()
    {
        java.lang.NoSuchMethodException r3;
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 = class "Landroid/view/View;";

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Landroid/graphics/Rect;";

        $r1[1] = class "Landroid/graphics/Rect;";

     label1:
        $r2 = virtualinvoke r0.getDeclaredMethod("computeFitSystemWindows", $r1);

     label2:
        androidx.appcompat.widget.ViewUtils.sComputeFitSystemWindowsMethod = $r2;

     label3:
        $z0 = virtualinvoke $r2.isAccessible();

     label4:
        if $z0 != 0 goto label6;

        $r2 = androidx.appcompat.widget.ViewUtils.sComputeFitSystemWindowsMethod;

     label5:
        virtualinvoke $r2.setAccessible(1);

     label6:
        return;

     label7:
        r3 := @caughtexception;

        android.util.Log.d("ViewUtils", "Could not find method computeFitSystemWindows. Oh well.");

        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.lang.NoSuchMethodException from label3 to label4 with label7;
        catch java.lang.NoSuchMethodException from label5 to label6 with label7;
    }

    private void <init>()
    {
        androidx.appcompat.widget.ViewUtils r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public static void computeFitSystemWindows(android.view.View, android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect $r1, $r2;
        java.lang.Object[] $r4;
        android.view.View $r0;
        java.lang.reflect.Method r3;
        java.lang.Exception r5;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        r3 = androidx.appcompat.widget.ViewUtils.sComputeFitSystemWindowsMethod;

        if r3 == null goto label4;

        $r4 = newarray (java.lang.Object)[2];

     label1:
        $r4[0] = $r1;

        $r4[1] = $r2;

        virtualinvoke r3.invoke($r0, $r4);

     label2:
        return;

     label3:
        r5 := @caughtexception;

        android.util.Log.d("ViewUtils", "Could not invoke computeFitSystemWindows", r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean isLayoutRtl(android.view.View)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0;

        $i0 = androidx.core.view.ViewCompat.getLayoutDirection($r0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void makeOptionalFitsSystemWindows(android.view.View)
    {
        java.lang.IllegalAccessException r5;
        java.lang.Object[] $r4;
        java.lang.NoSuchMethodException r7;
        java.lang.Class[] $r1;
        java.lang.reflect.InvocationTargetException r6;
        android.view.View $r0;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;
        boolean $z0;

        $r0 := @parameter0;

     label01:
        $r2 = virtualinvoke $r0.getClass();

     label02:
        $r1 = newarray (java.lang.Class)[0];

     label03:
        $r3 = virtualinvoke $r2.getMethod("makeOptionalFitsSystemWindows", $r1);

        $z0 = virtualinvoke $r3.isAccessible();

     label04:
        if $z0 != 0 goto label06;

     label05:
        virtualinvoke $r3.setAccessible(1);

     label06:
        $r4 = newarray (java.lang.Object)[0];

     label07:
        virtualinvoke $r3.invoke($r0, $r4);

     label08:
        return;

     label09:
        r5 := @caughtexception;

        android.util.Log.d("ViewUtils", "Could not invoke makeOptionalFitsSystemWindows", r5);

        return;

     label10:
        r6 := @caughtexception;

        android.util.Log.d("ViewUtils", "Could not invoke makeOptionalFitsSystemWindows", r6);

        goto label12;

     label11:
        r7 := @caughtexception;

        android.util.Log.d("ViewUtils", "Could not find method makeOptionalFitsSystemWindows. Oh well...");

     label12:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label11;
        catch java.lang.NoSuchMethodException from label03 to label04 with label11;
        catch java.lang.NoSuchMethodException from label05 to label06 with label11;
        catch java.lang.NoSuchMethodException from label07 to label08 with label11;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label10;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label10;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label10;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label10;
        catch java.lang.IllegalAccessException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label03 to label04 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
    }
}
