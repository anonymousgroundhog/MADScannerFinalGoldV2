public final class androidx.core.view.DisplayCompat extends java.lang.Object
{
    private static final int DISPLAY_SIZE_4K_HEIGHT;
    private static final int DISPLAY_SIZE_4K_WIDTH;

    private void <init>()
    {
        androidx.core.view.DisplayCompat r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    static android.graphics.Point getCurrentDisplaySizeFromWorkarounds(android.content.Context, android.view.Display)
    {
        android.content.Context $r0;
        int i0;
        android.view.Display $r1;
        android.graphics.Point $r2;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        i0 = android.os.Build$VERSION.SDK_INT;

        if i0 >= 28 goto label1;

        $r2 = androidx.core.view.DisplayCompat.parsePhysicalDisplaySizeFromSystemProperties("sys.display-size", $r1);

        goto label2;

     label1:
        $r2 = androidx.core.view.DisplayCompat.parsePhysicalDisplaySizeFromSystemProperties("vendor.display-size", $r1);

     label2:
        if $r2 == null goto label3;

        return $r2;

     label3:
        $z0 = androidx.core.view.DisplayCompat.isSonyBravia4kTv($r0);

        if $z0 == 0 goto label4;

        $z0 = androidx.core.view.DisplayCompat.isCurrentModeTheLargestMode($r1);

        if $z0 == 0 goto label4;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<init>(3840, 2160);

        return $r2;

     label4:
        return null;
    }

    private static android.graphics.Point getDisplaySize(android.content.Context, android.view.Display)
    {
        android.content.Context $r0;
        android.view.Display $r1;
        android.graphics.Point $r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 = androidx.core.view.DisplayCompat.getCurrentDisplaySizeFromWorkarounds($r0, $r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r2 = new android.graphics.Point;

        specialinvoke $r2.<init>();

        androidx.core.view.DisplayCompat$Api17Impl.getRealSize($r1, $r2);

        return $r2;
    }

    public static androidx.core.view.DisplayCompat$ModeCompat getMode(android.content.Context, android.view.Display)
    {
        android.content.Context $r0;
        int $i0;
        androidx.core.view.DisplayCompat$ModeCompat $r2;
        android.view.Display $r1;
        android.graphics.Point $r3;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 23 goto label1;

        $r2 = androidx.core.view.DisplayCompat$Api23Impl.getMode($r0, $r1);

        return $r2;

     label1:
        $r2 = new androidx.core.view.DisplayCompat$ModeCompat;

        $r3 = androidx.core.view.DisplayCompat.getDisplaySize($r0, $r1);

        specialinvoke $r2.<init>($r3);

        return $r2;
    }

    public static androidx.core.view.DisplayCompat$ModeCompat[] getSupportedModes(android.content.Context, android.view.Display)
    {
        android.content.Context $r0;
        int $i0;
        androidx.core.view.DisplayCompat$ModeCompat $r3;
        android.view.Display $r1;
        androidx.core.view.DisplayCompat$ModeCompat[] $r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 23 goto label1;

        $r2 = androidx.core.view.DisplayCompat$Api23Impl.getSupportedModes($r0, $r1);

        return $r2;

     label1:
        $r2 = newarray (androidx.core.view.DisplayCompat$ModeCompat)[1];

        $r3 = androidx.core.view.DisplayCompat.getMode($r0, $r1);

        $r2[0] = $r3;

        return $r2;
    }

    private static java.lang.String getSystemProperty(java.lang.String)
    {
        java.lang.Object[] $r4;
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.String $r0;
        java.lang.reflect.Method $r3;
        java.lang.Exception r6;

        $r0 := @parameter0;

     label1:
        $r2 = java.lang.Class.forName("android.os.SystemProperties");

     label2:
        $r1 = newarray (java.lang.Class)[1];

     label3:
        $r1[0] = class "Ljava/lang/String;";

        $r3 = virtualinvoke $r2.getMethod("get", $r1);

     label4:
        $r4 = newarray (java.lang.Object)[1];

     label5:
        $r4[0] = $r0;

        $r5 = virtualinvoke $r3.invoke($r2, $r4);

        $r0 = (java.lang.String) $r5;

     label6:
        return $r0;

     label7:
        r6 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    static boolean isCurrentModeTheLargestMode(android.view.Display)
    {
        int $i0;
        android.view.Display $r0;
        boolean $z0;

        $r0 := @parameter0;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 23 goto label1;

        $z0 = androidx.core.view.DisplayCompat$Api23Impl.isCurrentModeTheLargestMode($r0);

        return $z0;

     label1:
        return 1;
    }

    private static boolean isSonyBravia4kTv(android.content.Context)
    {
        android.content.Context $r0;
        android.content.pm.PackageManager $r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0;

        $z0 = androidx.core.view.DisplayCompat.isTv($r0);

        if $z0 == 0 goto label1;

        $r1 = android.os.Build.MANUFACTURER;

        $r2 = "Sony";

        $z0 = virtualinvoke $r2.equals($r1);

        if $z0 == 0 goto label1;

        $r1 = android.os.Build.MODEL;

        $z0 = virtualinvoke $r1.startsWith("BRAVIA");

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r0.getPackageManager();

        $z0 = virtualinvoke $r3.hasSystemFeature("com.sony.dtv.hardware.panel.qfhd");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean isTv(android.content.Context)
    {
        android.content.Context $r0;
        android.app.UiModeManager r2;
        int $i0;
        java.lang.Object $r1;

        $r0 := @parameter0;

        $r1 = virtualinvoke $r0.getSystemService("uimode");

        r2 = (android.app.UiModeManager) $r1;

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.getCurrentModeType();

        if $i0 != 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static android.graphics.Point parseDisplaySize(java.lang.String) throws java.lang.NumberFormatException
    {
        int i0, $i1;
        java.lang.String[] $r1;
        android.graphics.Point $r2;
        java.lang.NumberFormatException $r3;
        java.lang.String $r0;

        $r0 := @parameter0;

        $r0 = virtualinvoke $r0.trim();

        i0 = -1;

        $r1 = virtualinvoke $r0.split("x", i0);

        i0 = lengthof $r1;

        if i0 != 2 goto label1;

        $r0 = $r1[0];

        i0 = java.lang.Integer.parseInt($r0);

        $r0 = $r1[1];

        $i1 = java.lang.Integer.parseInt($r0);

        if i0 <= 0 goto label1;

        if $i1 <= 0 goto label1;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<init>(i0, $i1);

        return $r2;

     label1:
        $r3 = new java.lang.NumberFormatException;

        specialinvoke $r3.<init>();

        throw $r3;
    }

    private static android.graphics.Point parsePhysicalDisplaySizeFromSystemProperties(java.lang.String, android.view.Display)
    {
        int $i0;
        android.view.Display $r1;
        android.graphics.Point $r2;
        java.lang.NumberFormatException r3;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $i0 = virtualinvoke $r1.getDisplayId();

        if $i0 == 0 goto label1;

        return null;

     label1:
        $r0 = androidx.core.view.DisplayCompat.getSystemProperty($r0);

        $z0 = android.text.TextUtils.isEmpty($r0);

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r2 = androidx.core.view.DisplayCompat.parseDisplaySize($r0);

     label3:
        return $r2;

     label4:
        r3 := @caughtexception;

        return null;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }
}
