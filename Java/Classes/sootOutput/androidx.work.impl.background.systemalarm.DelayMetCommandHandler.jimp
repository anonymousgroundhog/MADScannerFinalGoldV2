public class androidx.work.impl.background.systemalarm.DelayMetCommandHandler extends java.lang.Object implements androidx.work.impl.constraints.WorkConstraintsCallback, androidx.work.impl.ExecutionListener, androidx.work.impl.utils.WorkTimer$TimeLimitExceededListener
{
    private static final int STATE_INITIAL;
    private static final int STATE_START_REQUESTED;
    private static final int STATE_STOP_REQUESTED;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private int mCurrentState;
    private final androidx.work.impl.background.systemalarm.SystemAlarmDispatcher mDispatcher;
    private boolean mHasConstraints;
    private final java.lang.Object mLock;
    private final int mStartId;
    private android.os.PowerManager$WakeLock mWakeLock;
    private final androidx.work.impl.constraints.WorkConstraintsTracker mWorkConstraintsTracker;
    private final java.lang.String mWorkSpecId;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = androidx.work.Logger.tagWithPrefix("DelayMetCommandHandler");

        androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG = $r0;

        return;
    }

    void <init>(android.content.Context, int, java.lang.String, androidx.work.impl.background.systemalarm.SystemAlarmDispatcher)
    {
        android.content.Context $r1;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r3;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r4;
        androidx.work.impl.constraints.WorkConstraintsTracker $r5;
        int $i0;
        java.lang.Object $r6;
        java.lang.String $r2;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r2 := @parameter2;

        $r3 := @parameter3;

        specialinvoke r0.<init>();

        r0.mContext = $r1;

        r0.mStartId = $i0;

        r0.mDispatcher = $r3;

        r0.mWorkSpecId = $r2;

        $r4 = virtualinvoke $r3.getTaskExecutor();

        $r5 = new androidx.work.impl.constraints.WorkConstraintsTracker;

        specialinvoke $r5.<init>($r1, $r4, r0);

        r0.mWorkConstraintsTracker = $r5;

        r0.mHasConstraints = 0;

        r0.mCurrentState = 0;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<init>();

        r0.mLock = $r6;

        return;
    }

    private void cleanUp()
    {
        java.lang.Throwable $r11;
        androidx.work.impl.utils.WorkTimer $r4;
        java.lang.Object[] $r8;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r3;
        android.os.PowerManager$WakeLock $r6;
        androidx.work.Logger $r7;
        androidx.work.impl.constraints.WorkConstraintsTracker $r2;
        java.lang.Throwable[] $r10;
        java.lang.Object $r1;
        java.lang.String $r5, $r9;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mLock;

        entermonitor $r1;

     label1:
        $r2 = r0.mWorkConstraintsTracker;

        virtualinvoke $r2.reset();

        $r3 = r0.mDispatcher;

        $r4 = virtualinvoke $r3.getWorkTimer();

        $r5 = r0.mWorkSpecId;

        virtualinvoke $r4.stopTimer($r5);

        $r6 = r0.mWakeLock;

        if $r6 == null goto label2;

        $z0 = virtualinvoke $r6.isHeld();

        if $z0 == 0 goto label2;

        $r7 = androidx.work.Logger.get();

        $r5 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r8 = newarray (java.lang.Object)[2];

        $r6 = r0.mWakeLock;

        $r8[0] = $r6;

        $r9 = r0.mWorkSpecId;

        $r8[1] = $r9;

        $r9 = java.lang.String.format("Releasing wakelock %s for WorkSpec %s", $r8);

        $r10 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r7.debug($r5, $r9, $r10);

        $r6 = r0.mWakeLock;

        virtualinvoke $r6.release();

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void stopWork()
    {
        java.lang.Throwable r12;
        android.content.Context r7;
        java.lang.Object[] $r4;
        android.content.Intent $r8;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r9;
        androidx.work.impl.Processor $r11;
        androidx.work.Logger $r2;
        java.lang.Throwable[] $r6;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable $r10;
        int i0;
        java.lang.Object $r1;
        java.lang.String r3, $r5;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mLock;

        entermonitor $r1;

     label1:
        i0 = r0.mCurrentState;

        if i0 >= 2 goto label4;

        r0.mCurrentState = 2;

        $r2 = androidx.work.Logger.get();

        r3 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.mWorkSpecId;

        $r4[0] = $r5;

        $r5 = java.lang.String.format("Stopping work for WorkSpec %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug(r3, $r5, $r6);

        r7 = r0.mContext;

        $r5 = r0.mWorkSpecId;

        $r8 = androidx.work.impl.background.systemalarm.CommandHandler.createStopWorkIntent(r7, $r5);

        $r9 = r0.mDispatcher;

        $r10 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        i0 = r0.mStartId;

        specialinvoke $r10.<init>($r9, $r8, i0);

        virtualinvoke $r9.postOnMainThread($r10);

        $r9 = r0.mDispatcher;

        $r11 = virtualinvoke $r9.getProcessor();

        $r5 = r0.mWorkSpecId;

        $z0 = virtualinvoke $r11.isEnqueued($r5);

        if $z0 == 0 goto label2;

        $r2 = androidx.work.Logger.get();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.mWorkSpecId;

        $r4[0] = $r5;

        $r5 = java.lang.String.format("WorkSpec %s needs to be rescheduled", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug(r3, $r5, $r6);

        r7 = r0.mContext;

        r3 = r0.mWorkSpecId;

        $r8 = androidx.work.impl.background.systemalarm.CommandHandler.createScheduleWorkIntent(r7, r3);

        $r9 = r0.mDispatcher;

        $r10 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        i0 = r0.mStartId;

        specialinvoke $r10.<init>($r9, $r8, i0);

        virtualinvoke $r9.postOnMainThread($r10);

        goto label3;

     label2:
        $r2 = androidx.work.Logger.get();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.mWorkSpecId;

        $r4[0] = $r5;

        $r5 = java.lang.String.format("Processor does not have WorkSpec %s. No need to reschedule ", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug(r3, $r5, $r6);

     label3:
        goto label5;

     label4:
        $r2 = androidx.work.Logger.get();

        r3 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.mWorkSpecId;

        $r4[0] = $r5;

        $r5 = java.lang.String.format("Already stopped work for %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug(r3, $r5, $r6);

     label5:
        exitmonitor $r1;

     label6:
        return;

     label7:
        r12 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw r12;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void handleProcessWork()
    {
        android.content.Context r1;
        java.lang.Object[] $r2;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r9;
        java.lang.Integer $r4;
        androidx.work.impl.model.WorkSpec $r13;
        androidx.work.Logger $r6;
        androidx.work.impl.constraints.WorkConstraintsTracker $r15;
        androidx.work.impl.WorkDatabase $r11;
        int $i0;
        java.lang.String $r3, $r7;
        boolean $z0;
        androidx.work.impl.model.WorkSpecDao $r12;
        android.os.PowerManager$WakeLock $r5;
        java.util.List $r14;
        java.lang.Throwable[] $r8;
        androidx.work.impl.WorkManagerImpl $r10;

        r0 := @this;

        r1 = r0.mContext;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.mWorkSpecId;

        $r2[0] = $r3;

        $i0 = r0.mStartId;

        $r4 = java.lang.Integer.valueOf($i0);

        $r2[1] = $r4;

        $r3 = java.lang.String.format("%s (%s)", $r2);

        $r5 = androidx.work.impl.utils.WakeLocks.newWakeLock(r1, $r3);

        r0.mWakeLock = $r5;

        $r6 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r2 = newarray (java.lang.Object)[2];

        $r5 = r0.mWakeLock;

        $r2[0] = $r5;

        $r7 = r0.mWorkSpecId;

        $r2[1] = $r7;

        $r7 = java.lang.String.format("Acquiring wakelock %s for WorkSpec %s", $r2);

        $r8 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r6.debug($r3, $r7, $r8);

        $r5 = r0.mWakeLock;

        virtualinvoke $r5.acquire();

        r9 = r0.mDispatcher;

        $r10 = virtualinvoke r9.getWorkManager();

        $r11 = virtualinvoke $r10.getWorkDatabase();

        $r12 = virtualinvoke $r11.workSpecDao();

        $r7 = r0.mWorkSpecId;

        $r13 = interfaceinvoke $r12.getWorkSpec($r7);

        if $r13 != null goto label1;

        specialinvoke r0.stopWork();

        return;

     label1:
        $z0 = virtualinvoke $r13.hasConstraints();

        r0.mHasConstraints = $z0;

        if $z0 != 0 goto label2;

        $r6 = androidx.work.Logger.get();

        $r2 = newarray (java.lang.Object)[1];

        $r7 = r0.mWorkSpecId;

        $r2[0] = $r7;

        $r7 = java.lang.String.format("No constraints for %s", $r2);

        $r8 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r6.debug($r3, $r7, $r8);

        $r3 = r0.mWorkSpecId;

        $r14 = java.util.Collections.singletonList($r3);

        virtualinvoke r0.onAllConstraintsMet($r14);

        return;

     label2:
        $r15 = r0.mWorkConstraintsTracker;

        $r14 = java.util.Collections.singletonList($r13);

        virtualinvoke $r15.replace($r14);

        return;
    }

    public void onAllConstraintsMet(java.util.List)
    {
        java.lang.Throwable r11;
        androidx.work.impl.utils.WorkTimer $r10;
        java.lang.Object[] $r5;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher r8;
        androidx.work.impl.Processor $r9;
        java.util.List r1;
        androidx.work.Logger $r4;
        java.lang.Throwable[] $r7;
        int i0;
        java.lang.Object $r3;
        java.lang.String $r2, $r6;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.mWorkSpecId;

        $z0 = interfaceinvoke r1.contains($r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.mLock;

        entermonitor $r3;

     label2:
        i0 = r0.mCurrentState;

        if i0 != 0 goto label5;

        r0.mCurrentState = 1;

        $r4 = androidx.work.Logger.get();

        $r2 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.mWorkSpecId;

        $r5[0] = $r6;

        $r6 = java.lang.String.format("onAllConstraintsMet for %s", $r5);

        $r7 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r2, $r6, $r7);

        r8 = r0.mDispatcher;

        $r9 = virtualinvoke r8.getProcessor();

        $r2 = r0.mWorkSpecId;

        $z0 = virtualinvoke $r9.startWork($r2);

        if $z0 == 0 goto label3;

        r8 = r0.mDispatcher;

        $r10 = virtualinvoke r8.getWorkTimer();

        $r2 = r0.mWorkSpecId;

        virtualinvoke $r10.startTimer($r2, 600000L, r0);

        goto label4;

     label3:
        specialinvoke r0.cleanUp();

     label4:
        goto label6;

     label5:
        $r4 = androidx.work.Logger.get();

        $r2 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.mWorkSpecId;

        $r5[0] = $r6;

        $r6 = java.lang.String.format("Already started work for %s", $r5);

        $r7 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r2, $r6, $r7);

     label6:
        exitmonitor $r3;

     label7:
        return;

     label8:
        r11 := @caughtexception;

        exitmonitor $r3;

     label9:
        throw r11;

        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void onAllConstraintsNotMet(java.util.List)
    {
        java.util.List r1;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.stopWork();

        return;
    }

    public void onExecuted(java.lang.String, boolean)
    {
        android.content.Context r7;
        java.lang.Object[] $r4;
        android.content.Intent $r8;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher $r9;
        androidx.work.Logger $r2;
        java.lang.Throwable[] $r6;
        androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable $r10;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 := @parameter1;

        $r2 = androidx.work.Logger.get();

        $r3 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r1;

        $r5 = java.lang.Boolean.valueOf($z0);

        $r4[1] = $r5;

        $r1 = java.lang.String.format("onExecuted %s, %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug($r3, $r1, $r6);

        specialinvoke r0.cleanUp();

        if $z0 == 0 goto label1;

        r7 = r0.mContext;

        $r1 = r0.mWorkSpecId;

        $r8 = androidx.work.impl.background.systemalarm.CommandHandler.createScheduleWorkIntent(r7, $r1);

        $r9 = r0.mDispatcher;

        $r10 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $i0 = r0.mStartId;

        specialinvoke $r10.<init>($r9, $r8, $i0);

        virtualinvoke $r9.postOnMainThread($r10);

     label1:
        $z0 = r0.mHasConstraints;

        if $z0 == 0 goto label2;

        r7 = r0.mContext;

        $r8 = androidx.work.impl.background.systemalarm.CommandHandler.createConstraintsChangedIntent(r7);

        $r9 = r0.mDispatcher;

        $r10 = new androidx.work.impl.background.systemalarm.SystemAlarmDispatcher$AddRunnable;

        $i0 = r0.mStartId;

        specialinvoke $r10.<init>($r9, $r8, $i0);

        virtualinvoke $r9.postOnMainThread($r10);

     label2:
        return;
    }

    public void onTimeLimitExceeded(java.lang.String)
    {
        androidx.work.Logger $r3;
        java.lang.Object[] $r4;
        java.lang.Throwable[] $r5;
        androidx.work.impl.background.systemalarm.DelayMetCommandHandler r0;
        java.lang.String $r1, $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = androidx.work.Logger.get();

        $r2 = androidx.work.impl.background.systemalarm.DelayMetCommandHandler.TAG;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r1 = java.lang.String.format("Exceeded time limits on execution for %s", $r4);

        $r5 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r3.debug($r2, $r1, $r5);

        specialinvoke r0.stopWork();

        return;
    }
}
