public class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat extends androidx.vectordrawable.graphics.drawable.VectorDrawableCommon
{
    private static final boolean DBG_VECTOR_DRAWABLE;
    static final android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;
    private static final int LINECAP_BUTT;
    private static final int LINECAP_ROUND;
    private static final int LINECAP_SQUARE;
    private static final int LINEJOIN_BEVEL;
    private static final int LINEJOIN_MITER;
    private static final int LINEJOIN_ROUND;
    static final java.lang.String LOGTAG;
    private static final int MAX_CACHED_BITMAP_SIZE;
    private static final java.lang.String SHAPE_CLIP_PATH;
    private static final java.lang.String SHAPE_GROUP;
    private static final java.lang.String SHAPE_PATH;
    private static final java.lang.String SHAPE_VECTOR;
    private boolean mAllowCaching;
    private android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate;
    private android.graphics.ColorFilter mColorFilter;
    private boolean mMutated;
    private android.graphics.PorterDuffColorFilter mTintFilter;
    private final android.graphics.Rect mTmpBounds;
    private final float[] mTmpFloats;
    private final android.graphics.Matrix mTmpMatrix;
    private androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState;

    static void <clinit>()
    {
        android.graphics.PorterDuff$Mode $r0;

        $r0 = android.graphics.PorterDuff$Mode.SRC_IN;

        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.DEFAULT_TINT_MODE = $r0;

        return;
    }

    void <init>()
    {
        android.graphics.Rect $r3;
        float[] $r1;
        android.graphics.Matrix $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        specialinvoke r0.<init>();

        r0.mAllowCaching = 1;

        $r1 = newarray (float)[9];

        r0.mTmpFloats = $r1;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<init>();

        r0.mTmpMatrix = $r2;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<init>();

        r0.mTmpBounds = $r3;

        $r4 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke $r4.<init>();

        r0.mVectorState = $r4;

        return;
    }

    void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)
    {
        android.graphics.Rect $r7;
        float[] $r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r3;
        android.content.res.ColorStateList $r2;
        android.graphics.PorterDuffColorFilter $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r1;
        android.graphics.Matrix $r6;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mAllowCaching = 1;

        $r5 = newarray (float)[9];

        r0.mTmpFloats = $r5;

        $r6 = new android.graphics.Matrix;

        specialinvoke $r6.<init>();

        r0.mTmpMatrix = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<init>();

        r0.mTmpBounds = $r7;

        r0.mVectorState = $r1;

        $r4 = r0.mTintFilter;

        $r2 = $r1.mTint;

        $r3 = $r1.mTintMode;

        $r4 = virtualinvoke r0.updateTintFilter($r4, $r2, $r3);

        r0.mTintFilter = $r4;

        return;
    }

    static int applyAlpha(int, float)
    {
        int $i0, $i1;
        float $f0, $f1;

        $i1 := @parameter0;

        $f0 := @parameter1;

        $i0 = android.graphics.Color.alpha($i1);

        $i1 = $i1 & 16777215;

        $f1 = (float) $i0;

        $f0 = $f1 * $f0;

        $i0 = (int) $f0;

        $i0 = $i0 << 24;

        $i1 = $i1 | $i0;

        return $i1;
    }

    public static androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources, int, android.content.res.Resources$Theme)
    {
        android.content.res.XmlResourceParser $r6;
        java.io.IOException r9;
        android.graphics.drawable.Drawable $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r2;
        org.xmlpull.v1.XmlPullParserException $r8;
        android.graphics.drawable.Drawable$ConstantState $r5;
        android.util.AttributeSet $r7;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $r4;
        int i0, i1;
        android.content.res.Resources$Theme r1;
        android.content.res.Resources r0;

        r0 := @parameter0;

        i0 := @parameter1;

        r1 := @parameter2;

        i1 = android.os.Build$VERSION.SDK_INT;

        if i1 < 24 goto label01;

        r2 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke r2.<init>();

        $r3 = androidx.core.content.res.ResourcesCompat.getDrawable(r0, i0, r1);

        r2.mDelegateDrawable = $r3;

        $r4 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $r3 = r2.mDelegateDrawable;

        $r5 = virtualinvoke $r3.getConstantState();

        specialinvoke $r4.<init>($r5);

        r2.mCachedConstantStateDelegate = $r4;

        return r2;

     label01:
        $r6 = virtualinvoke r0.getXml(i0);

        $r7 = android.util.Xml.asAttributeSet($r6);

     label02:
        i0 = interfaceinvoke $r6.next();

     label03:
        if i0 == 2 goto label04;

        if i0 == 1 goto label04;

        goto label02;

     label04:
        if i0 != 2 goto label07;

     label05:
        r2 = androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.createFromXmlInner(r0, $r6, $r7, r1);

     label06:
        return r2;

     label07:
        $r8 = new org.xmlpull.v1.XmlPullParserException;

     label08:
        specialinvoke $r8.<init>("No start tag found");

     label09:
        throw $r8;

     label10:
        r9 := @caughtexception;

        android.util.Log.e("VectorDrawableCompat", "parser error", r9);

        goto label12;

     label11:
        $r8 := @caughtexception;

        android.util.Log.e("VectorDrawableCompat", "parser error", $r8);

     label12:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label03 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label10 with label11;
        catch java.io.IOException from label01 to label03 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public static androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.util.AttributeSet $r2;
        android.content.res.Resources$Theme $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r4;
        android.content.res.Resources $r0;
        org.xmlpull.v1.XmlPullParser $r1;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r3 := @parameter3;

        r4 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke r4.<init>();

        virtualinvoke r4.inflate($r0, $r1, $r2, $r3);

        return r4;
    }

    private void inflateInternal(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r6;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath r13;
        java.util.ArrayList $r14;
        android.util.AttributeSet $r3;
        int $i0, i1, $i2;
        java.lang.String r9, $r10, $r12;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r5;
        android.content.res.Resources$Theme $r4;
        org.xmlpull.v1.XmlPullParser $r2;
        boolean z0, $z1;
        androidx.collection.ArrayMap $r15;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath r16;
        org.xmlpull.v1.XmlPullParserException r18;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup r8, r17;
        java.lang.Object $r11;
        java.util.ArrayDeque r7;
        android.content.res.Resources $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 := @parameter3;

        r5 = r0.mVectorState;

        r6 = r5.mVPathRenderer;

        z0 = 1;

        r7 = new java.util.ArrayDeque;

        specialinvoke r7.<init>();

        r8 = r6.mRootGroup;

        virtualinvoke r7.push(r8);

        i1 = interfaceinvoke $r2.getEventType();

        $i0 = interfaceinvoke $r2.getDepth();

        $i0 = $i0 + 1;

     label01:
        if i1 == 1 goto label11;

        $i2 = interfaceinvoke $r2.getDepth();

        if $i2 >= $i0 goto label02;

        if i1 == 3 goto label11;

     label02:
        r9 = "group";

        if i1 != 2 goto label09;

        $r10 = interfaceinvoke $r2.getName();

        $r11 = virtualinvoke r7.peek();

        r8 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup) $r11;

        $r12 = "path";

        $z1 = virtualinvoke $r12.equals($r10);

        if $z1 == 0 goto label04;

        r13 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath;

        specialinvoke r13.<init>();

        virtualinvoke r13.inflate($r1, $r3, $r4, $r2);

        $r14 = r8.mChildren;

        virtualinvoke $r14.add(r13);

        r9 = virtualinvoke r13.getPathName();

        if r9 == null goto label03;

        $r15 = r6.mVGTargetsMap;

        r9 = virtualinvoke r13.getPathName();

        virtualinvoke $r15.put(r9, r13);

     label03:
        z0 = 0;

        i1 = r5.mChangingConfigurations;

        $i2 = r13.mChangingConfigurations;

        i1 = i1 | $i2;

        r5.mChangingConfigurations = i1;

        goto label08;

     label04:
        $r12 = "clip-path";

        $z1 = virtualinvoke $r12.equals($r10);

        if $z1 == 0 goto label06;

        r16 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath;

        specialinvoke r16.<init>();

        virtualinvoke r16.inflate($r1, $r3, $r4, $r2);

        $r14 = r8.mChildren;

        virtualinvoke $r14.add(r16);

        r9 = virtualinvoke r16.getPathName();

        if r9 == null goto label05;

        $r15 = r6.mVGTargetsMap;

        r9 = virtualinvoke r16.getPathName();

        virtualinvoke $r15.put(r9, r16);

     label05:
        i1 = r5.mChangingConfigurations;

        $i2 = r16.mChangingConfigurations;

        i1 = i1 | $i2;

        r5.mChangingConfigurations = i1;

        goto label08;

     label06:
        $z1 = virtualinvoke r9.equals($r10);

        if $z1 == 0 goto label08;

        r17 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        specialinvoke r17.<init>();

        virtualinvoke r17.inflate($r1, $r3, $r4, $r2);

        $r14 = r8.mChildren;

        virtualinvoke $r14.add(r17);

        virtualinvoke r7.push(r17);

        r9 = virtualinvoke r17.getGroupName();

        if r9 == null goto label07;

        $r15 = r6.mVGTargetsMap;

        r9 = virtualinvoke r17.getGroupName();

        virtualinvoke $r15.put(r9, r17);

     label07:
        i1 = r5.mChangingConfigurations;

        $i2 = r17.mChangingConfigurations;

        i1 = i1 | $i2;

        r5.mChangingConfigurations = i1;

        goto label08;

     label08:
        goto label10;

     label09:
        if i1 != 3 goto label08;

        $r10 = interfaceinvoke $r2.getName();

        $z1 = virtualinvoke r9.equals($r10);

        if $z1 == 0 goto label10;

        virtualinvoke r7.pop();

     label10:
        i1 = interfaceinvoke $r2.next();

        goto label01;

     label11:
        if z0 != 0 goto label12;

        return;

     label12:
        r18 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r18.<init>("no path defined");

        goto label13;

     label13:
        throw r18;
    }

    private boolean needMirroring()
    {
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $z0 = virtualinvoke r0.isAutoMirrored();

        if $z0 == 0 goto label1;

        $i0 = androidx.core.graphics.drawable.DrawableCompat.getLayoutDirection(r0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static android.graphics.PorterDuff$Mode parseTintModeCompat(int, android.graphics.PorterDuff$Mode)
    {
        int $i0;
        android.graphics.PorterDuff$Mode $r0;

        $i0 := @parameter0;

        $r0 := @parameter1;

        lookupswitch($i0)
        {
            case 3: goto label7;
            case 5: goto label6;
            case 9: goto label5;
            case 14: goto label4;
            case 15: goto label3;
            case 16: goto label2;
            default: goto label1;
        };

     label1:
        return $r0;

     label2:
        $r0 = android.graphics.PorterDuff$Mode.ADD;

        return $r0;

     label3:
        $r0 = android.graphics.PorterDuff$Mode.SCREEN;

        return $r0;

     label4:
        $r0 = android.graphics.PorterDuff$Mode.MULTIPLY;

        return $r0;

     label5:
        $r0 = android.graphics.PorterDuff$Mode.SRC_ATOP;

        return $r0;

     label6:
        $r0 = android.graphics.PorterDuff$Mode.SRC_IN;

        return $r0;

     label7:
        $r0 = android.graphics.PorterDuff$Mode.SRC_OVER;

        return $r0;
    }

    private void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup, int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        java.util.ArrayList r6;
        int $i0, i1, $i2;
        java.lang.String r2, $r4;
        android.graphics.Matrix $r5;
        boolean $z0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup $r1, $r9;
        float f0;
        java.lang.StringBuilder r3;
        java.lang.Object $r7;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject r8;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath $r10;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        r2 = "";

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<init>();

        r3 = virtualinvoke r3.append(r2);

        r3 = virtualinvoke r3.append("    ");

        r2 = virtualinvoke r3.toString();

        i1 = i1 + 1;

        goto label1;

     label2:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<init>();

        r3 = virtualinvoke r3.append(r2);

        r3 = virtualinvoke r3.append("current group is :");

        $r4 = virtualinvoke $r1.getGroupName();

        r3 = virtualinvoke r3.append($r4);

        r3 = virtualinvoke r3.append(" rotation is ");

        f0 = $r1.mRotate;

        r3 = virtualinvoke r3.append(f0);

        $r4 = virtualinvoke r3.toString();

        android.util.Log.v("VectorDrawableCompat", $r4);

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<init>();

        r3 = virtualinvoke r3.append(r2);

        r3 = virtualinvoke r3.append("matrix is :");

        $r5 = virtualinvoke $r1.getLocalMatrix();

        r2 = virtualinvoke $r5.toString();

        r3 = virtualinvoke r3.append(r2);

        r2 = virtualinvoke r3.toString();

        android.util.Log.v("VectorDrawableCompat", r2);

        i1 = 0;

     label3:
        r6 = $r1.mChildren;

        $i2 = virtualinvoke r6.size();

        if i1 >= $i2 goto label6;

        r6 = $r1.mChildren;

        $r7 = virtualinvoke r6.get(i1);

        r8 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject) $r7;

        $z0 = r8 instanceof androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        if $z0 == 0 goto label4;

        $r9 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup) r8;

        $i2 = $i0 + 1;

        specialinvoke r0.printGroupTree($r9, $i2);

        goto label5;

     label4:
        $r10 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath) r8;

        $i2 = $i0 + 1;

        virtualinvoke $r10.printVPath($i2);

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.TypedArray $r1;
        android.content.res.ColorStateList $r7;
        byte b1;
        int $i0;
        java.lang.String $r8;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r4;
        android.content.res.Resources$Theme $r3;
        org.xmlpull.v1.XmlPullParser $r2;
        boolean z0;
        androidx.collection.ArrayMap $r9;
        android.graphics.PorterDuff$Mode r6;
        org.xmlpull.v1.XmlPullParserException $r12;
        float f0;
        java.lang.StringBuilder r10, $r11;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        r4 = r0.mVectorState;

        r5 = r4.mVPathRenderer;

        $i0 = androidx.core.content.res.TypedArrayUtils.getNamedInt($r1, $r2, "tintMode", 6, -1);

        r6 = android.graphics.PorterDuff$Mode.SRC_IN;

        r6 = androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.parseTintModeCompat($i0, r6);

        r4.mTintMode = r6;

        $r7 = androidx.core.content.res.TypedArrayUtils.getNamedColorStateList($r1, $r2, $r3, "tint", 1);

        if $r7 == null goto label1;

        r4.mTint = $r7;

     label1:
        z0 = r4.mAutoMirrored;

        z0 = androidx.core.content.res.TypedArrayUtils.getNamedBoolean($r1, $r2, "autoMirrored", 5, z0);

        r4.mAutoMirrored = z0;

        f0 = r5.mViewportWidth;

        f0 = androidx.core.content.res.TypedArrayUtils.getNamedFloat($r1, $r2, "viewportWidth", 7, f0);

        r5.mViewportWidth = f0;

        f0 = r5.mViewportHeight;

        f0 = androidx.core.content.res.TypedArrayUtils.getNamedFloat($r1, $r2, "viewportHeight", 8, f0);

        r5.mViewportHeight = f0;

        f0 = r5.mViewportWidth;

        b1 = f0 cmpg 0.0F;

        $i0 = (int) b1;

        if $i0 <= 0 goto label5;

        f0 = r5.mViewportHeight;

        b1 = f0 cmpg 0.0F;

        $i0 = (int) b1;

        if $i0 <= 0 goto label4;

        f0 = r5.mBaseWidth;

        f0 = virtualinvoke $r1.getDimension(3, f0);

        r5.mBaseWidth = f0;

        f0 = r5.mBaseHeight;

        f0 = virtualinvoke $r1.getDimension(2, f0);

        r5.mBaseHeight = f0;

        f0 = r5.mBaseWidth;

        b1 = f0 cmpg 0.0F;

        $i0 = (int) b1;

        if $i0 <= 0 goto label3;

        f0 = r5.mBaseHeight;

        b1 = f0 cmpg 0.0F;

        $i0 = (int) b1;

        if $i0 <= 0 goto label2;

        f0 = virtualinvoke r5.getAlpha();

        f0 = androidx.core.content.res.TypedArrayUtils.getNamedFloat($r1, $r2, "alpha", 4, f0);

        virtualinvoke r5.setAlpha(f0);

        $r8 = virtualinvoke $r1.getString(0);

        if $r8 == null goto label6;

        r5.mRootName = $r8;

        $r9 = r5.mVGTargetsMap;

        virtualinvoke $r9.put($r8, r5);

        return;

     label2:
        $r12 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r8 = virtualinvoke $r1.getPositionDescription();

        r10 = virtualinvoke $r11.append($r8);

        r10 = virtualinvoke r10.append("<vector> tag requires height > 0");

        $r8 = virtualinvoke r10.toString();

        specialinvoke $r12.<init>($r8);

        throw $r12;

     label3:
        $r12 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r8 = virtualinvoke $r1.getPositionDescription();

        r10 = virtualinvoke $r11.append($r8);

        r10 = virtualinvoke r10.append("<vector> tag requires width > 0");

        $r8 = virtualinvoke r10.toString();

        specialinvoke $r12.<init>($r8);

        throw $r12;

     label4:
        $r12 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r8 = virtualinvoke $r1.getPositionDescription();

        r10 = virtualinvoke $r11.append($r8);

        r10 = virtualinvoke r10.append("<vector> tag requires viewportHeight > 0");

        $r8 = virtualinvoke r10.toString();

        specialinvoke $r12.<init>($r8);

        throw $r12;

     label5:
        $r12 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r8 = virtualinvoke $r1.getPositionDescription();

        r10 = virtualinvoke $r11.append($r8);

        r10 = virtualinvoke r10.append("<vector> tag requires viewportWidth > 0");

        $r8 = virtualinvoke r10.toString();

        specialinvoke $r12.<init>($r8);

        throw $r12;

     label6:
        return;
    }

    public volatile void applyTheme(android.content.res.Resources$Theme)
    {
        android.content.res.Resources$Theme $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.applyTheme($r1);

        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        androidx.core.graphics.drawable.DrawableCompat.canApplyTheme($r1);

     label1:
        return 0;
    }

    public volatile void clearColorFilter()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        specialinvoke r0.clearColorFilter();

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.Rect r3;
        float[] $r6;
        android.graphics.drawable.Drawable r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        byte b1;
        int $i0, $i2, $i3, i4;
        android.graphics.Canvas $r1;
        android.graphics.Matrix r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r7;
        boolean $z0;
        android.graphics.ColorFilter r4;
        float f0, f1, f2, f3;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mDelegateDrawable;

        if r2 == null goto label01;

        r2 = r0.mDelegateDrawable;

        virtualinvoke r2.draw($r1);

        return;

     label01:
        r3 = r0.mTmpBounds;

        virtualinvoke r0.copyBounds(r3);

        r3 = r0.mTmpBounds;

        $i0 = virtualinvoke r3.width();

        if $i0 <= 0 goto label10;

        r3 = r0.mTmpBounds;

        $i0 = virtualinvoke r3.height();

        if $i0 > 0 goto label02;

        return;

     label02:
        r4 = r0.mColorFilter;

        if r4 != null goto label03;

        r4 = r0.mTintFilter;

     label03:
        r5 = r0.mTmpMatrix;

        virtualinvoke $r1.getMatrix(r5);

        r5 = r0.mTmpMatrix;

        $r6 = r0.mTmpFloats;

        virtualinvoke r5.getValues($r6);

        $r6 = r0.mTmpFloats;

        f0 = $r6[0];

        f0 = java.lang.Math.abs(f0);

        $r6 = r0.mTmpFloats;

        f1 = $r6[4];

        f1 = java.lang.Math.abs(f1);

        $r6 = r0.mTmpFloats;

        f2 = $r6[1];

        f2 = java.lang.Math.abs(f2);

        $r6 = r0.mTmpFloats;

        f3 = $r6[3];

        f3 = java.lang.Math.abs(f3);

        b1 = f2 cmpl 0.0F;

        if b1 != 0 goto label04;

        b1 = f3 cmpl 0.0F;

        if b1 == 0 goto label05;

     label04:
        f0 = 1.0F;

        f1 = 1.0F;

     label05:
        r3 = r0.mTmpBounds;

        $i0 = virtualinvoke r3.width();

        f2 = (float) $i0;

        f0 = f2 * f0;

        $i0 = (int) f0;

        r3 = r0.mTmpBounds;

        $i2 = virtualinvoke r3.height();

        f0 = (float) $i2;

        f0 = f0 * f1;

        $i2 = (int) f0;

        $i0 = java.lang.Math.min(2048, $i0);

        $i2 = java.lang.Math.min(2048, $i2);

        if $i0 <= 0 goto label10;

        if $i2 > 0 goto label06;

        return;

     label06:
        $i3 = virtualinvoke $r1.save();

        r3 = r0.mTmpBounds;

        i4 = r3.left;

        f0 = (float) i4;

        r3 = r0.mTmpBounds;

        i4 = r3.top;

        f1 = (float) i4;

        virtualinvoke $r1.translate(f0, f1);

        $z0 = specialinvoke r0.needMirroring();

        if $z0 == 0 goto label07;

        r3 = r0.mTmpBounds;

        i4 = virtualinvoke r3.width();

        f0 = (float) i4;

        virtualinvoke $r1.translate(f0, 0.0F);

        virtualinvoke $r1.scale(-1.0F, 1.0F);

     label07:
        r3 = r0.mTmpBounds;

        virtualinvoke r3.offsetTo(0, 0);

        $r7 = r0.mVectorState;

        virtualinvoke $r7.createCachedBitmapIfNeeded($i0, $i2);

        $z0 = r0.mAllowCaching;

        if $z0 != 0 goto label08;

        $r7 = r0.mVectorState;

        virtualinvoke $r7.updateCachedBitmap($i0, $i2);

        goto label09;

     label08:
        $r7 = r0.mVectorState;

        $z0 = virtualinvoke $r7.canReuseCache();

        if $z0 != 0 goto label09;

        $r7 = r0.mVectorState;

        virtualinvoke $r7.updateCachedBitmap($i0, $i2);

        $r7 = r0.mVectorState;

        virtualinvoke $r7.updateCacheStates();

     label09:
        $r7 = r0.mVectorState;

        r3 = r0.mTmpBounds;

        virtualinvoke $r7.drawCachedBitmapWithRootAlpha($r1, r4, r3);

        virtualinvoke $r1.restoreToCount($i3);

     label10:
        return;
    }

    public int getAlpha()
    {
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $i0 = androidx.core.graphics.drawable.DrawableCompat.getAlpha($r1);

        return $i0;

     label1:
        $r2 = r0.mVectorState;

        $r3 = $r2.mVPathRenderer;

        $i0 = virtualinvoke $r3.getRootAlpha();

        return $i0;
    }

    public int getChangingConfigurations()
    {
        int $i0, $i1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $i0 = virtualinvoke $r1.getChangingConfigurations();

        return $i0;

     label1:
        $i0 = specialinvoke r0.getChangingConfigurations();

        $r2 = r0.mVectorState;

        $i1 = virtualinvoke $r2.getChangingConfigurations();

        $i0 = $i0 | $i1;

        return $i0;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.ColorFilter $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r2 = r0.mDelegateDrawable;

        if $r2 == null goto label1;

        $r2 = r0.mDelegateDrawable;

        $r1 = androidx.core.graphics.drawable.DrawableCompat.getColorFilter($r2);

        return $r1;

     label1:
        $r1 = r0.mColorFilter;

        return $r1;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.Drawable$ConstantState $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $r2;
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r4;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 24 goto label1;

        $r2 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $r1 = r0.mDelegateDrawable;

        $r3 = virtualinvoke $r1.getConstantState();

        specialinvoke $r2.<init>($r3);

        return $r2;

     label1:
        $r4 = r0.mVectorState;

        $i0 = virtualinvoke r0.getChangingConfigurations();

        $r4.mChangingConfigurations = $i0;

        $r4 = r0.mVectorState;

        return $r4;
    }

    public volatile android.graphics.drawable.Drawable getCurrent()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = specialinvoke r0.getCurrent();

        return $r1;
    }

    public int getIntrinsicHeight()
    {
        int $i0;
        float $f0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $i0 = virtualinvoke $r1.getIntrinsicHeight();

        return $i0;

     label1:
        $r2 = r0.mVectorState;

        $r3 = $r2.mVPathRenderer;

        $f0 = $r3.mBaseHeight;

        $i0 = (int) $f0;

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        int $i0;
        float $f0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $i0 = virtualinvoke $r1.getIntrinsicWidth();

        return $i0;

     label1:
        $r2 = r0.mVectorState;

        $r3 = $r2.mVPathRenderer;

        $f0 = $r3.mBaseWidth;

        $i0 = (int) $f0;

        return $i0;
    }

    public volatile int getMinimumHeight()
    {
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $i0 = specialinvoke r0.getMinimumHeight();

        return $i0;
    }

    public volatile int getMinimumWidth()
    {
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $i0 = specialinvoke r0.getMinimumWidth();

        return $i0;
    }

    public int getOpacity()
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $i0 = virtualinvoke $r1.getOpacity();

        return $i0;

     label1:
        return -3;
    }

    public volatile boolean getPadding(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = specialinvoke r0.getPadding($r1);

        return $z0;
    }

    public float getPixelSize()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        byte b0;
        float f0, f1, f2, f3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r1;

        r0 := @this;

        r1 = r0.mVectorState;

        if r1 == null goto label2;

        r2 = r1.mVPathRenderer;

        if r2 == null goto label2;

        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f1 = r2.mBaseWidth;

        b0 = f1 cmpl 0.0F;

        if b0 == 0 goto label2;

        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f1 = r2.mBaseHeight;

        b0 = f1 cmpl 0.0F;

        if b0 == 0 goto label2;

        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f1 = r2.mViewportHeight;

        b0 = f1 cmpl 0.0F;

        if b0 == 0 goto label2;

        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f1 = r2.mViewportWidth;

        b0 = f1 cmpl 0.0F;

        if b0 != 0 goto label1;

        goto label2;

     label1:
        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f0 = r2.mBaseWidth;

        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f1 = r2.mBaseHeight;

        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f2 = r2.mViewportWidth;

        r1 = r0.mVectorState;

        r2 = r1.mVPathRenderer;

        f3 = r2.mViewportHeight;

        f0 = f2 / f0;

        f1 = f3 / f1;

        f1 = java.lang.Math.min(f0, f1);

        return f1;

     label2:
        return 1.0F;
    }

    public volatile int[] getState()
    {
        int[] $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = specialinvoke r0.getState();

        return $r1;
    }

    java.lang.Object getTargetByName(java.lang.String)
    {
        java.lang.Object $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r4;
        java.lang.String $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        androidx.collection.ArrayMap $r5;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mVectorState;

        $r4 = $r3.mVPathRenderer;

        $r5 = $r4.mVGTargetsMap;

        $r2 = virtualinvoke $r5.get($r1);

        return $r2;
    }

    public volatile android.graphics.Region getTransparentRegion()
    {
        android.graphics.Region $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = specialinvoke r0.getTransparentRegion();

        return $r1;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.util.AttributeSet $r3;
        android.graphics.drawable.Drawable $r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 = r0.mDelegateDrawable;

        if $r4 == null goto label1;

        $r4 = r0.mDelegateDrawable;

        virtualinvoke $r4.inflate($r1, $r2, $r3);

        return;

     label1:
        virtualinvoke r0.inflate($r1, $r2, $r3, null);

        return;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer r5;
        android.graphics.drawable.Drawable r8;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r7;
        android.content.res.TypedArray $r11;
        android.content.res.ColorStateList $r6;
        android.util.AttributeSet $r3;
        int[] r10;
        int $i0;
        android.graphics.PorterDuffColorFilter $r12;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r9;
        android.content.res.Resources$Theme $r4;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 := @parameter3;

        r8 = r0.mDelegateDrawable;

        if r8 == null goto label1;

        r8 = r0.mDelegateDrawable;

        androidx.core.graphics.drawable.DrawableCompat.inflate(r8, $r1, $r2, $r3, $r4);

        return;

     label1:
        r9 = r0.mVectorState;

        r5 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        specialinvoke r5.<init>();

        r9.mVPathRenderer = r5;

        r10 = androidx.vectordrawable.graphics.drawable.AndroidResources.STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY;

        $r11 = androidx.core.content.res.TypedArrayUtils.obtainAttributes($r1, $r4, $r3, r10);

        specialinvoke r0.updateStateFromTypedArray($r11, $r2, $r4);

        virtualinvoke $r11.recycle();

        $i0 = virtualinvoke r0.getChangingConfigurations();

        r9.mChangingConfigurations = $i0;

        r9.mCacheDirty = 1;

        specialinvoke r0.inflateInternal($r1, $r2, $r3, $r4);

        $r12 = r0.mTintFilter;

        $r6 = r9.mTint;

        $r7 = r9.mTintMode;

        $r12 = virtualinvoke r0.updateTintFilter($r12, $r6, $r7);

        r0.mTintFilter = $r12;

        return;
    }

    public void invalidateSelf()
    {
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        virtualinvoke $r1.invalidateSelf();

        return;

     label1:
        specialinvoke r0.invalidateSelf();

        return;
    }

    public boolean isAutoMirrored()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $z0 = androidx.core.graphics.drawable.DrawableCompat.isAutoMirrored($r1);

        return $z0;

     label1:
        $r2 = r0.mVectorState;

        $z0 = $r2.mAutoMirrored;

        return $z0;
    }

    public boolean isStateful()
    {
        android.content.res.ColorStateList $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $z0 = virtualinvoke $r1.isStateful();

        return $z0;

     label1:
        $z0 = specialinvoke r0.isStateful();

        if $z0 != 0 goto label3;

        $r2 = r0.mVectorState;

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.isStateful();

        if $z0 != 0 goto label3;

        $r2 = r0.mVectorState;

        $r3 = $r2.mTint;

        if $r3 == null goto label2;

        $r2 = r0.mVectorState;

        $r3 = $r2.mTint;

        $z0 = virtualinvoke $r3.isStateful();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public volatile void jumpToCurrentState()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        specialinvoke r0.jumpToCurrentState();

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r1, $r3;
        android.graphics.drawable.Drawable $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $r2 = r0.mDelegateDrawable;

        if $r2 == null goto label1;

        $r2 = r0.mDelegateDrawable;

        virtualinvoke $r2.mutate();

        return r0;

     label1:
        $z0 = r0.mMutated;

        if $z0 != 0 goto label2;

        $r2 = specialinvoke r0.mutate();

        if $r2 != r0 goto label2;

        $r3 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $r1 = r0.mVectorState;

        specialinvoke $r3.<init>($r1);

        r0.mVectorState = $r3;

        r0.mMutated = 1;

     label2:
        return r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegateDrawable;

        if $r2 == null goto label1;

        $r2 = r0.mDelegateDrawable;

        virtualinvoke $r2.setBounds($r1);

     label1:
        return;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.Drawable r5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r4;
        android.content.res.ColorStateList $r3;
        int[] $r1;
        android.graphics.PorterDuffColorFilter $r6;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r2;
        boolean $z0, $z1;

        r0 := @this;

        $r1 := @parameter0;

        r5 = r0.mDelegateDrawable;

        if r5 == null goto label1;

        r5 = r0.mDelegateDrawable;

        $z0 = virtualinvoke r5.setState($r1);

        return $z0;

     label1:
        $z0 = 0;

        r2 = r0.mVectorState;

        $r3 = r2.mTint;

        if $r3 == null goto label2;

        $r4 = r2.mTintMode;

        if $r4 == null goto label2;

        $r6 = r0.mTintFilter;

        $r3 = r2.mTint;

        $r4 = r2.mTintMode;

        $r6 = virtualinvoke r0.updateTintFilter($r6, $r3, $r4);

        r0.mTintFilter = $r6;

        virtualinvoke r0.invalidateSelf();

        $z0 = 1;

     label2:
        $z1 = virtualinvoke r2.isStateful();

        if $z1 == 0 goto label3;

        $z1 = virtualinvoke r2.onStateChanged($r1);

        if $z1 == 0 goto label3;

        virtualinvoke r0.invalidateSelf();

        return 1;

     label3:
        return $z0;
    }

    public void scheduleSelf(java.lang.Runnable, long)
    {
        long $l0;
        java.lang.Runnable $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        $l0 := @parameter1;

        $r2 = r0.mDelegateDrawable;

        if $r2 == null goto label1;

        $r2 = r0.mDelegateDrawable;

        virtualinvoke $r2.scheduleSelf($r1, $l0);

        return;

     label1:
        specialinvoke r0.scheduleSelf($r1, $l0);

        return;
    }

    void setAllowCaching(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        r0.mAllowCaching = $z0;

        return;
    }

    public void setAlpha(int)
    {
        int $i0, $i1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        virtualinvoke $r1.setAlpha($i0);

        return;

     label1:
        $r2 = r0.mVectorState;

        $r3 = $r2.mVPathRenderer;

        $i1 = virtualinvoke $r3.getRootAlpha();

        if $i1 == $i0 goto label2;

        $r2 = r0.mVectorState;

        $r3 = $r2.mVPathRenderer;

        virtualinvoke $r3.setRootAlpha($i0);

        virtualinvoke r0.invalidateSelf();

     label2:
        return;
    }

    public void setAutoMirrored(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $r2;
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored($r1, $z0);

        return;

     label1:
        $r2 = r0.mVectorState;

        $r2.mAutoMirrored = $z0;

        return;
    }

    public volatile void setChangingConfigurations(int)
    {
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $i0 := @parameter0;

        specialinvoke r0.setChangingConfigurations($i0);

        return;
    }

    public volatile void setColorFilter(int, android.graphics.PorterDuff$Mode)
    {
        int $i0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this;

        $i0 := @parameter0;

        $r1 := @parameter1;

        specialinvoke r0.setColorFilter($i0, $r1);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.ColorFilter $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegateDrawable;

        if $r2 == null goto label1;

        $r2 = r0.mDelegateDrawable;

        virtualinvoke $r2.setColorFilter($r1);

        return;

     label1:
        r0.mColorFilter = $r1;

        virtualinvoke r0.invalidateSelf();

        return;
    }

    public volatile void setFilterBitmap(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        specialinvoke r0.setFilterBitmap($z0);

        return;
    }

    public volatile void setHotspot(float, float)
    {
        float $f0, $f1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        specialinvoke r0.setHotspot($f0, $f1);

        return;
    }

    public volatile void setHotspotBounds(int, int, int, int)
    {
        int $i0, $i1, $i2, $i3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        $i2 := @parameter2;

        $i3 := @parameter3;

        specialinvoke r0.setHotspotBounds($i0, $i1, $i2, $i3);

        return;
    }

    public volatile boolean setState(int[])
    {
        int[] $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = specialinvoke r0.setState($r1);

        return $z0;
    }

    public void setTint(int)
    {
        android.content.res.ColorStateList $r1;
        int $i0;
        android.graphics.drawable.Drawable $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $i0 := @parameter0;

        $r2 = r0.mDelegateDrawable;

        if $r2 == null goto label1;

        $r2 = r0.mDelegateDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTint($r2, $i0);

        return;

     label1:
        $r1 = android.content.res.ColorStateList.valueOf($i0);

        virtualinvoke r0.setTintList($r1);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r6;
        android.graphics.PorterDuffColorFilter $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r5;
        android.graphics.drawable.Drawable r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r2;

        r0 := @this;

        $r1 := @parameter0;

        r4 = r0.mDelegateDrawable;

        if r4 == null goto label1;

        r4 = r0.mDelegateDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTintList(r4, $r1);

        return;

     label1:
        r5 = r0.mVectorState;

        $r6 = r5.mTint;

        if $r6 == $r1 goto label2;

        r5.mTint = $r1;

        $r3 = r0.mTintFilter;

        $r2 = r5.mTintMode;

        $r3 = virtualinvoke r0.updateTintFilter($r3, $r1, $r2);

        r0.mTintFilter = $r3;

        virtualinvoke r0.invalidateSelf();

     label2:
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.content.res.ColorStateList $r2;
        android.graphics.PorterDuffColorFilter $r3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r5;
        android.graphics.drawable.Drawable r4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r1, $r6;

        r0 := @this;

        $r1 := @parameter0;

        r4 = r0.mDelegateDrawable;

        if r4 == null goto label1;

        r4 = r0.mDelegateDrawable;

        androidx.core.graphics.drawable.DrawableCompat.setTintMode(r4, $r1);

        return;

     label1:
        r5 = r0.mVectorState;

        $r6 = r5.mTintMode;

        if $r6 == $r1 goto label2;

        r5.mTintMode = $r1;

        $r3 = r0.mTintFilter;

        $r2 = r5.mTint;

        $r3 = virtualinvoke r0.updateTintFilter($r3, $r2, $r1);

        r0.mTintFilter = $r3;

        virtualinvoke r0.invalidateSelf();

     label2:
        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.Drawable $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        boolean $z0, $z1;

        r0 := @this;

        $z0 := @parameter0;

        $z1 := @parameter1;

        $r1 = r0.mDelegateDrawable;

        if $r1 == null goto label1;

        $r1 = r0.mDelegateDrawable;

        $z0 = virtualinvoke $r1.setVisible($z0, $z1);

        return $z0;

     label1:
        $z0 = specialinvoke r0.setVisible($z0, $z1);

        return $z0;
    }

    public void unscheduleSelf(java.lang.Runnable)
    {
        java.lang.Runnable $r1;
        android.graphics.drawable.Drawable $r2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegateDrawable;

        if $r2 == null goto label1;

        $r2 = r0.mDelegateDrawable;

        virtualinvoke $r2.unscheduleSelf($r1);

        return;

     label1:
        specialinvoke r0.unscheduleSelf($r1);

        return;
    }

    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter, android.content.res.ColorStateList, android.graphics.PorterDuff$Mode)
    {
        android.content.res.ColorStateList $r2;
        int[] $r4;
        int $i0;
        android.graphics.PorterDuffColorFilter $r1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat r0;
        android.graphics.PorterDuff$Mode $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        if $r2 == null goto label2;

        if $r3 != null goto label1;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.getState();

        $i0 = virtualinvoke $r2.getColorForState($r4, 0);

        $r1 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r1.<init>($i0, $r3);

        return $r1;

     label2:
        return null;
    }
}
