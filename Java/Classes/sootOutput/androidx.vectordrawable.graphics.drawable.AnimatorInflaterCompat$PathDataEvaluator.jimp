class androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator extends java.lang.Object implements android.animation.TypeEvaluator
{
    private androidx.core.graphics.PathParser$PathDataNode[] mNodeArray;

    void <init>()
    {
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    void <init>(androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode[] $r1;
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mNodeArray = $r1;

        return;
    }

    public volatile java.lang.Object evaluate(float, java.lang.Object, java.lang.Object)
    {
        androidx.core.graphics.PathParser$PathDataNode[] $r1, $r4;
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator r0;
        float $f0;
        java.lang.Object $r2, $r3;

        r0 := @this;

        $f0 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r1 = (androidx.core.graphics.PathParser$PathDataNode[]) $r2;

        $r4 = (androidx.core.graphics.PathParser$PathDataNode[]) $r3;

        $r1 = virtualinvoke r0.evaluate($f0, $r1, $r4);

        return $r1;
    }

    public androidx.core.graphics.PathParser$PathDataNode[] evaluate(float, androidx.core.graphics.PathParser$PathDataNode[], androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode $r3, $r4, $r6;
        java.lang.IllegalArgumentException r7;
        androidx.core.graphics.PathParser$PathDataNode[] $r1, $r2, r5;
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator r0;
        int i0, $i1;
        float $f0;
        boolean $z0;

        r0 := @this;

        $f0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $z0 = androidx.core.graphics.PathParser.canMorph($r1, $r2);

        if $z0 == 0 goto label4;

        r5 = r0.mNodeArray;

        $z0 = androidx.core.graphics.PathParser.canMorph(r5, $r1);

        if $z0 != 0 goto label1;

        r5 = androidx.core.graphics.PathParser.deepCopyNodes($r1);

        r0.mNodeArray = r5;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        r5 = r0.mNodeArray;

        $r6 = r5[i0];

        $r3 = $r1[i0];

        $r4 = $r2[i0];

        virtualinvoke $r6.interpolatePathDataNode($r3, $r4, $f0);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r1 = r0.mNodeArray;

        return $r1;

     label4:
        r7 = new java.lang.IllegalArgumentException;

        specialinvoke r7.<init>("Can\'t interpolate between two incompatible pathData");

        goto label5;

     label5:
        throw r7;
    }
}
