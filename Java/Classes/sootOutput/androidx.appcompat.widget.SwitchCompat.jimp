public class androidx.appcompat.widget.SwitchCompat extends android.widget.CompoundButton
{
    private static final java.lang.String ACCESSIBILITY_EVENT_CLASS_NAME;
    private static final int[] CHECKED_STATE_SET;
    private static final int MONOSPACE;
    private static final int SANS;
    private static final int SERIF;
    private static final int THUMB_ANIMATION_DURATION;
    private static final android.util.Property THUMB_POS;
    private static final int TOUCH_MODE_DOWN;
    private static final int TOUCH_MODE_DRAGGING;
    private static final int TOUCH_MODE_IDLE;
    private boolean mHasThumbTint;
    private boolean mHasThumbTintMode;
    private boolean mHasTrackTint;
    private boolean mHasTrackTintMode;
    private int mMinFlingVelocity;
    private android.text.Layout mOffLayout;
    private android.text.Layout mOnLayout;
    android.animation.ObjectAnimator mPositionAnimator;
    private boolean mShowText;
    private boolean mSplitTrack;
    private int mSwitchBottom;
    private int mSwitchHeight;
    private int mSwitchLeft;
    private int mSwitchMinWidth;
    private int mSwitchPadding;
    private int mSwitchRight;
    private int mSwitchTop;
    private android.text.method.TransformationMethod mSwitchTransformationMethod;
    private int mSwitchWidth;
    private final android.graphics.Rect mTempRect;
    private android.content.res.ColorStateList mTextColors;
    private final androidx.appcompat.widget.AppCompatTextHelper mTextHelper;
    private java.lang.CharSequence mTextOff;
    private java.lang.CharSequence mTextOn;
    private final android.text.TextPaint mTextPaint;
    private android.graphics.drawable.Drawable mThumbDrawable;
    float mThumbPosition;
    private int mThumbTextPadding;
    private android.content.res.ColorStateList mThumbTintList;
    private android.graphics.PorterDuff$Mode mThumbTintMode;
    private int mThumbWidth;
    private int mTouchMode;
    private int mTouchSlop;
    private float mTouchX;
    private float mTouchY;
    private android.graphics.drawable.Drawable mTrackDrawable;
    private android.content.res.ColorStateList mTrackTintList;
    private android.graphics.PorterDuff$Mode mTrackTintMode;
    private android.view.VelocityTracker mVelocityTracker;

    static void <clinit>()
    {
        int[] $r1;
        androidx.appcompat.widget.SwitchCompat$1 $r0;

        $r0 = new androidx.appcompat.widget.SwitchCompat$1;

        specialinvoke $r0.<init>(class "Ljava/lang/Float;", "thumbPos");

        androidx.appcompat.widget.SwitchCompat.THUMB_POS = $r0;

        $r1 = newarray (int)[1];

        $r1[0] = 16842912;

        androidx.appcompat.widget.SwitchCompat.CHECKED_STATE_SET = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>($r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r1;
        androidx.appcompat.widget.SwitchCompat r0;
        android.util.AttributeSet $r2;
        int $i0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $i0 = androidx.appcompat.R$attr.switchStyle;

        specialinvoke r0.<init>($r1, $r2, $i0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.content.Context $r1, $r4;
        android.graphics.Rect $r18;
        androidx.appcompat.widget.AppCompatTextHelper r16, $r20;
        android.graphics.drawable.Drawable $r11;
        android.content.res.TypedArray $r10;
        android.content.res.ColorStateList $r13;
        android.view.VelocityTracker $r3;
        android.view.ViewConfiguration $r17;
        android.util.AttributeSet $r2;
        int[] r8;
        androidx.appcompat.widget.TintTypedArray $r9;
        int $i0, i1;
        boolean $z0;
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence $r12;
        android.util.DisplayMetrics $r7;
        android.graphics.PorterDuff$Mode $r14, r15;
        android.text.TextPaint r5, $r19;
        float f0;
        android.content.res.Resources $r6;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $i0 := @parameter2;

        specialinvoke r0.<init>($r1, $r2, $i0);

        r0.mThumbTintList = null;

        r0.mThumbTintMode = null;

        r0.mHasThumbTint = 0;

        r0.mHasThumbTintMode = 0;

        r0.mTrackTintList = null;

        r0.mTrackTintMode = null;

        r0.mHasTrackTint = 0;

        r0.mHasTrackTintMode = 0;

        $r3 = android.view.VelocityTracker.obtain();

        r0.mVelocityTracker = $r3;

        $r18 = new android.graphics.Rect;

        specialinvoke $r18.<init>();

        r0.mTempRect = $r18;

        $r4 = virtualinvoke r0.getContext();

        androidx.appcompat.widget.ThemeUtils.checkAppCompatTheme(r0, $r4);

        $r19 = new android.text.TextPaint;

        r5 = $r19;

        specialinvoke $r19.<init>(1);

        r0.mTextPaint = r5;

        $r6 = virtualinvoke r0.getResources();

        $r7 = virtualinvoke $r6.getDisplayMetrics();

        f0 = $r7.density;

        r5.density = f0;

        r8 = androidx.appcompat.R$styleable.SwitchCompat;

        $r9 = androidx.appcompat.widget.TintTypedArray.obtainStyledAttributes($r1, $r2, r8, $i0, 0);

        r8 = androidx.appcompat.R$styleable.SwitchCompat;

        $r10 = virtualinvoke $r9.getWrappedTypeArray();

        androidx.core.view.ViewCompat.saveAttributeDataForStyleable(r0, $r1, r8, $r2, $r10, $i0, 0);

        i1 = androidx.appcompat.R$styleable.SwitchCompat_android_thumb;

        $r11 = virtualinvoke $r9.getDrawable(i1);

        r0.mThumbDrawable = $r11;

        if $r11 == null goto label01;

        virtualinvoke $r11.setCallback(r0);

     label01:
        i1 = androidx.appcompat.R$styleable.SwitchCompat_track;

        $r11 = virtualinvoke $r9.getDrawable(i1);

        r0.mTrackDrawable = $r11;

        if $r11 == null goto label02;

        virtualinvoke $r11.setCallback(r0);

     label02:
        i1 = androidx.appcompat.R$styleable.SwitchCompat_android_textOn;

        $r12 = virtualinvoke $r9.getText(i1);

        r0.mTextOn = $r12;

        i1 = androidx.appcompat.R$styleable.SwitchCompat_android_textOff;

        $r12 = virtualinvoke $r9.getText(i1);

        r0.mTextOff = $r12;

        i1 = androidx.appcompat.R$styleable.SwitchCompat_showText;

        $z0 = virtualinvoke $r9.getBoolean(i1, 1);

        r0.mShowText = $z0;

        i1 = androidx.appcompat.R$styleable.SwitchCompat_thumbTextPadding;

        i1 = virtualinvoke $r9.getDimensionPixelSize(i1, 0);

        r0.mThumbTextPadding = i1;

        i1 = androidx.appcompat.R$styleable.SwitchCompat_switchMinWidth;

        i1 = virtualinvoke $r9.getDimensionPixelSize(i1, 0);

        r0.mSwitchMinWidth = i1;

        i1 = androidx.appcompat.R$styleable.SwitchCompat_switchPadding;

        i1 = virtualinvoke $r9.getDimensionPixelSize(i1, 0);

        r0.mSwitchPadding = i1;

        i1 = androidx.appcompat.R$styleable.SwitchCompat_splitTrack;

        $z0 = virtualinvoke $r9.getBoolean(i1, 0);

        r0.mSplitTrack = $z0;

        i1 = androidx.appcompat.R$styleable.SwitchCompat_thumbTint;

        $r13 = virtualinvoke $r9.getColorStateList(i1);

        if $r13 == null goto label03;

        r0.mThumbTintList = $r13;

        r0.mHasThumbTint = 1;

     label03:
        i1 = androidx.appcompat.R$styleable.SwitchCompat_thumbTintMode;

        i1 = virtualinvoke $r9.getInt(i1, -1);

        $r14 = androidx.appcompat.widget.DrawableUtils.parseTintMode(i1, null);

        r15 = r0.mThumbTintMode;

        if r15 == $r14 goto label04;

        r0.mThumbTintMode = $r14;

        r0.mHasThumbTintMode = 1;

     label04:
        $z0 = r0.mHasThumbTint;

        if $z0 != 0 goto label05;

        $z0 = r0.mHasThumbTintMode;

        if $z0 == 0 goto label06;

     label05:
        specialinvoke r0.applyThumbTint();

     label06:
        i1 = androidx.appcompat.R$styleable.SwitchCompat_trackTint;

        $r13 = virtualinvoke $r9.getColorStateList(i1);

        if $r13 == null goto label07;

        r0.mTrackTintList = $r13;

        r0.mHasTrackTint = 1;

     label07:
        i1 = androidx.appcompat.R$styleable.SwitchCompat_trackTintMode;

        i1 = virtualinvoke $r9.getInt(i1, -1);

        $r14 = androidx.appcompat.widget.DrawableUtils.parseTintMode(i1, null);

        r15 = r0.mTrackTintMode;

        if r15 == $r14 goto label08;

        r0.mTrackTintMode = $r14;

        r0.mHasTrackTintMode = 1;

     label08:
        $z0 = r0.mHasTrackTint;

        if $z0 != 0 goto label09;

        $z0 = r0.mHasTrackTintMode;

        if $z0 == 0 goto label10;

     label09:
        specialinvoke r0.applyTrackTint();

     label10:
        i1 = androidx.appcompat.R$styleable.SwitchCompat_switchTextAppearance;

        i1 = virtualinvoke $r9.getResourceId(i1, 0);

        if i1 == 0 goto label11;

        virtualinvoke r0.setSwitchTextAppearance($r1, i1);

     label11:
        $r20 = new androidx.appcompat.widget.AppCompatTextHelper;

        r16 = $r20;

        specialinvoke $r20.<init>(r0);

        r0.mTextHelper = r16;

        virtualinvoke r16.loadFromAttributes($r2, $i0);

        virtualinvoke $r9.recycle();

        $r17 = android.view.ViewConfiguration.get($r1);

        $i0 = virtualinvoke $r17.getScaledTouchSlop();

        r0.mTouchSlop = $i0;

        $i0 = virtualinvoke $r17.getScaledMinimumFlingVelocity();

        r0.mMinFlingVelocity = $i0;

        virtualinvoke r0.refreshDrawableState();

        $z0 = virtualinvoke r0.isChecked();

        virtualinvoke r0.setChecked($z0);

        return;
    }

    private void animateThumbToCheckedState(boolean)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.animation.ObjectAnimator $r1;
        float f0;
        float[] $r3;
        boolean $z0;
        android.util.Property $r2;

        r0 := @this;

        $z0 := @parameter0;

        if $z0 == 0 goto label1;

        f0 = 1.0F;

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        $r2 = androidx.appcompat.widget.SwitchCompat.THUMB_POS;

        $r3 = newarray (float)[1];

        $r3[0] = f0;

        $r1 = android.animation.ObjectAnimator.ofFloat(r0, $r2, $r3);

        r0.mPositionAnimator = $r1;

        virtualinvoke $r1.setDuration(250L);

        $r1 = r0.mPositionAnimator;

        virtualinvoke $r1.setAutoCancel(1);

        $r1 = r0.mPositionAnimator;

        virtualinvoke $r1.start();

        return;
    }

    private void applyThumbTint()
    {
        android.content.res.ColorStateList $r2;
        androidx.appcompat.widget.SwitchCompat r0;
        int[] $r4;
        android.graphics.drawable.Drawable $r1;
        android.graphics.PorterDuff$Mode $r3;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mThumbDrawable;

        if $r1 == null goto label4;

        $z0 = r0.mHasThumbTint;

        if $z0 != 0 goto label1;

        $z0 = r0.mHasThumbTintMode;

        if $z0 == 0 goto label4;

     label1:
        $r1 = androidx.core.graphics.drawable.DrawableCompat.wrap($r1);

        $r1 = virtualinvoke $r1.mutate();

        r0.mThumbDrawable = $r1;

        $z0 = r0.mHasThumbTint;

        if $z0 == 0 goto label2;

        $r2 = r0.mThumbTintList;

        androidx.core.graphics.drawable.DrawableCompat.setTintList($r1, $r2);

     label2:
        $z0 = r0.mHasThumbTintMode;

        if $z0 == 0 goto label3;

        $r1 = r0.mThumbDrawable;

        $r3 = r0.mThumbTintMode;

        androidx.core.graphics.drawable.DrawableCompat.setTintMode($r1, $r3);

     label3:
        $r1 = r0.mThumbDrawable;

        $z0 = virtualinvoke $r1.isStateful();

        if $z0 == 0 goto label4;

        $r1 = r0.mThumbDrawable;

        $r4 = virtualinvoke r0.getDrawableState();

        virtualinvoke $r1.setState($r4);

     label4:
        return;
    }

    private void applyTrackTint()
    {
        android.content.res.ColorStateList $r2;
        androidx.appcompat.widget.SwitchCompat r0;
        int[] $r4;
        android.graphics.drawable.Drawable $r1;
        android.graphics.PorterDuff$Mode $r3;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mTrackDrawable;

        if $r1 == null goto label4;

        $z0 = r0.mHasTrackTint;

        if $z0 != 0 goto label1;

        $z0 = r0.mHasTrackTintMode;

        if $z0 == 0 goto label4;

     label1:
        $r1 = androidx.core.graphics.drawable.DrawableCompat.wrap($r1);

        $r1 = virtualinvoke $r1.mutate();

        r0.mTrackDrawable = $r1;

        $z0 = r0.mHasTrackTint;

        if $z0 == 0 goto label2;

        $r2 = r0.mTrackTintList;

        androidx.core.graphics.drawable.DrawableCompat.setTintList($r1, $r2);

     label2:
        $z0 = r0.mHasTrackTintMode;

        if $z0 == 0 goto label3;

        $r1 = r0.mTrackDrawable;

        $r3 = r0.mTrackTintMode;

        androidx.core.graphics.drawable.DrawableCompat.setTintMode($r1, $r3);

     label3:
        $r1 = r0.mTrackDrawable;

        $z0 = virtualinvoke $r1.isStateful();

        if $z0 == 0 goto label4;

        $r1 = r0.mTrackDrawable;

        $r4 = virtualinvoke r0.getDrawableState();

        virtualinvoke $r1.setState($r4);

     label4:
        return;
    }

    private void cancelPositionAnimator()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.animation.ObjectAnimator $r1;

        r0 := @this;

        $r1 = r0.mPositionAnimator;

        if $r1 == null goto label1;

        virtualinvoke $r1.cancel();

     label1:
        return;
    }

    private void cancelSuperTouch(android.view.MotionEvent)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.view.MotionEvent $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r1 = android.view.MotionEvent.obtain($r1);

        virtualinvoke $r1.setAction(3);

        specialinvoke r0.onTouchEvent($r1);

        virtualinvoke $r1.recycle();

        return;
    }

    private static float constrain(float, float, float)
    {
        byte $b0;
        int $i1;
        float $f0, $f1, $f2;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $f2 := @parameter2;

        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return $f1;

     label1:
        $b0 = $f0 cmpl $f2;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        return $f2;

     label2:
        return $f0;
    }

    private boolean getTargetCheckedState()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        byte $b0;
        int $i1;
        float $f0;

        r0 := @this;

        $f0 = r0.mThumbPosition;

        $b0 = $f0 cmpl 0.5F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private int getThumbOffset()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        int $i0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this;

        $z0 = androidx.appcompat.widget.ViewUtils.isLayoutRtl(r0);

        if $z0 == 0 goto label1;

        $f0 = r0.mThumbPosition;

        $f0 = 1.0F - $f0;

        goto label2;

     label1:
        $f0 = r0.mThumbPosition;

     label2:
        $i0 = specialinvoke r0.getThumbScrollRange();

        $f1 = (float) $i0;

        $f0 = $f1 * $f0;

        $f0 = $f0 + 0.5F;

        $i0 = (int) $f0;

        return $i0;
    }

    private int getThumbScrollRange()
    {
        android.graphics.Rect r1, $r2;
        androidx.appcompat.widget.SwitchCompat r0;
        int $i0, $i1;
        android.graphics.drawable.Drawable r3;

        r0 := @this;

        r3 = r0.mTrackDrawable;

        if r3 == null goto label3;

        r1 = r0.mTempRect;

        virtualinvoke r3.getPadding(r1);

        r3 = r0.mThumbDrawable;

        if r3 == null goto label1;

        $r2 = androidx.appcompat.widget.DrawableUtils.getOpticalBounds(r3);

        goto label2;

     label1:
        $r2 = androidx.appcompat.widget.DrawableUtils.INSETS_NONE;

     label2:
        $i0 = r0.mSwitchWidth;

        $i1 = r0.mThumbWidth;

        $i0 = $i0 - $i1;

        $i1 = r1.left;

        $i0 = $i0 - $i1;

        $i1 = r1.right;

        $i0 = $i0 - $i1;

        $i1 = $r2.left;

        $i0 = $i0 - $i1;

        $i1 = $r2.right;

        $i0 = $i0 - $i1;

        return $i0;

     label3:
        return 0;
    }

    private boolean hitThumb(float, float)
    {
        android.graphics.Rect r2;
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.drawable.Drawable r1;
        byte $b5;
        int $i0, i1, i2, i3, i4;
        float $f0, $f1, $f2;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        r1 = r0.mThumbDrawable;

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = specialinvoke r0.getThumbOffset();

        r1 = r0.mThumbDrawable;

        r2 = r0.mTempRect;

        virtualinvoke r1.getPadding(r2);

        i1 = r0.mSwitchTop;

        i2 = r0.mTouchSlop;

        i1 = i1 - i2;

        i3 = r0.mSwitchLeft;

        $i0 = i3 + $i0;

        i2 = $i0 - i2;

        $i0 = r0.mThumbWidth;

        $i0 = $i0 + i2;

        r2 = r0.mTempRect;

        i3 = r2.left;

        $i0 = $i0 + i3;

        r2 = r0.mTempRect;

        i3 = r2.right;

        $i0 = $i0 + i3;

        i3 = r0.mTouchSlop;

        $i0 = $i0 + i3;

        i4 = r0.mSwitchBottom;

        i3 = i4 + i3;

        $f2 = (float) i2;

        $b5 = $f0 cmpl $f2;

        i2 = (int) $b5;

        if i2 <= 0 goto label2;

        $f2 = (float) $i0;

        $b5 = $f0 cmpg $f2;

        i2 = (int) $b5;

        if i2 >= 0 goto label2;

        $f0 = (float) i1;

        $b5 = $f1 cmpl $f0;

        i1 = (int) $b5;

        if i1 <= 0 goto label2;

        $f0 = (float) i3;

        $b5 = $f1 cmpg $f0;

        i1 = (int) $b5;

        if i1 >= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private android.text.Layout makeLayout(java.lang.CharSequence)
    {
        android.text.StaticLayout $r4;
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence $r1;
        android.text.method.TransformationMethod r5;
        android.text.Layout$Alignment $r3;
        android.text.TextPaint $r2;
        int $i0;
        float $f0;
        double $d0;

        r0 := @this;

        $r1 := @parameter0;

        r5 = r0.mSwitchTransformationMethod;

        if r5 == null goto label1;

        $r1 = interfaceinvoke r5.getTransformation($r1, r0);

        goto label1;

     label1:
        $r4 = new android.text.StaticLayout;

        $r2 = r0.mTextPaint;

        if $r1 == null goto label2;

        $f0 = android.text.Layout.getDesiredWidth($r1, $r2);

        $d0 = (double) $f0;

        $d0 = java.lang.Math.ceil($d0);

        $i0 = (int) $d0;

        goto label3;

     label2:
        $i0 = 0;

     label3:
        $r3 = android.text.Layout$Alignment.ALIGN_NORMAL;

        specialinvoke $r4.<init>($r1, $r2, $i0, $r3, 1.0F, 0.0F, 1);

        return $r4;
    }

    private void setSwitchTypefaceByIndex(int, int)
    {
        android.graphics.Typeface r1;
        androidx.appcompat.widget.SwitchCompat r0;
        int $i0, $i1;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        r1 = null;

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        goto label5;

     label2:
        r1 = android.graphics.Typeface.MONOSPACE;

        goto label5;

     label3:
        r1 = android.graphics.Typeface.SERIF;

        goto label5;

     label4:
        r1 = android.graphics.Typeface.SANS_SERIF;

     label5:
        virtualinvoke r0.setSwitchTypeface(r1, $i1);

        return;
    }

    private void stopDrag(android.view.MotionEvent)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.view.VelocityTracker r2;
        byte $b1;
        android.view.MotionEvent $r1;
        int $i0;
        float $f0, $f1, $f2;
        boolean z0, $z1, z2;

        r0 := @this;

        $r1 := @parameter0;

        r0.mTouchMode = 0;

        $i0 = virtualinvoke $r1.getAction();

        z0 = 1;

        if $i0 != 1 goto label01;

        $z1 = virtualinvoke r0.isEnabled();

        if $z1 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $z1 = virtualinvoke r0.isChecked();

        if z2 == 0 goto label09;

        r2 = r0.mVelocityTracker;

        virtualinvoke r2.computeCurrentVelocity(1000);

        r2 = r0.mVelocityTracker;

        $f0 = virtualinvoke r2.getXVelocity();

        $f1 = java.lang.Math.abs($f0);

        $i0 = r0.mMinFlingVelocity;

        $f2 = (float) $i0;

        $b1 = $f1 cmpl $f2;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label07;

        z2 = androidx.appcompat.widget.ViewUtils.isLayoutRtl(r0);

        if z2 == 0 goto label03;

        $b1 = $f0 cmpg 0.0F;

        $i0 = (int) $b1;

        if $i0 >= 0 goto label05;

        goto label04;

     label03:
        $b1 = $f0 cmpl 0.0F;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label05;

     label04:
        goto label06;

     label05:
        z0 = 0;

     label06:
        goto label08;

     label07:
        z0 = specialinvoke r0.getTargetCheckedState();

     label08:
        goto label10;

     label09:
        z0 = $z1;

     label10:
        if z0 == $z1 goto label11;

        virtualinvoke r0.playSoundEffect(0);

     label11:
        virtualinvoke r0.setChecked(z0);

        specialinvoke r0.cancelSuperTouch($r1);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.Rect r2, $r4;
        android.graphics.drawable.Drawable r3;
        int i0, i1, i2, i3, $i4, i5, i6, i7, i8, $i9, $i10;
        android.graphics.Canvas $r1;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mTempRect;

        i0 = r0.mSwitchLeft;

        i1 = r0.mSwitchTop;

        i2 = r0.mSwitchRight;

        i3 = r0.mSwitchBottom;

        $i4 = specialinvoke r0.getThumbOffset();

        $i4 = $i4 + i0;

        r3 = r0.mThumbDrawable;

        if r3 == null goto label1;

        $r4 = androidx.appcompat.widget.DrawableUtils.getOpticalBounds(r3);

        goto label2;

     label1:
        $r4 = androidx.appcompat.widget.DrawableUtils.INSETS_NONE;

     label2:
        r3 = r0.mTrackDrawable;

        if r3 == null goto label7;

        virtualinvoke r3.getPadding(r2);

        i5 = r2.left;

        $i4 = $i4 + i5;

        i5 = i0;

        i6 = i1;

        i7 = i2;

        i8 = i3;

        if $r4 == null goto label6;

        $i9 = $r4.left;

        $i10 = r2.left;

        if $i9 <= $i10 goto label3;

        i5 = $r4.left;

        $i9 = r2.left;

        i5 = i5 - $i9;

        i5 = i0 + i5;

     label3:
        i0 = $r4.top;

        $i9 = r2.top;

        if i0 <= $i9 goto label4;

        i6 = $r4.top;

        i0 = r2.top;

        i6 = i6 - i0;

        i6 = i1 + i6;

     label4:
        i0 = $r4.right;

        $i9 = r2.right;

        if i0 <= $i9 goto label5;

        i7 = $r4.right;

        i0 = r2.right;

        i7 = i7 - i0;

        i7 = i2 - i7;

     label5:
        i2 = $r4.bottom;

        i0 = r2.bottom;

        if i2 <= i0 goto label6;

        i2 = $r4.bottom;

        i8 = r2.bottom;

        i2 = i2 - i8;

        i8 = i3 - i2;

     label6:
        r3 = r0.mTrackDrawable;

        virtualinvoke r3.setBounds(i5, i6, i7, i8);

     label7:
        r3 = r0.mThumbDrawable;

        if r3 == null goto label8;

        virtualinvoke r3.getPadding(r2);

        i2 = r2.left;

        i2 = $i4 - i2;

        i5 = r0.mThumbWidth;

        $i4 = i5 + $i4;

        i5 = r2.right;

        $i4 = $i4 + i5;

        r3 = r0.mThumbDrawable;

        virtualinvoke r3.setBounds(i2, i1, $i4, i3);

        r3 = virtualinvoke r0.getBackground();

        if r3 == null goto label8;

        androidx.core.graphics.drawable.DrawableCompat.setHotspotBounds(r3, i2, i1, $i4, i3);

     label8:
        specialinvoke r0.draw($r1);

        return;
    }

    public void drawableHotspotChanged(float, float)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        int $i0;
        float $f0, $f1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this;

        $f0 := @parameter0;

        $f1 := @parameter1;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 21 goto label1;

        specialinvoke r0.drawableHotspotChanged($f0, $f1);

     label1:
        $r1 = r0.mThumbDrawable;

        if $r1 == null goto label2;

        androidx.core.graphics.drawable.DrawableCompat.setHotspot($r1, $f0, $f1);

     label2:
        $r1 = r0.mTrackDrawable;

        if $r1 == null goto label3;

        androidx.core.graphics.drawable.DrawableCompat.setHotspot($r1, $f0, $f1);

     label3:
        return;
    }

    protected void drawableStateChanged()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        int[] $r2;
        android.graphics.drawable.Drawable r1;
        boolean z0, $z1;

        r0 := @this;

        specialinvoke r0.drawableStateChanged();

        $r2 = virtualinvoke r0.getDrawableState();

        z0 = 0;

        r1 = r0.mThumbDrawable;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.isStateful();

        if $z1 == 0 goto label1;

        z0 = virtualinvoke r1.setState($r2);

     label1:
        r1 = r0.mTrackDrawable;

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.isStateful();

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke r1.setState($r2);

        z0 = z0 | $z1;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r0.invalidate();

     label3:
        return;
    }

    public int getCompoundPaddingLeft()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this;

        $z0 = androidx.appcompat.widget.ViewUtils.isLayoutRtl(r0);

        if $z0 != 0 goto label1;

        $i0 = specialinvoke r0.getCompoundPaddingLeft();

        return $i0;

     label1:
        $i0 = specialinvoke r0.getCompoundPaddingLeft();

        $i1 = r0.mSwitchWidth;

        $i0 = $i0 + $i1;

        $r1 = virtualinvoke r0.getText();

        $z0 = android.text.TextUtils.isEmpty($r1);

        if $z0 != 0 goto label2;

        $i1 = r0.mSwitchPadding;

        $i0 = $i0 + $i1;

     label2:
        return $i0;
    }

    public int getCompoundPaddingRight()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this;

        $z0 = androidx.appcompat.widget.ViewUtils.isLayoutRtl(r0);

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.getCompoundPaddingRight();

        return $i0;

     label1:
        $i0 = specialinvoke r0.getCompoundPaddingRight();

        $i1 = r0.mSwitchWidth;

        $i0 = $i0 + $i1;

        $r1 = virtualinvoke r0.getText();

        $z0 = android.text.TextUtils.isEmpty($r1);

        if $z0 != 0 goto label2;

        $i1 = r0.mSwitchPadding;

        $i0 = $i0 + $i1;

     label2:
        return $i0;
    }

    public boolean getShowText()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        boolean z0;

        r0 := @this;

        z0 = r0.mShowText;

        return z0;
    }

    public boolean getSplitTrack()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        boolean z0;

        r0 := @this;

        z0 = r0.mSplitTrack;

        return z0;
    }

    public int getSwitchMinWidth()
    {
        int i0;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        i0 = r0.mSwitchMinWidth;

        return i0;
    }

    public int getSwitchPadding()
    {
        int i0;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        i0 = r0.mSwitchPadding;

        return i0;
    }

    public java.lang.CharSequence getTextOff()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence r1;

        r0 := @this;

        r1 = r0.mTextOff;

        return r1;
    }

    public java.lang.CharSequence getTextOn()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence r1;

        r0 := @this;

        r1 = r0.mTextOn;

        return r1;
    }

    public android.graphics.drawable.Drawable getThumbDrawable()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this;

        r1 = r0.mThumbDrawable;

        return r1;
    }

    public int getThumbTextPadding()
    {
        int i0;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        i0 = r0.mThumbTextPadding;

        return i0;
    }

    public android.content.res.ColorStateList getThumbTintList()
    {
        android.content.res.ColorStateList r1;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        r1 = r0.mThumbTintList;

        return r1;
    }

    public android.graphics.PorterDuff$Mode getThumbTintMode()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.PorterDuff$Mode r1;

        r0 := @this;

        r1 = r0.mThumbTintMode;

        return r1;
    }

    public android.graphics.drawable.Drawable getTrackDrawable()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this;

        r1 = r0.mTrackDrawable;

        return r1;
    }

    public android.content.res.ColorStateList getTrackTintList()
    {
        android.content.res.ColorStateList r1;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        r1 = r0.mTrackTintList;

        return r1;
    }

    public android.graphics.PorterDuff$Mode getTrackTintMode()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.PorterDuff$Mode r1;

        r0 := @this;

        r1 = r0.mTrackTintMode;

        return r1;
    }

    public void jumpDrawablesToCurrentState()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.animation.ObjectAnimator $r2;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this;

        specialinvoke r0.jumpDrawablesToCurrentState();

        $r1 = r0.mThumbDrawable;

        if $r1 == null goto label1;

        virtualinvoke $r1.jumpToCurrentState();

     label1:
        $r1 = r0.mTrackDrawable;

        if $r1 == null goto label2;

        virtualinvoke $r1.jumpToCurrentState();

     label2:
        $r2 = r0.mPositionAnimator;

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r2.isStarted();

        if $z0 == 0 goto label3;

        $r2 = r0.mPositionAnimator;

        virtualinvoke $r2.end();

        r0.mPositionAnimator = null;

     label3:
        return;
    }

    protected int[] onCreateDrawableState(int)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        int[] $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this;

        $i0 := @parameter0;

        $i0 = $i0 + 1;

        $r1 = specialinvoke r0.onCreateDrawableState($i0);

        $z0 = virtualinvoke r0.isChecked();

        if $z0 == 0 goto label1;

        $r2 = androidx.appcompat.widget.SwitchCompat.CHECKED_STATE_SET;

        androidx.appcompat.widget.SwitchCompat.mergeDrawableStates($r1, $r2);

     label1:
        return $r1;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.graphics.Rect r2, $r5;
        android.graphics.Region$Op r6;
        android.graphics.drawable.Drawable r3, r4;
        android.content.res.ColorStateList r9;
        int[] $r8;
        int i0, i1, i2, i3, i4;
        android.graphics.Canvas $r1;
        boolean z0;
        androidx.appcompat.widget.SwitchCompat r0;
        android.text.Layout r7;
        android.text.TextPaint r10;
        float $f0, $f1;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.onDraw($r1);

        r2 = r0.mTempRect;

        r3 = r0.mTrackDrawable;

        if r3 == null goto label01;

        virtualinvoke r3.getPadding(r2);

        goto label02;

     label01:
        virtualinvoke r2.setEmpty();

     label02:
        i0 = r0.mSwitchTop;

        i1 = r0.mSwitchBottom;

        i2 = r2.top;

        i0 = i2 + i0;

        i2 = r2.bottom;

        i1 = i1 - i2;

        r4 = r0.mThumbDrawable;

        if r3 == null goto label04;

        z0 = r0.mSplitTrack;

        if z0 == 0 goto label03;

        if r4 == null goto label03;

        $r5 = androidx.appcompat.widget.DrawableUtils.getOpticalBounds(r4);

        virtualinvoke r4.copyBounds(r2);

        i2 = r2.left;

        i3 = $r5.left;

        i2 = i2 + i3;

        r2.left = i2;

        i2 = r2.right;

        i3 = $r5.right;

        i2 = i2 - i3;

        r2.right = i2;

        i2 = virtualinvoke $r1.save();

        r6 = android.graphics.Region$Op.DIFFERENCE;

        virtualinvoke $r1.clipRect(r2, r6);

        virtualinvoke r3.draw($r1);

        virtualinvoke $r1.restoreToCount(i2);

        goto label04;

     label03:
        virtualinvoke r3.draw($r1);

     label04:
        i2 = virtualinvoke $r1.save();

        if r4 == null goto label05;

        virtualinvoke r4.draw($r1);

     label05:
        z0 = specialinvoke r0.getTargetCheckedState();

        if z0 == 0 goto label06;

        r7 = r0.mOnLayout;

        goto label07;

     label06:
        r7 = r0.mOffLayout;

     label07:
        if r7 == null goto label11;

        $r8 = virtualinvoke r0.getDrawableState();

        r9 = r0.mTextColors;

        if r9 == null goto label08;

        r10 = r0.mTextPaint;

        i3 = virtualinvoke r9.getColorForState($r8, 0);

        virtualinvoke r10.setColor(i3);

     label08:
        r10 = r0.mTextPaint;

        r10.drawableState = $r8;

        if r4 == null goto label09;

        r2 = virtualinvoke r4.getBounds();

        i3 = r2.left;

        i4 = r2.right;

        i3 = i3 + i4;

        goto label10;

     label09:
        i3 = virtualinvoke r0.getWidth();

     label10:
        i3 = i3 / 2;

        i4 = virtualinvoke r7.getWidth();

        i4 = i4 / 2;

        i3 = i3 - i4;

        i0 = i0 + i1;

        i0 = i0 / 2;

        i1 = virtualinvoke r7.getHeight();

        i1 = i1 / 2;

        i0 = i0 - i1;

        $f0 = (float) i3;

        $f1 = (float) i0;

        virtualinvoke $r1.translate($f0, $f1);

        virtualinvoke r7.draw($r1);

     label11:
        virtualinvoke $r1.restoreToCount(i2);

        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.accessibility.AccessibilityEvent $r1;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.onInitializeAccessibilityEvent($r1);

        virtualinvoke $r1.setClassName("android.widget.Switch");

        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo $r1;
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence r2, $r3;
        java.lang.StringBuilder r4, $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.onInitializeAccessibilityNodeInfo($r1);

        virtualinvoke $r1.setClassName("android.widget.Switch");

        $z0 = virtualinvoke r0.isChecked();

        if $z0 == 0 goto label1;

        r2 = r0.mTextOn;

        goto label2;

     label1:
        r2 = r0.mTextOff;

     label2:
        $z0 = android.text.TextUtils.isEmpty(r2);

        if $z0 != 0 goto label4;

        $r3 = virtualinvoke $r1.getText();

        $z0 = android.text.TextUtils.isEmpty($r3);

        if $z0 == 0 goto label3;

        virtualinvoke $r1.setText(r2);

        return;

     label3:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<init>();

        $r5 = virtualinvoke r4.append($r3);

        $r5 = virtualinvoke $r5.append(32);

        virtualinvoke $r5.append(r2);

        virtualinvoke $r1.setText(r4);

     label4:
        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.graphics.Rect r2, $r3;
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.drawable.Drawable r1;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        $i2 := @parameter3;

        $i3 := @parameter4;

        specialinvoke r0.onLayout($z0, $i0, $i1, $i2, $i3);

        $i2 = 0;

        $i3 = 0;

        r1 = r0.mThumbDrawable;

        if r1 == null goto label3;

        r2 = r0.mTempRect;

        r1 = r0.mTrackDrawable;

        if r1 == null goto label1;

        virtualinvoke r1.getPadding(r2);

        goto label2;

     label1:
        virtualinvoke r2.setEmpty();

     label2:
        r1 = r0.mThumbDrawable;

        $r3 = androidx.appcompat.widget.DrawableUtils.getOpticalBounds(r1);

        $i0 = $r3.left;

        $i1 = r2.left;

        $i0 = $i0 - $i1;

        $i2 = java.lang.Math.max(0, $i0);

        $i0 = $r3.right;

        $i1 = r2.right;

        $i0 = $i0 - $i1;

        $i3 = java.lang.Math.max(0, $i0);

     label3:
        $z0 = androidx.appcompat.widget.ViewUtils.isLayoutRtl(r0);

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke r0.getPaddingLeft();

        $i0 = $i0 + $i2;

        $i1 = r0.mSwitchWidth;

        $i1 = $i1 + $i0;

        $i1 = $i1 - $i2;

        $i1 = $i1 - $i3;

        goto label5;

     label4:
        $i0 = virtualinvoke r0.getWidth();

        $i1 = virtualinvoke r0.getPaddingRight();

        $i0 = $i0 - $i1;

        $i1 = $i0 - $i3;

        $i0 = r0.mSwitchWidth;

        $i0 = $i1 - $i0;

        $i0 = $i0 + $i2;

        $i0 = $i0 + $i3;

     label5:
        $i2 = virtualinvoke r0.getGravity();

        $i2 = $i2 & 112;

        lookupswitch($i2)
        {
            case 16: goto label8;
            case 80: goto label7;
            default: goto label6;
        };

     label6:
        $i3 = virtualinvoke r0.getPaddingTop();

        $i2 = $i3;

        i4 = r0.mSwitchHeight;

        $i3 = i4 + $i3;

        goto label9;

     label7:
        $i2 = virtualinvoke r0.getHeight();

        $i3 = virtualinvoke r0.getPaddingBottom();

        $i3 = $i2 - $i3;

        $i2 = r0.mSwitchHeight;

        $i2 = $i3 - $i2;

        goto label9;

     label8:
        $i2 = virtualinvoke r0.getPaddingTop();

        $i3 = virtualinvoke r0.getHeight();

        $i2 = $i2 + $i3;

        $i3 = virtualinvoke r0.getPaddingBottom();

        $i2 = $i2 - $i3;

        $i3 = $i2 / 2;

        $i2 = r0.mSwitchHeight;

        i4 = $i2 / 2;

        $i3 = $i3 - i4;

        i4 = $i2 + $i3;

        $i2 = $i3;

        $i3 = i4;

     label9:
        r0.mSwitchLeft = $i0;

        r0.mSwitchTop = $i2;

        r0.mSwitchBottom = $i3;

        r0.mSwitchRight = $i1;

        return;
    }

    public void onMeasure(int, int)
    {
        android.graphics.Rect r3;
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence r2;
        android.graphics.drawable.Drawable r4;
        android.text.Layout r1;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, i7;
        boolean z0;

        r0 := @this;

        $i0 := @parameter0;

        $i1 := @parameter1;

        z0 = r0.mShowText;

        if z0 == 0 goto label02;

        r1 = r0.mOnLayout;

        if r1 != null goto label01;

        r2 = r0.mTextOn;

        r1 = specialinvoke r0.makeLayout(r2);

        r0.mOnLayout = r1;

     label01:
        r1 = r0.mOffLayout;

        if r1 != null goto label02;

        r2 = r0.mTextOff;

        r1 = specialinvoke r0.makeLayout(r2);

        r0.mOffLayout = r1;

     label02:
        r3 = r0.mTempRect;

        r4 = r0.mThumbDrawable;

        if r4 == null goto label03;

        virtualinvoke r4.getPadding(r3);

        r4 = r0.mThumbDrawable;

        $i2 = virtualinvoke r4.getIntrinsicWidth();

        i3 = r3.left;

        $i2 = $i2 - i3;

        i3 = r3.right;

        i3 = $i2 - i3;

        r4 = r0.mThumbDrawable;

        $i2 = virtualinvoke r4.getIntrinsicHeight();

        goto label04;

     label03:
        i3 = 0;

        $i2 = 0;

     label04:
        z0 = r0.mShowText;

        if z0 == 0 goto label05;

        r1 = r0.mOnLayout;

        $i4 = virtualinvoke r1.getWidth();

        r1 = r0.mOffLayout;

        $i5 = virtualinvoke r1.getWidth();

        $i4 = java.lang.Math.max($i4, $i5);

        $i5 = r0.mThumbTextPadding;

        $i5 = $i5 * 2;

        $i4 = $i4 + $i5;

        goto label06;

     label05:
        $i4 = 0;

     label06:
        i3 = java.lang.Math.max($i4, i3);

        r0.mThumbWidth = i3;

        r4 = r0.mTrackDrawable;

        if r4 == null goto label07;

        virtualinvoke r4.getPadding(r3);

        r4 = r0.mTrackDrawable;

        i3 = virtualinvoke r4.getIntrinsicHeight();

        goto label08;

     label07:
        virtualinvoke r3.setEmpty();

        i3 = 0;

     label08:
        $i5 = r3.left;

        $i4 = r3.right;

        r4 = r0.mThumbDrawable;

        if r4 == null goto label09;

        r3 = androidx.appcompat.widget.DrawableUtils.getOpticalBounds(r4);

        i6 = r3.left;

        $i5 = java.lang.Math.max($i5, i6);

        i6 = r3.right;

        $i4 = java.lang.Math.max($i4, i6);

     label09:
        i6 = r0.mSwitchMinWidth;

        i7 = r0.mThumbWidth;

        i7 = i7 * 2;

        $i5 = i7 + $i5;

        $i4 = $i5 + $i4;

        $i4 = java.lang.Math.max(i6, $i4);

        $i2 = java.lang.Math.max(i3, $i2);

        r0.mSwitchWidth = $i4;

        r0.mSwitchHeight = $i2;

        specialinvoke r0.onMeasure($i0, $i1);

        $i0 = virtualinvoke r0.getMeasuredHeight();

        if $i0 >= $i2 goto label10;

        $i0 = virtualinvoke r0.getMeasuredWidthAndState();

        virtualinvoke r0.setMeasuredDimension($i0, $i2);

     label10:
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        java.util.List $r3;
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence r2;
        android.view.accessibility.AccessibilityEvent $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.onPopulateAccessibilityEvent($r1);

        $z0 = virtualinvoke r0.isChecked();

        if $z0 == 0 goto label1;

        r2 = r0.mTextOn;

        goto label2;

     label1:
        r2 = r0.mTextOff;

     label2:
        if r2 == null goto label3;

        $r3 = virtualinvoke $r1.getText();

        interfaceinvoke $r3.add(r2);

     label3:
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.view.ViewParent $r3;
        androidx.appcompat.widget.SwitchCompat r0;
        android.view.VelocityTracker r2;
        byte b1;
        android.view.MotionEvent $r1;
        int $i0;
        float $f0, f1, f2, $f3;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mVelocityTracker;

        virtualinvoke r2.addMovement($r1);

        $i0 = virtualinvoke $r1.getActionMasked();

        lookupswitch($i0)
        {
            case 0: goto label14;
            case 1: goto label12;
            case 2: goto label02;
            case 3: goto label12;
            default: goto label01;
        };

     label01:
        goto label15;

     label02:
        $i0 = r0.mTouchMode;

        lookupswitch($i0)
        {
            case 0: goto label11;
            case 1: goto label09;
            case 2: goto label04;
            default: goto label03;
        };

     label03:
        goto label11;

     label04:
        $f0 = virtualinvoke $r1.getX();

        $i0 = specialinvoke r0.getThumbScrollRange();

        f1 = r0.mTouchX;

        f1 = $f0 - f1;

        if $i0 == 0 goto label05;

        f2 = (float) $i0;

        f1 = f1 / f2;

        goto label07;

     label05:
        b1 = f1 cmpl 0.0F;

        $i0 = (int) b1;

        if $i0 <= 0 goto label06;

        f1 = 1.0F;

        goto label07;

     label06:
        f1 = -1.0F;

     label07:
        $z0 = androidx.appcompat.widget.ViewUtils.isLayoutRtl(r0);

        if $z0 == 0 goto label08;

        f1 = neg f1;

     label08:
        f2 = r0.mThumbPosition;

        f1 = f2 + f1;

        f1 = androidx.appcompat.widget.SwitchCompat.constrain(f1, 0.0F, 1.0F);

        f2 = r0.mThumbPosition;

        b1 = f1 cmpl f2;

        if b1 == 0 goto label16;

        r0.mTouchX = $f0;

        virtualinvoke r0.setThumbPosition(f1);

        return 1;

     label09:
        $f0 = virtualinvoke $r1.getX();

        f1 = virtualinvoke $r1.getY();

        f2 = r0.mTouchX;

        f2 = $f0 - f2;

        f2 = java.lang.Math.abs(f2);

        $i0 = r0.mTouchSlop;

        $f3 = (float) $i0;

        b1 = f2 cmpl $f3;

        $i0 = (int) b1;

        if $i0 > 0 goto label10;

        f2 = r0.mTouchY;

        f2 = f1 - f2;

        f2 = java.lang.Math.abs(f2);

        $i0 = r0.mTouchSlop;

        $f3 = (float) $i0;

        b1 = f2 cmpl $f3;

        $i0 = (int) b1;

        if $i0 <= 0 goto label11;

     label10:
        r0.mTouchMode = 2;

        $r3 = virtualinvoke r0.getParent();

        interfaceinvoke $r3.requestDisallowInterceptTouchEvent(1);

        r0.mTouchX = $f0;

        r0.mTouchY = f1;

        return 1;

     label11:
        goto label15;

     label12:
        $i0 = r0.mTouchMode;

        if $i0 != 2 goto label13;

        specialinvoke r0.stopDrag($r1);

        specialinvoke r0.onTouchEvent($r1);

        return 1;

     label13:
        r0.mTouchMode = 0;

        r2 = r0.mVelocityTracker;

        virtualinvoke r2.clear();

        goto label15;

     label14:
        $f0 = virtualinvoke $r1.getX();

        f1 = virtualinvoke $r1.getY();

        $z0 = virtualinvoke r0.isEnabled();

        if $z0 == 0 goto label15;

        $z0 = specialinvoke r0.hitThumb($f0, f1);

        if $z0 == 0 goto label15;

        r0.mTouchMode = 1;

        r0.mTouchX = $f0;

        r0.mTouchY = f1;

     label15:
        $z0 = specialinvoke r0.onTouchEvent($r1);

        return $z0;

     label16:
        return 1;
    }

    public void setChecked(boolean)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        float $f0;
        android.os.IBinder $r1;
        boolean $z0, $z1;

        r0 := @this;

        $z0 := @parameter0;

        specialinvoke r0.setChecked($z0);

        $z0 = virtualinvoke r0.isChecked();

        $r1 = virtualinvoke r0.getWindowToken();

        if $r1 == null goto label1;

        $z1 = androidx.core.view.ViewCompat.isLaidOut(r0);

        if $z1 == 0 goto label1;

        specialinvoke r0.animateThumbToCheckedState($z0);

        return;

     label1:
        specialinvoke r0.cancelPositionAnimator();

        if $z0 == 0 goto label2;

        $f0 = 1.0F;

        goto label3;

     label2:
        $f0 = 0.0F;

     label3:
        virtualinvoke r0.setThumbPosition($f0);

        return;
    }

    public void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.view.ActionMode$Callback $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r1 = androidx.core.widget.TextViewCompat.wrapCustomSelectionActionModeCallback(r0, $r1);

        specialinvoke r0.setCustomSelectionActionModeCallback($r1);

        return;
    }

    public void setShowText(boolean)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        boolean $z0, $z1;

        r0 := @this;

        $z0 := @parameter0;

        $z1 = r0.mShowText;

        if $z1 == $z0 goto label1;

        r0.mShowText = $z0;

        virtualinvoke r0.requestLayout();

     label1:
        return;
    }

    public void setSplitTrack(boolean)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        r0.mSplitTrack = $z0;

        virtualinvoke r0.invalidate();

        return;
    }

    public void setSwitchMinWidth(int)
    {
        int $i0;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $i0 := @parameter0;

        r0.mSwitchMinWidth = $i0;

        virtualinvoke r0.requestLayout();

        return;
    }

    public void setSwitchPadding(int)
    {
        int $i0;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $i0 := @parameter0;

        r0.mSwitchPadding = $i0;

        virtualinvoke r0.requestLayout();

        return;
    }

    public void setSwitchTextAppearance(android.content.Context, int)
    {
        android.content.Context $r1;
        androidx.appcompat.widget.SwitchCompat r0;
        androidx.appcompat.text.AllCapsTransformationMethod $r6;
        android.content.res.ColorStateList $r4;
        byte b1;
        int[] r2;
        androidx.appcompat.widget.TintTypedArray $r3;
        android.text.TextPaint r5;
        int $i0, $i2;
        float f0, $f1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        r2 = androidx.appcompat.R$styleable.TextAppearance;

        $r3 = androidx.appcompat.widget.TintTypedArray.obtainStyledAttributes($r1, $i0, r2);

        $i0 = androidx.appcompat.R$styleable.TextAppearance_android_textColor;

        $r4 = virtualinvoke $r3.getColorStateList($i0);

        if $r4 == null goto label1;

        r0.mTextColors = $r4;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.getTextColors();

        r0.mTextColors = $r4;

     label2:
        $i0 = androidx.appcompat.R$styleable.TextAppearance_android_textSize;

        $i0 = virtualinvoke $r3.getDimensionPixelSize($i0, 0);

        if $i0 == 0 goto label3;

        f0 = (float) $i0;

        r5 = r0.mTextPaint;

        $f1 = virtualinvoke r5.getTextSize();

        b1 = f0 cmpl $f1;

        if b1 == 0 goto label3;

        r5 = r0.mTextPaint;

        f0 = (float) $i0;

        virtualinvoke r5.setTextSize(f0);

        virtualinvoke r0.requestLayout();

     label3:
        $i0 = androidx.appcompat.R$styleable.TextAppearance_android_typeface;

        $i0 = virtualinvoke $r3.getInt($i0, -1);

        $i2 = androidx.appcompat.R$styleable.TextAppearance_android_textStyle;

        $i2 = virtualinvoke $r3.getInt($i2, -1);

        specialinvoke r0.setSwitchTypefaceByIndex($i0, $i2);

        $i0 = androidx.appcompat.R$styleable.TextAppearance_textAllCaps;

        $z0 = virtualinvoke $r3.getBoolean($i0, 0);

        if $z0 == 0 goto label4;

        $r6 = new androidx.appcompat.text.AllCapsTransformationMethod;

        $r1 = virtualinvoke r0.getContext();

        specialinvoke $r6.<init>($r1);

        r0.mSwitchTransformationMethod = $r6;

        goto label5;

     label4:
        r0.mSwitchTransformationMethod = null;

     label5:
        virtualinvoke $r3.recycle();

        return;
    }

    public void setSwitchTypeface(android.graphics.Typeface)
    {
        android.graphics.Typeface $r1, $r3;
        androidx.appcompat.widget.SwitchCompat r0;
        android.text.TextPaint $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mTextPaint;

        $r3 = virtualinvoke $r2.getTypeface();

        if $r3 == null goto label1;

        $r2 = r0.mTextPaint;

        $r3 = virtualinvoke $r2.getTypeface();

        $z0 = virtualinvoke $r3.equals($r1);

        if $z0 == 0 goto label2;

     label1:
        $r2 = r0.mTextPaint;

        $r3 = virtualinvoke $r2.getTypeface();

        if $r3 != null goto label3;

        if $r1 == null goto label3;

     label2:
        $r2 = r0.mTextPaint;

        virtualinvoke $r2.setTypeface($r1);

        virtualinvoke r0.requestLayout();

        virtualinvoke r0.invalidate();

     label3:
        return;
    }

    public void setSwitchTypeface(android.graphics.Typeface, int)
    {
        android.graphics.Typeface $r1;
        androidx.appcompat.widget.SwitchCompat r0;
        android.text.TextPaint $r2;
        int $i0, $i1;
        float $f0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $f0 = 0.0F;

        $z0 = 0;

        if $i0 <= 0 goto label7;

        if $r1 != null goto label1;

        $r1 = android.graphics.Typeface.defaultFromStyle($i0);

        goto label2;

     label1:
        $r1 = android.graphics.Typeface.create($r1, $i0);

     label2:
        virtualinvoke r0.setSwitchTypeface($r1);

        if $r1 == null goto label3;

        $i1 = virtualinvoke $r1.getStyle();

        goto label4;

     label3:
        $i1 = 0;

     label4:
        $i1 = $i1 ^ -1;

        $i1 = $i1 & $i0;

        $r2 = r0.mTextPaint;

        $i0 = $i1 & 1;

        if $i0 == 0 goto label5;

        $z0 = 1;

     label5:
        virtualinvoke $r2.setFakeBoldText($z0);

        $r2 = r0.mTextPaint;

        $i0 = $i1 & 2;

        if $i0 == 0 goto label6;

        $f0 = -0.25F;

     label6:
        virtualinvoke $r2.setTextSkewX($f0);

        return;

     label7:
        $r2 = r0.mTextPaint;

        virtualinvoke $r2.setFakeBoldText(0);

        $r2 = r0.mTextPaint;

        virtualinvoke $r2.setTextSkewX(0.0F);

        virtualinvoke r0.setSwitchTypeface($r1);

        return;
    }

    public void setTextOff(java.lang.CharSequence)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mTextOff = $r1;

        virtualinvoke r0.requestLayout();

        return;
    }

    public void setTextOn(java.lang.CharSequence)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        java.lang.CharSequence $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mTextOn = $r1;

        virtualinvoke r0.requestLayout();

        return;
    }

    public void setThumbDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mThumbDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.setCallback(null);

     label1:
        r0.mThumbDrawable = $r1;

        if $r1 == null goto label2;

        virtualinvoke $r1.setCallback(r0);

     label2:
        virtualinvoke r0.requestLayout();

        return;
    }

    void setThumbPosition(float)
    {
        float $f0;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $f0 := @parameter0;

        r0.mThumbPosition = $f0;

        virtualinvoke r0.invalidate();

        return;
    }

    public void setThumbResource(int)
    {
        android.content.Context $r1;
        androidx.appcompat.widget.SwitchCompat r0;
        int $i0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = virtualinvoke r0.getContext();

        $r2 = androidx.appcompat.content.res.AppCompatResources.getDrawable($r1, $i0);

        virtualinvoke r0.setThumbDrawable($r2);

        return;
    }

    public void setThumbTextPadding(int)
    {
        int $i0;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $i0 := @parameter0;

        r0.mThumbTextPadding = $i0;

        virtualinvoke r0.requestLayout();

        return;
    }

    public void setThumbTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        r0.mThumbTintList = $r1;

        r0.mHasThumbTint = 1;

        specialinvoke r0.applyThumbTint();

        return;
    }

    public void setThumbTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mThumbTintMode = $r1;

        r0.mHasThumbTintMode = 1;

        specialinvoke r0.applyThumbTint();

        return;
    }

    public void setTrackDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mTrackDrawable;

        if $r2 == null goto label1;

        virtualinvoke $r2.setCallback(null);

     label1:
        r0.mTrackDrawable = $r1;

        if $r1 == null goto label2;

        virtualinvoke $r1.setCallback(r0);

     label2:
        virtualinvoke r0.requestLayout();

        return;
    }

    public void setTrackResource(int)
    {
        android.content.Context $r1;
        androidx.appcompat.widget.SwitchCompat r0;
        int $i0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this;

        $i0 := @parameter0;

        $r1 = virtualinvoke r0.getContext();

        $r2 = androidx.appcompat.content.res.AppCompatResources.getDrawable($r1, $i0);

        virtualinvoke r0.setTrackDrawable($r2);

        return;
    }

    public void setTrackTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        androidx.appcompat.widget.SwitchCompat r0;

        r0 := @this;

        $r1 := @parameter0;

        r0.mTrackTintList = $r1;

        r0.mHasTrackTint = 1;

        specialinvoke r0.applyTrackTint();

        return;
    }

    public void setTrackTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this;

        $r1 := @parameter0;

        r0.mTrackTintMode = $r1;

        r0.mHasTrackTintMode = 1;

        specialinvoke r0.applyTrackTint();

        return;
    }

    public void toggle()
    {
        androidx.appcompat.widget.SwitchCompat r0;
        boolean $z0;

        r0 := @this;

        $z0 = virtualinvoke r0.isChecked();

        $z0 = $z0 ^ 1;

        virtualinvoke r0.setChecked($z0);

        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.widget.SwitchCompat r0;
        android.graphics.drawable.Drawable $r1, $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 = specialinvoke r0.verifyDrawable($r1);

        if $z0 != 0 goto label2;

        $r2 = r0.mThumbDrawable;

        if $r1 == $r2 goto label2;

        $r2 = r0.mTrackDrawable;

        if $r1 != $r2 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
}
