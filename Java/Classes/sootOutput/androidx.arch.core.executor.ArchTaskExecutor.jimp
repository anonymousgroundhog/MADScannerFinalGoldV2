public class androidx.arch.core.executor.ArchTaskExecutor extends androidx.arch.core.executor.TaskExecutor
{
    private static final java.util.concurrent.Executor sIOThreadExecutor;
    private static volatile androidx.arch.core.executor.ArchTaskExecutor sInstance;
    private static final java.util.concurrent.Executor sMainThreadExecutor;
    private androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor;
    private androidx.arch.core.executor.TaskExecutor mDelegate;

    static void <clinit>()
    {
        androidx.arch.core.executor.ArchTaskExecutor$1 $r0;
        androidx.arch.core.executor.ArchTaskExecutor$2 $r1;

        $r0 = new androidx.arch.core.executor.ArchTaskExecutor$1;

        specialinvoke $r0.<init>();

        androidx.arch.core.executor.ArchTaskExecutor.sMainThreadExecutor = $r0;

        $r1 = new androidx.arch.core.executor.ArchTaskExecutor$2;

        specialinvoke $r1.<init>();

        androidx.arch.core.executor.ArchTaskExecutor.sIOThreadExecutor = $r1;

        return;
    }

    private void <init>()
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        androidx.arch.core.executor.DefaultTaskExecutor $r1;

        r0 := @this;

        specialinvoke r0.<init>();

        $r1 = new androidx.arch.core.executor.DefaultTaskExecutor;

        specialinvoke $r1.<init>();

        r0.mDefaultTaskExecutor = $r1;

        r0.mDelegate = $r1;

        return;
    }

    public static java.util.concurrent.Executor getIOThreadExecutor()
    {
        java.util.concurrent.Executor r0;

        r0 = androidx.arch.core.executor.ArchTaskExecutor.sIOThreadExecutor;

        return r0;
    }

    public static androidx.arch.core.executor.ArchTaskExecutor getInstance()
    {
        java.lang.Throwable $r1;
        androidx.arch.core.executor.ArchTaskExecutor $r0;

        $r0 = androidx.arch.core.executor.ArchTaskExecutor.sInstance;

        if $r0 == null goto label1;

        $r0 = androidx.arch.core.executor.ArchTaskExecutor.sInstance;

        return $r0;

     label1:
        entermonitor class "Landroidx/arch/core/executor/ArchTaskExecutor;";

     label2:
        $r0 = androidx.arch.core.executor.ArchTaskExecutor.sInstance;

        if $r0 != null goto label3;

        $r0 = new androidx.arch.core.executor.ArchTaskExecutor;

        specialinvoke $r0.<init>();

        androidx.arch.core.executor.ArchTaskExecutor.sInstance = $r0;

     label3:
        exitmonitor class "Landroidx/arch/core/executor/ArchTaskExecutor;";

     label4:
        $r0 = androidx.arch.core.executor.ArchTaskExecutor.sInstance;

        return $r0;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor class "Landroidx/arch/core/executor/ArchTaskExecutor;";

     label7:
        throw $r1;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static java.util.concurrent.Executor getMainThreadExecutor()
    {
        java.util.concurrent.Executor r0;

        r0 = androidx.arch.core.executor.ArchTaskExecutor.sMainThreadExecutor;

        return r0;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        java.lang.Runnable $r1;
        androidx.arch.core.executor.TaskExecutor $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegate;

        virtualinvoke $r2.executeOnDiskIO($r1);

        return;
    }

    public boolean isMainThread()
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        boolean $z0;
        androidx.arch.core.executor.TaskExecutor $r1;

        r0 := @this;

        $r1 = r0.mDelegate;

        $z0 = virtualinvoke $r1.isMainThread();

        return $z0;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        java.lang.Runnable $r1;
        androidx.arch.core.executor.TaskExecutor $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mDelegate;

        virtualinvoke $r2.postToMainThread($r1);

        return;
    }

    public void setDelegate(androidx.arch.core.executor.TaskExecutor)
    {
        androidx.arch.core.executor.ArchTaskExecutor r0;
        androidx.arch.core.executor.TaskExecutor $r1;

        r0 := @this;

        $r1 := @parameter0;

        if $r1 != null goto label1;

        $r1 = r0.mDefaultTaskExecutor;

        goto label1;

     label1:
        r0.mDelegate = $r1;

        return;
    }
}
