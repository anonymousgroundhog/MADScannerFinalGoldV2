public class androidx.work.impl.background.systemjob.SystemJobService extends android.app.job.JobService implements androidx.work.impl.ExecutionListener
{
    private static final java.lang.String TAG;
    private final java.util.Map mJobParameters;
    private androidx.work.impl.WorkManagerImpl mWorkManagerImpl;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = androidx.work.Logger.tagWithPrefix("SystemJobService");

        androidx.work.impl.background.systemjob.SystemJobService.TAG = $r0;

        return;
    }

    public void <init>()
    {
        java.util.HashMap $r1;
        androidx.work.impl.background.systemjob.SystemJobService r0;

        r0 := @this;

        specialinvoke r0.<init>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<init>();

        r0.mJobParameters = $r1;

        return;
    }

    private static java.lang.String getWorkSpecIdFromJobParameters(android.app.job.JobParameters)
    {
        android.os.PersistableBundle $r1;
        android.app.job.JobParameters $r0;
        java.lang.String $r2;
        java.lang.NullPointerException $r3;
        boolean $z0;

        $r0 := @parameter0;

     label1:
        $r1 = virtualinvoke $r0.getExtras();

     label2:
        if $r1 == null goto label7;

     label3:
        $z0 = virtualinvoke $r1.containsKey("EXTRA_WORK_SPEC_ID");

     label4:
        if $z0 == 0 goto label7;

     label5:
        $r2 = virtualinvoke $r1.getString("EXTRA_WORK_SPEC_ID");

     label6:
        return $r2;

     label7:
        goto label9;

     label8:
        $r3 := @caughtexception;

     label9:
        return null;

        catch java.lang.NullPointerException from label1 to label2 with label8;
        catch java.lang.NullPointerException from label3 to label4 with label8;
        catch java.lang.NullPointerException from label5 to label6 with label8;
    }

    public void onCreate()
    {
        android.content.Context $r1;
        java.lang.IllegalStateException r4;
        androidx.work.impl.Processor $r3;
        androidx.work.impl.background.systemjob.SystemJobService r0;
        androidx.work.Logger $r8;
        android.app.Application $r6;
        java.lang.Throwable[] $r10;
        androidx.work.impl.WorkManagerImpl $r2;
        java.lang.Class $r5, $r7;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this;

        specialinvoke r0.onCreate();

     label1:
        $r1 = virtualinvoke r0.getApplicationContext();

        $r2 = androidx.work.impl.WorkManagerImpl.getInstance($r1);

     label2:
        r0.mWorkManagerImpl = $r2;

     label3:
        $r3 = virtualinvoke $r2.getProcessor();

        virtualinvoke $r3.addExecutionListener(r0);

     label4:
        return;

     label5:
        r4 := @caughtexception;

        $r5 = class "Landroid/app/Application;";

        $r6 = virtualinvoke r0.getApplication();

        $r7 = virtualinvoke $r6.getClass();

        $z0 = virtualinvoke $r5.equals($r7);

        if $z0 == 0 goto label6;

        $r8 = androidx.work.Logger.get();

        $r9 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r10 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r8.warning($r9, "Could not find WorkManager instance; this may be because an auto-backup is in progress. Ignoring JobScheduler commands for now. Please make sure that you are initializing WorkManager if you have manually disabled WorkManagerInitializer.", $r10);

        return;

     label6:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<init>("WorkManager needs to be initialized via a ContentProvider#onCreate() or an Application#onCreate().");

        throw r4;

        catch java.lang.IllegalStateException from label1 to label2 with label5;
        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    public void onDestroy()
    {
        androidx.work.impl.WorkManagerImpl $r2;
        androidx.work.impl.Processor $r1;
        androidx.work.impl.background.systemjob.SystemJobService r0;

        r0 := @this;

        specialinvoke r0.onDestroy();

        $r2 = r0.mWorkManagerImpl;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.getProcessor();

        virtualinvoke $r1.removeExecutionListener(r0);

     label1:
        return;
    }

    public void onExecuted(java.lang.String, boolean)
    {
        java.lang.Throwable r11;
        java.lang.Object[] $r4;
        androidx.work.impl.background.systemjob.SystemJobService r0;
        androidx.work.Logger $r2;
        java.lang.Throwable[] $r6;
        java.util.Map $r7, r8;
        android.app.job.JobParameters r10;
        java.lang.Object $r9;
        java.lang.String $r1, r3, $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 := @parameter1;

        $r2 = androidx.work.Logger.get();

        r3 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r5 = java.lang.String.format("%s executed on JobScheduler", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.debug(r3, $r5, $r6);

        $r7 = r0.mJobParameters;

        entermonitor $r7;

     label1:
        r8 = r0.mJobParameters;

        $r9 = interfaceinvoke r8.remove($r1);

        r10 = (android.app.job.JobParameters) $r9;

        exitmonitor $r7;

     label2:
        if r10 == null goto label6;

        virtualinvoke r0.jobFinished(r10, $z0);

        return;

     label3:
        r11 := @caughtexception;

     label4:
        exitmonitor $r7;

     label5:
        throw r11;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean onStartJob(android.app.job.JobParameters)
    {
        java.lang.Throwable $r17;
        java.lang.Object[] $r2;
        java.lang.String[] $r15;
        androidx.work.WorkerParameters$RuntimeExtras r11, $r12;
        androidx.work.Logger $r4;
        java.util.Map $r7, $r8;
        int $i0;
        java.lang.String $r5, $r9, $r10;
        boolean $z0;
        android.net.Uri[] $r13;
        android.net.Network $r16;
        androidx.work.impl.background.systemjob.SystemJobService r0;
        java.util.List $r14;
        java.lang.Throwable[] $r6;
        android.app.job.JobParameters $r1;
        androidx.work.impl.WorkManagerImpl r3;

        r0 := @this;

        $r1 := @parameter0;

        r3 = r0.mWorkManagerImpl;

        if r3 != null goto label01;

        $r4 = androidx.work.Logger.get();

        $r5 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r5, "WorkManager is not initialized; requesting retry.", $r6);

        virtualinvoke r0.jobFinished($r1, 1);

        return 0;

     label01:
        $r5 = androidx.work.impl.background.systemjob.SystemJobService.getWorkSpecIdFromJobParameters($r1);

        $z0 = android.text.TextUtils.isEmpty($r5);

        if $z0 == 0 goto label02;

        $r4 = androidx.work.Logger.get();

        $r5 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.error($r5, "WorkSpec id not found!", $r6);

        return 0;

     label02:
        $r7 = r0.mJobParameters;

        entermonitor $r7;

     label03:
        $r8 = r0.mJobParameters;

        $z0 = interfaceinvoke $r8.containsKey($r5);

        if $z0 == 0 goto label05;

        $r4 = androidx.work.Logger.get();

        $r9 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r5;

        $r5 = java.lang.String.format("Job is already being executed by SystemJobService: %s", $r2);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r9, $r5, $r6);

        exitmonitor $r7;

     label04:
        return 0;

     label05:
        $r4 = androidx.work.Logger.get();

        $r9 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r5;

        $r10 = java.lang.String.format("onStartJob for %s", $r2);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r9, $r10, $r6);

        $r8 = r0.mJobParameters;

        interfaceinvoke $r8.put($r5, $r1);

        exitmonitor $r7;

     label06:
        r11 = null;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 24 goto label09;

        $r12 = new androidx.work.WorkerParameters$RuntimeExtras;

        specialinvoke $r12.<init>();

        r11 = $r12;

        $r13 = virtualinvoke $r1.getTriggeredContentUris();

        if $r13 == null goto label07;

        $r13 = virtualinvoke $r1.getTriggeredContentUris();

        $r14 = java.util.Arrays.asList($r13);

        $r12.triggeredContentUris = $r14;

     label07:
        $r15 = virtualinvoke $r1.getTriggeredContentAuthorities();

        if $r15 == null goto label08;

        $r15 = virtualinvoke $r1.getTriggeredContentAuthorities();

        $r14 = java.util.Arrays.asList($r15);

        $r12.triggeredContentAuthorities = $r14;

     label08:
        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 < 28 goto label09;

        $r16 = virtualinvoke $r1.getNetwork();

        $r12.network = $r16;

     label09:
        r3 = r0.mWorkManagerImpl;

        virtualinvoke r3.startWork($r5, r11);

        return 1;

     label10:
        $r17 := @caughtexception;

     label11:
        exitmonitor $r7;

     label12:
        throw $r17;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean onStopJob(android.app.job.JobParameters)
    {
        java.lang.Throwable $r12;
        java.lang.Object[] $r2;
        androidx.work.impl.Processor $r11;
        androidx.work.impl.background.systemjob.SystemJobService r0;
        androidx.work.Logger $r4;
        java.lang.Throwable[] $r6;
        java.util.Map $r9, $r10;
        android.app.job.JobParameters $r1;
        androidx.work.impl.WorkManagerImpl r3;
        java.lang.String $r5, $r7, $r8;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r3 = r0.mWorkManagerImpl;

        if r3 != null goto label1;

        $r4 = androidx.work.Logger.get();

        $r5 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r5, "WorkManager is not initialized; requesting retry.", $r6);

        return 1;

     label1:
        $r5 = androidx.work.impl.background.systemjob.SystemJobService.getWorkSpecIdFromJobParameters($r1);

        $z0 = android.text.TextUtils.isEmpty($r5);

        if $z0 == 0 goto label2;

        $r4 = androidx.work.Logger.get();

        $r5 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.error($r5, "WorkSpec id not found!", $r6);

        return 0;

     label2:
        $r4 = androidx.work.Logger.get();

        $r7 = androidx.work.impl.background.systemjob.SystemJobService.TAG;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r5;

        $r8 = java.lang.String.format("onStopJob for %s", $r2);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.debug($r7, $r8, $r6);

        $r9 = r0.mJobParameters;

        entermonitor $r9;

     label3:
        $r10 = r0.mJobParameters;

        interfaceinvoke $r10.remove($r5);

        exitmonitor $r9;

     label4:
        r3 = r0.mWorkManagerImpl;

        virtualinvoke r3.stopWork($r5);

        r3 = r0.mWorkManagerImpl;

        $r11 = virtualinvoke r3.getProcessor();

        $z0 = virtualinvoke $r11.isCancelled($r5);

        $z0 = 1 ^ $z0;

        return $z0;

     label5:
        $r12 := @caughtexception;

     label6:
        exitmonitor $r9;

     label7:
        throw $r12;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
