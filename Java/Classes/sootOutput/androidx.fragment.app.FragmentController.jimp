public class androidx.fragment.app.FragmentController extends java.lang.Object
{
    private final androidx.fragment.app.FragmentHostCallback mHost;

    private void <init>(androidx.fragment.app.FragmentHostCallback)
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentHostCallback r1;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.mHost = r1;

        return;
    }

    public static androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)
    {
        androidx.fragment.app.FragmentController $r1;
        androidx.fragment.app.FragmentHostCallback r0;
        java.lang.Object $r2;

        r0 := @parameter0;

        $r1 = new androidx.fragment.app.FragmentController;

        $r2 = androidx.core.util.Preconditions.checkNotNull(r0, "callbacks == null");

        r0 = (androidx.fragment.app.FragmentHostCallback) $r2;

        specialinvoke $r1.<init>(r0);

        return $r1;
    }

    public void attachHost(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        androidx.fragment.app.Fragment $r1;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        $r2 = r0.mHost;

        virtualinvoke $r3.attachController($r2, $r2, $r1);

        return;
    }

    public void dispatchActivityCreated()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchActivityCreated();

        return;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        android.content.res.Configuration $r1;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        virtualinvoke $r3.dispatchConfigurationChanged($r1);

        return;
    }

    public boolean dispatchContextItemSelected(android.view.MenuItem)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        androidx.fragment.app.FragmentController r0;
        android.view.MenuItem $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        $z0 = virtualinvoke $r3.dispatchContextItemSelected($r1);

        return $z0;
    }

    public void dispatchCreate()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchCreate();

        return;
    }

    public boolean dispatchCreateOptionsMenu(android.view.Menu, android.view.MenuInflater)
    {
        androidx.fragment.app.FragmentManagerImpl $r4;
        androidx.fragment.app.FragmentHostCallback $r3;
        android.view.MenuInflater $r2;
        android.view.Menu $r1;
        androidx.fragment.app.FragmentController r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = r0.mHost;

        $r4 = $r3.mFragmentManager;

        $z0 = virtualinvoke $r4.dispatchCreateOptionsMenu($r1, $r2);

        return $z0;
    }

    public void dispatchDestroy()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchDestroy();

        return;
    }

    public void dispatchDestroyView()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchDestroyView();

        return;
    }

    public void dispatchLowMemory()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchLowMemory();

        return;
    }

    public void dispatchMultiWindowModeChanged(boolean)
    {
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;
        androidx.fragment.app.FragmentController r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchMultiWindowModeChanged($z0);

        return;
    }

    public boolean dispatchOptionsItemSelected(android.view.MenuItem)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        androidx.fragment.app.FragmentController r0;
        android.view.MenuItem $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        $z0 = virtualinvoke $r3.dispatchOptionsItemSelected($r1);

        return $z0;
    }

    public void dispatchOptionsMenuClosed(android.view.Menu)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        android.view.Menu $r1;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        virtualinvoke $r3.dispatchOptionsMenuClosed($r1);

        return;
    }

    public void dispatchPause()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchPause();

        return;
    }

    public void dispatchPictureInPictureModeChanged(boolean)
    {
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;
        androidx.fragment.app.FragmentController r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchPictureInPictureModeChanged($z0);

        return;
    }

    public boolean dispatchPrepareOptionsMenu(android.view.Menu)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        android.view.Menu $r1;
        androidx.fragment.app.FragmentController r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        $z0 = virtualinvoke $r3.dispatchPrepareOptionsMenu($r1);

        return $z0;
    }

    public void dispatchReallyStop()
    {
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        return;
    }

    public void dispatchResume()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchResume();

        return;
    }

    public void dispatchStart()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchStart();

        return;
    }

    public void dispatchStop()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.dispatchStop();

        return;
    }

    public void doLoaderDestroy()
    {
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        return;
    }

    public void doLoaderRetain()
    {
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        return;
    }

    public void doLoaderStart()
    {
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        return;
    }

    public void doLoaderStop(boolean)
    {
        androidx.fragment.app.FragmentController r0;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        return;
    }

    public void dumpLoaders(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        java.io.PrintWriter $r3;
        java.io.FileDescriptor $r2;
        androidx.fragment.app.FragmentController r0;
        java.lang.String[] $r4;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 := @parameter3;

        return;
    }

    public boolean execPendingActions()
    {
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;
        androidx.fragment.app.FragmentController r0;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        $z0 = virtualinvoke $r2.execPendingActions();

        return $z0;
    }

    public androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
    {
        androidx.fragment.app.FragmentManagerImpl $r4;
        androidx.fragment.app.FragmentHostCallback $r3;
        androidx.fragment.app.Fragment $r2;
        androidx.fragment.app.FragmentController r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mHost;

        $r4 = $r3.mFragmentManager;

        $r2 = virtualinvoke $r4.findFragmentByWho($r1);

        return $r2;
    }

    public java.util.List getActiveFragments(java.util.List)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        java.util.List r1;
        androidx.fragment.app.FragmentHostCallback $r2;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        r1 = virtualinvoke $r3.getActiveFragments();

        return r1;
    }

    public int getActiveFragmentsCount()
    {
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;
        int $i0;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        $i0 = virtualinvoke $r2.getActiveFragmentCount();

        return $i0;
    }

    public androidx.fragment.app.FragmentManager getSupportFragmentManager()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        r2 = $r1.mFragmentManager;

        return r2;
    }

    public androidx.loader.app.LoaderManager getSupportLoaderManager()
    {
        androidx.fragment.app.FragmentController r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<init>("Loaders are managed separately from FragmentController, use LoaderManager.getInstance() to obtain a LoaderManager.");

        throw $r1;
    }

    public void noteStateNotSaved()
    {
        androidx.fragment.app.FragmentController r0;
        androidx.fragment.app.FragmentManagerImpl $r2;
        androidx.fragment.app.FragmentHostCallback $r1;

        r0 := @this;

        $r1 = r0.mHost;

        $r2 = $r1.mFragmentManager;

        virtualinvoke $r2.noteStateNotSaved();

        return;
    }

    public android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r3;
        androidx.fragment.app.FragmentManagerImpl $r6;
        androidx.fragment.app.FragmentHostCallback $r5;
        android.util.AttributeSet $r4;
        androidx.fragment.app.FragmentController r0;
        android.view.View $r1;
        java.lang.String $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        $r4 := @parameter3;

        $r5 = r0.mHost;

        $r6 = $r5.mFragmentManager;

        $r1 = virtualinvoke $r6.onCreateView($r1, $r2, $r3, $r4);

        return $r1;
    }

    public void reportLoaderStart()
    {
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        return;
    }

    public void restoreAllState(android.os.Parcelable, androidx.fragment.app.FragmentManagerNonConfig)
    {
        androidx.fragment.app.FragmentManagerImpl $r4;
        androidx.fragment.app.FragmentHostCallback $r3;
        android.os.Parcelable $r1;
        androidx.fragment.app.FragmentManagerNonConfig $r2;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = r0.mHost;

        $r4 = $r3.mFragmentManager;

        virtualinvoke $r4.restoreAllState($r1, $r2);

        return;
    }

    public void restoreAllState(android.os.Parcelable, java.util.List)
    {
        androidx.fragment.app.FragmentManagerImpl $r5;
        java.util.List r2;
        androidx.fragment.app.FragmentHostCallback $r4;
        android.os.Parcelable $r1;
        androidx.fragment.app.FragmentManagerNonConfig $r3;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        $r4 = r0.mHost;

        $r5 = $r4.mFragmentManager;

        $r3 = new androidx.fragment.app.FragmentManagerNonConfig;

        specialinvoke $r3.<init>(r2, null, null);

        virtualinvoke $r5.restoreAllState($r1, $r3);

        return;
    }

    public void restoreLoaderNonConfig(androidx.collection.SimpleArrayMap)
    {
        androidx.fragment.app.FragmentController r0;
        androidx.collection.SimpleArrayMap r1;

        r0 := @this;

        r1 := @parameter0;

        return;
    }

    public void restoreSaveState(android.os.Parcelable)
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        java.lang.IllegalStateException $r4;
        androidx.fragment.app.FragmentHostCallback $r2;
        android.os.Parcelable $r1;
        androidx.fragment.app.FragmentController r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mHost;

        $z0 = $r2 instanceof androidx.lifecycle.ViewModelStoreOwner;

        if $z0 == 0 goto label1;

        $r3 = $r2.mFragmentManager;

        virtualinvoke $r3.restoreSaveState($r1);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<init>("Your FragmentHostCallback must implement ViewModelStoreOwner to call restoreSaveState(). Call restoreAllState()  if you\'re still using retainNestedNonConfig().");

        throw $r4;
    }

    public androidx.collection.SimpleArrayMap retainLoaderNonConfig()
    {
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        return null;
    }

    public androidx.fragment.app.FragmentManagerNonConfig retainNestedNonConfig()
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        androidx.fragment.app.FragmentManagerNonConfig $r1;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        $r1 = virtualinvoke $r3.retainNonConfig();

        return $r1;
    }

    public java.util.List retainNonConfig()
    {
        androidx.fragment.app.FragmentManagerImpl r2;
        androidx.fragment.app.FragmentHostCallback r1;
        androidx.fragment.app.FragmentManagerNonConfig $r3;
        java.util.Collection $r4;
        androidx.fragment.app.FragmentController r0;
        java.util.ArrayList $r5;

        r0 := @this;

        r1 = r0.mHost;

        r2 = r1.mFragmentManager;

        $r3 = virtualinvoke r2.retainNonConfig();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.getFragments();

        if $r4 == null goto label1;

        $r5 = new java.util.ArrayList;

        $r4 = virtualinvoke $r3.getFragments();

        specialinvoke $r5.<init>($r4);

        return $r5;

     label1:
        return null;
    }

    public android.os.Parcelable saveAllState()
    {
        androidx.fragment.app.FragmentManagerImpl $r3;
        androidx.fragment.app.FragmentHostCallback $r2;
        android.os.Parcelable $r1;
        androidx.fragment.app.FragmentController r0;

        r0 := @this;

        $r2 = r0.mHost;

        $r3 = $r2.mFragmentManager;

        $r1 = virtualinvoke $r3.saveAllState();

        return $r1;
    }
}
