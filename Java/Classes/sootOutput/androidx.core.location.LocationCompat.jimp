public final class androidx.core.location.LocationCompat extends java.lang.Object
{
    private static final java.lang.String EXTRA_IS_MOCK;
    private static java.lang.reflect.Method sSetIsFromMockProviderMethod;

    private void <init>()
    {
        androidx.core.location.LocationCompat r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public static long getElapsedRealtimeMillis(android.location.Location)
    {
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        android.location.Location $r0;

        $r0 := @parameter0;

        $r1 = java.util.concurrent.TimeUnit.NANOSECONDS;

        $l0 = androidx.core.location.LocationCompat$Api17Impl.getElapsedRealtimeNanos($r0);

        $l0 = virtualinvoke $r1.toMillis($l0);

        return $l0;
    }

    public static long getElapsedRealtimeNanos(android.location.Location)
    {
        long $l0;
        android.location.Location $r0;

        $r0 := @parameter0;

        $l0 = androidx.core.location.LocationCompat$Api17Impl.getElapsedRealtimeNanos($r0);

        return $l0;
    }

    private static java.lang.reflect.Method getSetIsFromMockProviderMethod() throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r3;
        java.lang.reflect.Method $r2;

        $r2 = androidx.core.location.LocationCompat.sSetIsFromMockProviderMethod;

        if $r2 != null goto label1;

        $r3 = class "Landroid/location/Location;";

        $r0 = newarray (java.lang.Class)[1];

        $r1 = java.lang.Boolean.TYPE;

        $r0[0] = $r1;

        $r2 = virtualinvoke $r3.getDeclaredMethod("setIsFromMockProvider", $r0);

        androidx.core.location.LocationCompat.sSetIsFromMockProviderMethod = $r2;

        virtualinvoke $r2.setAccessible(1);

     label1:
        $r2 = androidx.core.location.LocationCompat.sSetIsFromMockProviderMethod;

        return $r2;
    }

    public static boolean isMock(android.location.Location)
    {
        android.location.Location $r0;
        boolean $z0;

        $r0 := @parameter0;

        $z0 = androidx.core.location.LocationCompat$Api18Impl.isMock($r0);

        return $z0;
    }

    public static void setMock(android.location.Location, boolean)
    {
        java.lang.IllegalAccessException r6;
        java.lang.Object[] r2;
        java.lang.NoSuchMethodException r8;
        java.lang.NoSuchMethodError r9;
        java.lang.RuntimeException r5;
        java.lang.reflect.InvocationTargetException r4;
        java.lang.IllegalAccessError r7;
        java.lang.Boolean $r3;
        android.location.Location $r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        $r0 := @parameter0;

        $z0 := @parameter1;

     label1:
        $r1 = androidx.core.location.LocationCompat.getSetIsFromMockProviderMethod();

     label2:
        r2 = newarray (java.lang.Object)[1];

     label3:
        $r3 = java.lang.Boolean.valueOf($z0);

     label4:
        r2[0] = $r3;

     label5:
        virtualinvoke $r1.invoke($r0, r2);

     label6:
        return;

     label7:
        r4 := @caughtexception;

        r5 = new java.lang.RuntimeException;

        specialinvoke r5.<init>(r4);

        throw r5;

     label8:
        r6 := @caughtexception;

        r7 = new java.lang.IllegalAccessError;

        specialinvoke r7.<init>();

        virtualinvoke r7.initCause(r6);

        throw r7;

     label9:
        r8 := @caughtexception;

        r9 = new java.lang.NoSuchMethodError;

        specialinvoke r9.<init>();

        virtualinvoke r9.initCause(r8);

        throw r9;

        catch java.lang.NoSuchMethodException from label1 to label2 with label9;
        catch java.lang.NoSuchMethodException from label3 to label4 with label9;
        catch java.lang.NoSuchMethodException from label5 to label6 with label9;
        catch java.lang.IllegalAccessException from label1 to label2 with label8;
        catch java.lang.IllegalAccessException from label3 to label4 with label8;
        catch java.lang.IllegalAccessException from label5 to label6 with label8;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
    }
}
