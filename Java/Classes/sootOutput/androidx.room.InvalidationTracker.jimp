public class androidx.room.InvalidationTracker extends java.lang.Object
{
    private static final java.lang.String CREATE_TRACKING_TABLE_SQL;
    private static final java.lang.String INVALIDATED_COLUMN_NAME;
    static final java.lang.String RESET_UPDATED_TABLES_SQL;
    static final java.lang.String SELECT_UPDATED_TABLES_SQL;
    private static final java.lang.String TABLE_ID_COLUMN_NAME;
    private static final java.lang.String[] TRIGGERS;
    private static final java.lang.String UPDATE_TABLE_NAME;
    volatile androidx.sqlite.db.SupportSQLiteStatement mCleanupStatement;
    final androidx.room.RoomDatabase mDatabase;
    private volatile boolean mInitialized;
    private final androidx.room.InvalidationLiveDataContainer mInvalidationLiveDataContainer;
    private androidx.room.MultiInstanceInvalidationClient mMultiInstanceInvalidationClient;
    private androidx.room.InvalidationTracker$ObservedTableTracker mObservedTableTracker;
    final androidx.arch.core.internal.SafeIterableMap mObserverMap;
    java.util.concurrent.atomic.AtomicBoolean mPendingRefresh;
    java.lang.Runnable mRefreshRunnable;
    final java.util.HashMap mTableIdLookup;
    final java.lang.String[] mTableNames;
    private java.util.Map mViewTables;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "UPDATE";

        $r0[1] = "DELETE";

        $r0[2] = "INSERT";

        androidx.room.InvalidationTracker.TRIGGERS = $r0;

        return;
    }

    public transient void <init>(androidx.room.RoomDatabase, java.util.Map, java.util.Map, java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.InvalidationTracker$1 r7;
        androidx.arch.core.internal.SafeIterableMap r6;
        java.util.concurrent.atomic.AtomicBoolean r5;
        java.lang.String[] $r4, r11;
        java.util.HashMap r9;
        java.lang.Integer $r14;
        java.util.Locale r13;
        java.util.Map r2, r3;
        int i0, i1;
        java.lang.String r12, r15;
        boolean $z0;
        androidx.room.InvalidationTracker$ObservedTableTracker r8;
        java.util.Map$Entry r19;
        androidx.room.RoomDatabase $r1;
        java.util.Iterator $r18;
        java.util.Set $r17;
        androidx.room.InvalidationLiveDataContainer r10;
        java.lang.Object $r16;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        $r4 := @parameter3;

        specialinvoke r0.<init>();

        r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r5.<init>(0);

        r0.mPendingRefresh = r5;

        r0.mInitialized = 0;

        r6 = new androidx.arch.core.internal.SafeIterableMap;

        specialinvoke r6.<init>();

        r0.mObserverMap = r6;

        r7 = new androidx.room.InvalidationTracker$1;

        specialinvoke r7.<init>(r0);

        r0.mRefreshRunnable = r7;

        r0.mDatabase = $r1;

        r8 = new androidx.room.InvalidationTracker$ObservedTableTracker;

        i0 = lengthof $r4;

        specialinvoke r8.<init>(i0);

        r0.mObservedTableTracker = r8;

        r9 = new java.util.HashMap;

        specialinvoke r9.<init>();

        r0.mTableIdLookup = r9;

        r0.mViewTables = r3;

        r10 = new androidx.room.InvalidationLiveDataContainer;

        specialinvoke r10.<init>($r1);

        r0.mInvalidationLiveDataContainer = r10;

        i0 = lengthof $r4;

        r11 = newarray (java.lang.String)[i0];

        r0.mTableNames = r11;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r12 = $r4[i1];

        r13 = java.util.Locale.US;

        r12 = virtualinvoke r12.toLowerCase(r13);

        r9 = r0.mTableIdLookup;

        $r14 = java.lang.Integer.valueOf(i1);

        virtualinvoke r9.put(r12, $r14);

        r15 = $r4[i1];

        $r16 = interfaceinvoke r2.get(r15);

        r15 = (java.lang.String) $r16;

        if r15 == null goto label2;

        r11 = r0.mTableNames;

        r13 = java.util.Locale.US;

        r12 = virtualinvoke r15.toLowerCase(r13);

        r11[i1] = r12;

        goto label3;

     label2:
        r11 = r0.mTableNames;

        r11[i1] = r12;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r17 = interfaceinvoke r2.entrySet();

        $r18 = interfaceinvoke $r17.iterator();

     label5:
        $z0 = interfaceinvoke $r18.hasNext();

        if $z0 == 0 goto label6;

        $r16 = interfaceinvoke $r18.next();

        r19 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke r19.getValue();

        r12 = (java.lang.String) $r16;

        r13 = java.util.Locale.US;

        r12 = virtualinvoke r12.toLowerCase(r13);

        r9 = r0.mTableIdLookup;

        $z0 = virtualinvoke r9.containsKey(r12);

        if $z0 == 0 goto label5;

        $r16 = interfaceinvoke r19.getKey();

        r15 = (java.lang.String) $r16;

        r13 = java.util.Locale.US;

        r15 = virtualinvoke r15.toLowerCase(r13);

        r9 = r0.mTableIdLookup;

        $r16 = virtualinvoke r9.get(r12);

        virtualinvoke r9.put(r15, $r16);

        goto label5;

     label6:
        return;
    }

    public transient void <init>(androidx.room.RoomDatabase, java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.RoomDatabase $r1;
        java.util.Map $r4;
        java.lang.String[] $r2;
        java.util.HashMap $r3;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<init>();

        $r4 = java.util.Collections.emptyMap();

        specialinvoke r0.<init>($r1, $r3, $r4, $r2);

        return;
    }

    private static void appendTriggerName(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r2;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $r0 = virtualinvoke $r0.append("`");

        $r0 = virtualinvoke $r0.append("room_table_modification_trigger_");

        $r0 = virtualinvoke $r0.append($r1);

        $r0 = virtualinvoke $r0.append("_");

        $r0 = virtualinvoke $r0.append($r2);

        virtualinvoke $r0.append("`");

        return;
    }

    private java.lang.String[] resolveViews(java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        java.lang.Object[] $r9;
        java.util.Collection $r8;
        java.lang.String[] $r1;
        java.util.HashSet r2;
        java.util.Locale r4;
        java.util.Map $r6;
        int $i0, $i1;
        java.lang.Object $r7;
        java.lang.String r3, $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = new java.util.HashSet;

        specialinvoke r2.<init>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        r3 = $r1[$i1];

        r4 = java.util.Locale.US;

        $r5 = virtualinvoke r3.toLowerCase(r4);

        $r6 = r0.mViewTables;

        $z0 = interfaceinvoke $r6.containsKey($r5);

        if $z0 == 0 goto label2;

        $r6 = r0.mViewTables;

        $r7 = interfaceinvoke $r6.get($r5);

        $r8 = (java.util.Collection) $r7;

        interfaceinvoke r2.addAll($r8);

        goto label3;

     label2:
        interfaceinvoke r2.add(r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $i0 = interfaceinvoke r2.size();

        $r1 = newarray (java.lang.String)[$i0];

        $r9 = interfaceinvoke r2.toArray($r1);

        $r1 = (java.lang.String[]) $r9;

        return $r1;
    }

    private void startTrackingTable(androidx.sqlite.db.SupportSQLiteDatabase, int)
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder r4, $r6;
        java.lang.String r3, $r5;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<init>();

        r4 = virtualinvoke r4.append("INSERT OR IGNORE INTO room_table_modification_log VALUES(");

        r4 = virtualinvoke r4.append($i0);

        r4 = virtualinvoke r4.append(", 0)");

        $r5 = virtualinvoke r4.toString();

        interfaceinvoke $r1.execSQL($r5);

        $r2 = r0.mTableNames;

        $r5 = $r2[$i0];

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<init>();

        $r2 = androidx.room.InvalidationTracker.TRIGGERS;

        $i1 = lengthof $r2;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        r3 = $r2[$i2];

        virtualinvoke r4.setLength(0);

        virtualinvoke r4.append("CREATE TEMP TRIGGER IF NOT EXISTS ");

        androidx.room.InvalidationTracker.appendTriggerName(r4, $r5, r3);

        $r6 = virtualinvoke r4.append(" AFTER ");

        $r6 = virtualinvoke $r6.append(r3);

        $r6 = virtualinvoke $r6.append(" ON `");

        $r6 = virtualinvoke $r6.append($r5);

        $r6 = virtualinvoke $r6.append("` BEGIN UPDATE ");

        $r6 = virtualinvoke $r6.append("room_table_modification_log");

        $r6 = virtualinvoke $r6.append(" SET ");

        $r6 = virtualinvoke $r6.append("invalidated");

        $r6 = virtualinvoke $r6.append(" = 1");

        $r6 = virtualinvoke $r6.append(" WHERE ");

        $r6 = virtualinvoke $r6.append("table_id");

        $r6 = virtualinvoke $r6.append(" = ");

        $r6 = virtualinvoke $r6.append($i0);

        $r6 = virtualinvoke $r6.append(" AND ");

        $r6 = virtualinvoke $r6.append("invalidated");

        $r6 = virtualinvoke $r6.append(" = 0");

        virtualinvoke $r6.append("; END");

        r3 = virtualinvoke r4.toString();

        interfaceinvoke $r1.execSQL(r3);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void stopTrackingTable(androidx.sqlite.db.SupportSQLiteDatabase, int)
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        int $i0, $i1;
        java.lang.StringBuilder r2;
        java.lang.String r4, r5;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $r3 = r0.mTableNames;

        r5 = $r3[$i0];

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<init>();

        $r3 = androidx.room.InvalidationTracker.TRIGGERS;

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r4 = $r3[$i1];

        virtualinvoke r2.setLength(0);

        virtualinvoke r2.append("DROP TRIGGER IF EXISTS ");

        androidx.room.InvalidationTracker.appendTriggerName(r2, r5, r4);

        r4 = virtualinvoke r2.toString();

        interfaceinvoke $r1.execSQL(r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private java.lang.String[] validateAndResolveTableNames(java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        java.lang.String[] $r1;
        java.util.HashMap $r3;
        java.lang.IllegalArgumentException $r6;
        java.util.Locale $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r7;
        java.lang.String r2, $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r1 = specialinvoke r0.resolveViews($r1);

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r2 = $r1[$i1];

        $r3 = r0.mTableIdLookup;

        $r4 = java.util.Locale.US;

        $r5 = virtualinvoke r2.toLowerCase($r4);

        $z0 = virtualinvoke $r3.containsKey($r5);

        if $z0 == 0 goto label2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r7 = virtualinvoke $r7.append("There is no table with name ");

        $r7 = virtualinvoke $r7.append(r2);

        r2 = virtualinvoke $r7.toString();

        specialinvoke $r6.<init>(r2);

        throw $r6;

     label3:
        return $r1;
    }

    public void addObserver(androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.InvalidationTracker r0;
        java.lang.Throwable r15;
        androidx.arch.core.internal.SafeIterableMap r12, r13;
        java.lang.String[] r2;
        java.util.HashMap r4;
        java.lang.Integer r8;
        int[] r3;
        java.util.Locale $r6;
        int i0, i1, $i2;
        java.lang.String r5;
        boolean $z0;
        androidx.room.InvalidationTracker$ObservedTableTracker r14;
        androidx.room.InvalidationTracker$Observer $r1;
        java.lang.IllegalArgumentException r9;
        androidx.room.InvalidationTracker$ObserverWrapper r11;
        java.lang.Object $r7;
        java.lang.StringBuilder $r10;

        r0 := @this;

        $r1 := @parameter0;

        r2 = $r1.mTables;

        r2 = specialinvoke r0.resolveViews(r2);

        i0 = lengthof r2;

        r3 = newarray (int)[i0];

        i0 = lengthof r2;

        i1 = 0;

     label01:
        if i1 >= i0 goto label03;

        r4 = r0.mTableIdLookup;

        r5 = r2[i1];

        $r6 = java.util.Locale.US;

        r5 = virtualinvoke r5.toLowerCase($r6);

        $r7 = virtualinvoke r4.get(r5);

        r8 = (java.lang.Integer) $r7;

        if r8 == null goto label02;

        $i2 = virtualinvoke r8.intValue();

        r3[i1] = $i2;

        i1 = i1 + 1;

        goto label01;

     label02:
        r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<init>();

        $r10 = virtualinvoke $r10.append("There is no table with name ");

        r5 = r2[i1];

        $r10 = virtualinvoke $r10.append(r5);

        r5 = virtualinvoke $r10.toString();

        specialinvoke r9.<init>(r5);

        throw r9;

     label03:
        r11 = new androidx.room.InvalidationTracker$ObserverWrapper;

        specialinvoke r11.<init>($r1, r3, r2);

        r12 = r0.mObserverMap;

        entermonitor r12;

     label04:
        r13 = r0.mObserverMap;

        $r7 = virtualinvoke r13.putIfAbsent($r1, r11);

        r11 = (androidx.room.InvalidationTracker$ObserverWrapper) $r7;

        exitmonitor r12;

     label05:
        if r11 != null goto label10;

        r14 = r0.mObservedTableTracker;

        $z0 = virtualinvoke r14.onAdded(r3);

        if $z0 == 0 goto label10;

        virtualinvoke r0.syncTriggers();

        return;

     label06:
        r15 := @caughtexception;

     label07:
        exitmonitor r12;

     label08:
        goto label09;

     label09:
        throw r15;

     label10:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public void addWeakObserver(androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.InvalidationTracker$WeakObserver $r2;
        androidx.room.InvalidationTracker$Observer $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = new androidx.room.InvalidationTracker$WeakObserver;

        specialinvoke $r2.<init>(r0, $r1);

        virtualinvoke r0.addObserver($r2);

        return;
    }

    public androidx.lifecycle.LiveData createLiveData(java.lang.String[], java.util.concurrent.Callable)
    {
        androidx.room.InvalidationTracker r0;
        androidx.lifecycle.LiveData $r3;
        java.lang.String[] $r1;
        java.util.concurrent.Callable r2;

        r0 := @this;

        $r1 := @parameter0;

        r2 := @parameter1;

        $r3 = virtualinvoke r0.createLiveData($r1, 0, r2);

        return $r3;
    }

    public androidx.lifecycle.LiveData createLiveData(java.lang.String[], boolean, java.util.concurrent.Callable)
    {
        androidx.room.InvalidationTracker r0;
        androidx.lifecycle.LiveData $r4;
        androidx.room.InvalidationLiveDataContainer $r3;
        java.lang.String[] $r1;
        java.util.concurrent.Callable r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 := @parameter1;

        r2 := @parameter2;

        $r3 = r0.mInvalidationLiveDataContainer;

        $r1 = specialinvoke r0.validateAndResolveTableNames($r1);

        $r4 = virtualinvoke $r3.create($r1, $z0, r2);

        return $r4;
    }

    boolean ensureInitialization()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.RoomDatabase $r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDatabase;

        $z0 = virtualinvoke $r1.isOpen();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z0 = r0.mInitialized;

        if $z0 != 0 goto label2;

        $r1 = r0.mDatabase;

        $r2 = virtualinvoke $r1.getOpenHelper();

        interfaceinvoke $r2.getWritableDatabase();

     label2:
        $z0 = r0.mInitialized;

        if $z0 != 0 goto label3;

        android.util.Log.e("ROOM", "database is not initialized even though it is open");

        return 0;

     label3:
        return 1;
    }

    void internalInit(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.InvalidationTracker r0;
        java.lang.Throwable $r3;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;
        androidx.sqlite.db.SupportSQLiteStatement $r2;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        entermonitor r0;

     label1:
        $z0 = r0.mInitialized;

        if $z0 == 0 goto label3;

        android.util.Log.e("ROOM", "Invalidation tracker is initialized twice :/.");

        exitmonitor r0;

     label2:
        return;

     label3:
        interfaceinvoke $r1.execSQL("PRAGMA temp_store = MEMORY;");

        interfaceinvoke $r1.execSQL("PRAGMA recursive_triggers=\'ON\';");

        interfaceinvoke $r1.execSQL("CREATE TEMP TABLE room_table_modification_log(table_id INTEGER PRIMARY KEY, invalidated INTEGER NOT NULL DEFAULT 0)");

        virtualinvoke r0.syncTriggers($r1);

        $r2 = interfaceinvoke $r1.compileStatement("UPDATE room_table_modification_log SET invalidated = 0 WHERE invalidated = 1 ");

        r0.mCleanupStatement = $r2;

        r0.mInitialized = 1;

        exitmonitor r0;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public transient void notifyObserversByTableNames(java.lang.String[])
    {
        androidx.room.InvalidationTracker r0;
        java.lang.Throwable $r9;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        androidx.arch.core.internal.SafeIterableMap $r2, $r3;
        androidx.room.InvalidationTracker$Observer $r7;
        java.lang.String[] $r1;
        androidx.room.InvalidationTracker$ObserverWrapper $r8;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mObserverMap;

        entermonitor $r2;

     label1:
        $r3 = r0.mObserverMap;

        $r4 = virtualinvoke $r3.iterator();

     label2:
        $z0 = interfaceinvoke $r4.hasNext();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.next();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.getKey();

        $r7 = (androidx.room.InvalidationTracker$Observer) $r5;

        $z0 = virtualinvoke $r7.isRemote();

        if $z0 != 0 goto label2;

        $r5 = interfaceinvoke r6.getValue();

        $r8 = (androidx.room.InvalidationTracker$ObserverWrapper) $r5;

        virtualinvoke $r8.notifyByTableNames($r1);

        goto label2;

     label3:
        exitmonitor $r2;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        exitmonitor $r2;

     label6:
        goto label7;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void refreshVersionsAsync()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.RoomDatabase $r2;
        java.util.concurrent.Executor $r3;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.lang.Runnable $r4;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mPendingRefresh;

        $z0 = virtualinvoke $r1.compareAndSet(0, 1);

        if $z0 == 0 goto label1;

        $r2 = r0.mDatabase;

        $r3 = virtualinvoke $r2.getQueryExecutor();

        $r4 = r0.mRefreshRunnable;

        interfaceinvoke $r3.execute($r4);

     label1:
        return;
    }

    public void refreshVersionsSync()
    {
        androidx.room.InvalidationTracker r0;
        java.lang.Runnable $r1;

        r0 := @this;

        virtualinvoke r0.syncTriggers();

        $r1 = r0.mRefreshRunnable;

        interfaceinvoke $r1.run();

        return;
    }

    public void removeObserver(androidx.room.InvalidationTracker$Observer)
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.InvalidationTracker$ObservedTableTracker $r7;
        java.lang.Throwable r8;
        androidx.arch.core.internal.SafeIterableMap $r3, r4;
        androidx.room.InvalidationTracker$Observer $r1;
        int[] $r2;
        androidx.room.InvalidationTracker$ObserverWrapper r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r3 = r0.mObserverMap;

        entermonitor $r3;

     label1:
        r4 = r0.mObserverMap;

        $r5 = virtualinvoke r4.remove($r1);

        r6 = (androidx.room.InvalidationTracker$ObserverWrapper) $r5;

        exitmonitor $r3;

     label2:
        if r6 == null goto label6;

        $r7 = r0.mObservedTableTracker;

        $r2 = r6.mTableIds;

        $z0 = virtualinvoke $r7.onRemoved($r2);

        if $z0 == 0 goto label6;

        virtualinvoke r0.syncTriggers();

        return;

     label3:
        r8 := @caughtexception;

     label4:
        exitmonitor $r3;

     label5:
        throw r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void startMultiInstanceInvalidation(android.content.Context, java.lang.String)
    {
        androidx.room.InvalidationTracker r0;
        android.content.Context $r1;
        androidx.room.RoomDatabase $r5;
        java.util.concurrent.Executor $r4;
        androidx.room.MultiInstanceInvalidationClient $r3;
        java.lang.String $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 = new androidx.room.MultiInstanceInvalidationClient;

        $r5 = r0.mDatabase;

        $r4 = virtualinvoke $r5.getQueryExecutor();

        specialinvoke $r3.<init>($r1, $r2, r0, $r4);

        r0.mMultiInstanceInvalidationClient = $r3;

        return;
    }

    void stopMultiInstanceInvalidation()
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.MultiInstanceInvalidationClient $r1;

        r0 := @this;

        $r1 = r0.mMultiInstanceInvalidationClient;

        if $r1 == null goto label1;

        virtualinvoke $r1.stop();

        r0.mMultiInstanceInvalidationClient = null;

     label1:
        return;
    }

    void syncTriggers()
    {
        androidx.room.InvalidationTracker r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r3;
        androidx.room.RoomDatabase $r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mDatabase;

        $z0 = virtualinvoke $r1.isOpen();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.mDatabase;

        $r2 = virtualinvoke $r1.getOpenHelper();

        $r3 = interfaceinvoke $r2.getWritableDatabase();

        virtualinvoke r0.syncTriggers($r3);

        return;
    }

    void syncTriggers(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.InvalidationTracker r0;
        androidx.room.InvalidationTracker$ObservedTableTracker r4;
        java.lang.Throwable r6, r7;
        androidx.room.RoomDatabase r2;
        java.lang.RuntimeException r8;
        java.util.concurrent.locks.Lock $r3;
        androidx.sqlite.db.SupportSQLiteDatabase r1;
        int[] $r5;
        int $i0, i1, i2;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $z0 = interfaceinvoke r1.inTransaction();

        if $z0 == 0 goto label01;

        return;

     label01:
        r2 = r0.mDatabase;

     label02:
        $r3 = virtualinvoke r2.getCloseLock();

        interfaceinvoke $r3.lock();

     label03:
        r4 = r0.mObservedTableTracker;

        $r5 = virtualinvoke r4.getTablesToSync();

     label04:
        if $r5 != null goto label07;

     label05:
        interfaceinvoke $r3.unlock();

     label06:
        return;

     label07:
        i1 = lengthof $r5;

        interfaceinvoke r1.beginTransaction();

     label08:
        i2 = 0;

     label09:
        if i2 >= i1 goto label17;

     label10:
        $i0 = $r5[i2];

     label11:
        lookupswitch($i0)
        {
            case 1: goto label15;
            case 2: goto label13;
            default: goto label12;
        };

     label12:
        goto label16;

     label13:
        specialinvoke r0.stopTrackingTable(r1, i2);

     label14:
        goto label16;

     label15:
        specialinvoke r0.startTrackingTable(r1, i2);

     label16:
        i2 = i2 + 1;

        goto label09;

     label17:
        interfaceinvoke r1.setTransactionSuccessful();

     label18:
        interfaceinvoke r1.endTransaction();

        r4 = r0.mObservedTableTracker;

        virtualinvoke r4.onSyncCompleted();

     label19:
        interfaceinvoke $r3.unlock();

     label20:
        goto label01;

     label21:
        r6 := @caughtexception;

     label22:
        interfaceinvoke r1.endTransaction();

        throw r6;

     label23:
        r7 := @caughtexception;

     label24:
        interfaceinvoke $r3.unlock();

        throw r7;

     label25:
        r8 := @caughtexception;

        goto label27;

     label26:
        r8 := @caughtexception;

     label27:
        android.util.Log.e("ROOM", "Cannot run invalidation tracker. Is the db closed?", r8);

        return;

        catch java.lang.IllegalStateException from label02 to label03 with label26;
        catch android.database.sqlite.SQLiteException from label02 to label03 with label25;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.IllegalStateException from label05 to label06 with label26;
        catch android.database.sqlite.SQLiteException from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.IllegalStateException from label19 to label20 with label26;
        catch android.database.sqlite.SQLiteException from label19 to label20 with label25;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.IllegalStateException from label24 to label25 with label26;
        catch android.database.sqlite.SQLiteException from label24 to label25 with label25;
    }
}
