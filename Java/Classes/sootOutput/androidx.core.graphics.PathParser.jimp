public class androidx.core.graphics.PathParser extends java.lang.Object
{
    private static final java.lang.String LOGTAG;

    private void <init>()
    {
        androidx.core.graphics.PathParser r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    private static void addNode(java.util.ArrayList, char, float[])
    {
        androidx.core.graphics.PathParser$PathDataNode $r2;
        char $c0;
        float[] $r1;
        java.util.ArrayList r0;

        r0 := @parameter0;

        $c0 := @parameter1;

        $r1 := @parameter2;

        $r2 = new androidx.core.graphics.PathParser$PathDataNode;

        specialinvoke $r2.<init>($c0, $r1);

        virtualinvoke r0.add($r2);

        return;
    }

    public static boolean canMorph(androidx.core.graphics.PathParser$PathDataNode[], androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode $r2;
        char $c2, $c3;
        float[] $r3;
        androidx.core.graphics.PathParser$PathDataNode[] $r0, $r1;
        int i0, $i1, $i4;

        $r0 := @parameter0;

        $r1 := @parameter1;

        if $r0 == null goto label7;

        if $r1 != null goto label1;

        return 0;

     label1:
        i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if i0 == $i1 goto label2;

        return 0;

     label2:
        i0 = 0;

     label3:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label6;

        $r2 = $r0[i0];

        $c2 = $r2.mType;

        $r2 = $r1[i0];

        $c3 = $r2.mType;

        $i1 = (int) $c2;

        $i4 = (int) $c3;

        if $i1 != $i4 goto label5;

        $r2 = $r0[i0];

        $r3 = $r2.mParams;

        $i1 = lengthof $r3;

        $r2 = $r1[i0];

        $r3 = $r2.mParams;

        $i4 = lengthof $r3;

        if $i1 == $i4 goto label4;

        return 0;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return 0;

     label6:
        return 1;

     label7:
        return 0;
    }

    static float[] copyOfRange(float[], int, int)
    {
        int $i0, $i1, $i2;
        float[] $r0, r1;
        java.lang.ArrayIndexOutOfBoundsException r2;
        java.lang.IllegalArgumentException r3;

        $r0 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        if $i0 > $i1 goto label2;

        $i2 = lengthof $r0;

        if $i0 < 0 goto label1;

        if $i0 > $i2 goto label1;

        $i1 = $i1 - $i0;

        $i2 = $i2 - $i0;

        $i2 = java.lang.Math.min($i1, $i2);

        r1 = newarray (float)[$i1];

        java.lang.System.arraycopy($r0, $i0, r1, 0, $i2);

        return r1;

     label1:
        r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke r2.<init>();

        throw r2;

     label2:
        r3 = new java.lang.IllegalArgumentException;

        specialinvoke r3.<init>();

        throw r3;
    }

    public static androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)
    {
        java.lang.Object[] $r5;
        float[] $r3;
        char $c3;
        java.util.ArrayList r1;
        androidx.core.graphics.PathParser$PathDataNode[] r4;
        int i0, i1, $i2;
        java.lang.String $r0, $r2;

        $r0 := @parameter0;

        if $r0 != null goto label1;

        return null;

     label1:
        i0 = 0;

        i1 = 1;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<init>();

     label2:
        $i2 = virtualinvoke $r0.length();

        if i1 >= $i2 goto label4;

        i1 = androidx.core.graphics.PathParser.nextStart($r0, i1);

        $r2 = virtualinvoke $r0.substring(i0, i1);

        $r2 = virtualinvoke $r2.trim();

        i0 = virtualinvoke $r2.length();

        if i0 <= 0 goto label3;

        $r3 = androidx.core.graphics.PathParser.getFloats($r2);

        $c3 = virtualinvoke $r2.charAt(0);

        androidx.core.graphics.PathParser.addNode(r1, $c3, $r3);

     label3:
        i0 = i1;

        i1 = i1 + 1;

        goto label2;

     label4:
        i1 = i1 - i0;

        if i1 != 1 goto label5;

        i1 = virtualinvoke $r0.length();

        if i0 >= i1 goto label5;

        $c3 = virtualinvoke $r0.charAt(i0);

        $r3 = newarray (float)[0];

        androidx.core.graphics.PathParser.addNode(r1, $c3, $r3);

     label5:
        i0 = virtualinvoke r1.size();

        r4 = newarray (androidx.core.graphics.PathParser$PathDataNode)[i0];

        $r5 = virtualinvoke r1.toArray(r4);

        r4 = (androidx.core.graphics.PathParser$PathDataNode[]) $r5;

        return r4;
    }

    public static android.graphics.Path createPathFromPathData(java.lang.String)
    {
        androidx.core.graphics.PathParser$PathDataNode[] $r3;
        android.graphics.Path r1;
        java.lang.StringBuilder $r5;
        java.lang.String $r0;
        java.lang.RuntimeException $r2, r4;

        $r0 := @parameter0;

        r1 = new android.graphics.Path;

        specialinvoke r1.<init>();

        $r3 = androidx.core.graphics.PathParser.createNodesFromPathData($r0);

        if $r3 == null goto label4;

     label1:
        androidx.core.graphics.PathParser$PathDataNode.nodesToPath($r3, r1);

     label2:
        return r1;

     label3:
        r4 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r5 = virtualinvoke $r5.append("Error in parsing ");

        $r5 = virtualinvoke $r5.append($r0);

        $r0 = virtualinvoke $r5.toString();

        specialinvoke $r2.<init>($r0, r4);

        throw $r2;

     label4:
        return null;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static androidx.core.graphics.PathParser$PathDataNode[] deepCopyNodes(androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode[] $r0, r2;
        androidx.core.graphics.PathParser$PathDataNode $r1, $r3;
        int i0, $i1;

        $r0 := @parameter0;

        if $r0 != null goto label1;

        return null;

     label1:
        i0 = lengthof $r0;

        r2 = newarray (androidx.core.graphics.PathParser$PathDataNode)[i0];

        i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $r3 = new androidx.core.graphics.PathParser$PathDataNode;

        $r1 = $r0[i0];

        specialinvoke $r3.<init>($r1);

        r2[i0] = $r3;

        i0 = i0 + 1;

        goto label2;

     label3:
        return r2;
    }

    private static void extract(java.lang.String, int, androidx.core.graphics.PathParser$ExtractFloatResult)
    {
        char $c3;
        androidx.core.graphics.PathParser$ExtractFloatResult $r1;
        int $i0, i1, $i2;
        java.lang.String $r0;
        boolean z0, z1, z2, z3;

        $r0 := @parameter0;

        $i0 := @parameter1;

        $r1 := @parameter2;

        i1 = $i0;

        z0 = 0;

        $r1.mEndWithNegOrDot = 0;

        z1 = 0;

        z2 = 0;

     label01:
        $i2 = virtualinvoke $r0.length();

        if i1 >= $i2 goto label10;

        z3 = z2;

        z2 = 0;

        $c3 = virtualinvoke $r0.charAt(i1);

        $i2 = (int) $c3;

        lookupswitch($i2)
        {
            case 32: goto label07;
            case 44: goto label07;
            case 45: goto label06;
            case 46: goto label04;
            case 69: goto label03;
            case 101: goto label03;
            default: goto label02;
        };

     label02:
        goto label08;

     label03:
        z2 = 1;

        goto label08;

     label04:
        if z1 != 0 goto label05;

        z1 = 1;

        goto label08;

     label05:
        z0 = 1;

        $r1.mEndWithNegOrDot = 1;

        goto label08;

     label06:
        if i1 == $i0 goto label08;

        if z3 != 0 goto label08;

        z0 = 1;

        $r1.mEndWithNegOrDot = 1;

        goto label08;

     label07:
        z0 = 1;

     label08:
        if z0 == 0 goto label09;

        goto label10;

     label09:
        i1 = i1 + 1;

        goto label01;

     label10:
        $r1.mEndPosition = i1;

        return;
    }

    private static float[] getFloats(java.lang.String)
    {
        float[] r2;
        int $i1, i2, $i3, i4;
        java.lang.String $r0, $r3;
        boolean z0;
        char $c0;
        java.lang.NumberFormatException r4;
        java.lang.RuntimeException $r8;
        androidx.core.graphics.PathParser$ExtractFloatResult r1, $r6;
        float $f0;
        java.lang.StringBuilder r5, $r7;

        $r0 := @parameter0;

        $c0 = virtualinvoke $r0.charAt(0);

        $i1 = (int) $c0;

        if $i1 == 122 goto label14;

        $c0 = virtualinvoke $r0.charAt(0);

        $i1 = (int) $c0;

        if $i1 != 90 goto label01;

        goto label14;

     label01:
        $i1 = virtualinvoke $r0.length();

     label02:
        r2 = newarray (float)[$i1];

        $i1 = 0;

        i2 = 1;

        $r6 = new androidx.core.graphics.PathParser$ExtractFloatResult;

        r1 = $r6;

     label03:
        specialinvoke $r6.<init>();

        $i3 = virtualinvoke $r0.length();

     label04:
        if i2 >= $i3 goto label11;

     label05:
        androidx.core.graphics.PathParser.extract($r0, i2, r1);

     label06:
        i4 = r1.mEndPosition;

        if i2 >= i4 goto label09;

     label07:
        $r3 = virtualinvoke $r0.substring(i2, i4);

        $f0 = java.lang.Float.parseFloat($r3);

     label08:
        r2[$i1] = $f0;

        $i1 = $i1 + 1;

     label09:
        z0 = r1.mEndWithNegOrDot;

        if z0 == 0 goto label10;

        i2 = i4;

        goto label04;

     label10:
        i2 = i4 + 1;

        goto label04;

     label11:
        r2 = androidx.core.graphics.PathParser.copyOfRange(r2, 0, $i1);

     label12:
        return r2;

     label13:
        r4 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        r5 = virtualinvoke $r7.append("error in parsing \"");

        r5 = virtualinvoke r5.append($r0);

        r5 = virtualinvoke r5.append("\"");

        $r0 = virtualinvoke r5.toString();

        specialinvoke $r8.<init>($r0, r4);

        throw $r8;

     label14:
        r2 = newarray (float)[0];

        return r2;

        catch java.lang.NumberFormatException from label01 to label02 with label13;
        catch java.lang.NumberFormatException from label03 to label04 with label13;
        catch java.lang.NumberFormatException from label05 to label06 with label13;
        catch java.lang.NumberFormatException from label07 to label08 with label13;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    public static boolean interpolatePathDataNodes(androidx.core.graphics.PathParser$PathDataNode[], androidx.core.graphics.PathParser$PathDataNode[], androidx.core.graphics.PathParser$PathDataNode[], float)
    {
        androidx.core.graphics.PathParser$PathDataNode $r3, $r4, $r5;
        java.lang.IllegalArgumentException r6;
        androidx.core.graphics.PathParser$PathDataNode[] $r0, $r1, $r2;
        int i0, $i1;
        float $f0;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        $f0 := @parameter3;

        if $r0 == null goto label5;

        if $r1 == null goto label5;

        if $r2 == null goto label5;

        i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if i0 != $i1 goto label4;

        i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if i0 != $i1 goto label4;

        $z0 = androidx.core.graphics.PathParser.canMorph($r1, $r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label3;

        $r5 = $r0[i0];

        $r3 = $r1[i0];

        $r4 = $r2[i0];

        virtualinvoke $r5.interpolatePathDataNode($r3, $r4, $f0);

        i0 = i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<init>("The nodes to be interpolated and resulting nodes must have the same length");

        throw r6;

     label5:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<init>("The nodes to be interpolated and resulting nodes cannot be null");

        goto label6;

     label6:
        throw r6;
    }

    private static int nextStart(java.lang.String, int)
    {
        int $i0, $i1, $i3;
        char $c2;
        java.lang.String $r0;

        $r0 := @parameter0;

        $i0 := @parameter1;

     label1:
        $i1 = virtualinvoke $r0.length();

        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.charAt($i0);

        $i1 = (int) $c2;

        $i1 = $i1 + -65;

        $i3 = (int) $c2;

        $i3 = $i3 + -90;

        $i1 = $i1 * $i3;

        if $i1 <= 0 goto label2;

        $i1 = (int) $c2;

        $i1 = $i1 + -97;

        $i3 = (int) $c2;

        $i3 = $i3 + -122;

        $i1 = $i1 * $i3;

        if $i1 > 0 goto label3;

     label2:
        $i1 = (int) $c2;

        if $i1 == 101 goto label3;

        $i1 = (int) $c2;

        if $i1 == 69 goto label3;

        return $i0;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $i0;
    }

    public static void updateNodes(androidx.core.graphics.PathParser$PathDataNode[], androidx.core.graphics.PathParser$PathDataNode[])
    {
        androidx.core.graphics.PathParser$PathDataNode r2, $r3;
        char $c2;
        float[] $r4, $r5;
        androidx.core.graphics.PathParser$PathDataNode[] $r0, $r1;
        int i0, i1, $i3;
        float $f0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        i0 = 0;

     label1:
        i1 = lengthof $r1;

        if i0 >= i1 goto label4;

        r2 = $r0[i0];

        $r3 = $r1[i0];

        $c2 = $r3.mType;

        r2.mType = $c2;

        i1 = 0;

     label2:
        r2 = $r1[i0];

        $r4 = r2.mParams;

        $i3 = lengthof $r4;

        if i1 >= $i3 goto label3;

        r2 = $r0[i0];

        $r4 = r2.mParams;

        r2 = $r1[i0];

        $r5 = r2.mParams;

        $f0 = $r5[i1];

        $r4[i1] = $f0;

        i1 = i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }
}
