public class androidx.core.graphics.TypefaceCompatUtil extends java.lang.Object
{
    private static final java.lang.String CACHE_FILE_PREFIX;
    private static final java.lang.String TAG;

    private void <init>()
    {
        androidx.core.graphics.TypefaceCompatUtil r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.IOException $r1;
        java.io.Closeable $r0;

        $r0 := @parameter0;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.close();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.nio.ByteBuffer copyToDirectBuffer(android.content.Context, android.content.res.Resources, int)
    {
        java.lang.Throwable $r4;
        android.content.Context $r0;
        int $i0;
        java.io.File $r2;
        java.nio.ByteBuffer $r3;
        android.content.res.Resources $r1;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $i0 := @parameter2;

        $r2 = androidx.core.graphics.TypefaceCompatUtil.getTempFile($r0);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = androidx.core.graphics.TypefaceCompatUtil.copyToFile($r2, $r1, $i0);

     label2:
        if $z0 != 0 goto label3;

        virtualinvoke $r2.delete();

        return null;

     label3:
        $r3 = androidx.core.graphics.TypefaceCompatUtil.mmap($r2);

     label4:
        virtualinvoke $r2.delete();

        return $r3;

     label5:
        $r4 := @caughtexception;

        virtualinvoke $r2.delete();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static boolean copyToFile(java.io.File, android.content.res.Resources, int)
    {
        java.lang.Throwable $r4;
        int $i0;
        java.io.File $r0;
        android.content.res.Resources $r1;
        java.io.InputStream r2, $r3;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $i0 := @parameter2;

        r2 = null;

     label1:
        $r3 = virtualinvoke $r1.openRawResource($i0);

     label2:
        r2 = $r3;

     label3:
        $z0 = androidx.core.graphics.TypefaceCompatUtil.copyToFile($r0, $r3);

     label4:
        androidx.core.graphics.TypefaceCompatUtil.closeQuietly($r3);

        return $z0;

     label5:
        $r4 := @caughtexception;

        androidx.core.graphics.TypefaceCompatUtil.closeQuietly(r2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static boolean copyToFile(java.io.File, java.io.InputStream)
    {
        java.lang.Throwable $r6;
        byte[] r5;
        android.os.StrictMode$ThreadPolicy $r3;
        java.io.FileOutputStream r2, r4, $r10;
        java.io.IOException r7;
        java.io.File $r0;
        int $i0;
        java.lang.StringBuilder r8, $r11;
        java.lang.String $r9;
        java.io.InputStream $r1;

        $r0 := @parameter0;

        $r1 := @parameter1;

        r2 = null;

        $r3 = android.os.StrictMode.allowThreadDiskWrites();

     label01:
        $r10 = new java.io.FileOutputStream;

     label02:
        r4 = $r10;

     label03:
        specialinvoke $r10.<init>($r0, 0);

     label04:
        r2 = r4;

        r5 = newarray (byte)[1024];

     label05:
        $i0 = virtualinvoke $r1.read(r5);

     label06:
        if $i0 == -1 goto label09;

     label07:
        virtualinvoke r4.write(r5, 0, $i0);

     label08:
        goto label05;

     label09:
        androidx.core.graphics.TypefaceCompatUtil.closeQuietly(r4);

        android.os.StrictMode.setThreadPolicy($r3);

        return 1;

     label10:
        $r6 := @caughtexception;

        goto label16;

     label11:
        r7 := @caughtexception;

     label12:
        $r11 = new java.lang.StringBuilder;

     label13:
        r8 = $r11;

     label14:
        specialinvoke $r11.<init>();

        r8 = virtualinvoke r8.append("Error copying resource contents to temp file: ");

        $r9 = virtualinvoke r7.getMessage();

        r8 = virtualinvoke r8.append($r9);

        $r9 = virtualinvoke r8.toString();

        android.util.Log.e("TypefaceCompatUtil", $r9);

     label15:
        androidx.core.graphics.TypefaceCompatUtil.closeQuietly(r2);

        android.os.StrictMode.setThreadPolicy($r3);

        return 0;

     label16:
        androidx.core.graphics.TypefaceCompatUtil.closeQuietly(r2);

        android.os.StrictMode.setThreadPolicy($r3);

        goto label17;

     label17:
        throw $r6;

        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
        catch java.lang.Throwable from label14 to label15 with label10;
    }

    public static java.io.File getTempFile(android.content.Context)
    {
        android.content.Context $r0;
        java.io.IOException $r6;
        java.io.File $r1, r4;
        int $i0;
        java.lang.StringBuilder r2;
        java.lang.String $r3, $r5;
        boolean $z0;

        $r0 := @parameter0;

        $r1 = virtualinvoke $r0.getCacheDir();

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<init>();

        r2 = virtualinvoke r2.append(".font");

        $i0 = android.os.Process.myPid();

        r2 = virtualinvoke r2.append($i0);

        r2 = virtualinvoke r2.append("-");

        $i0 = android.os.Process.myTid();

        r2 = virtualinvoke r2.append($i0);

        r2 = virtualinvoke r2.append("-");

        $r3 = virtualinvoke r2.toString();

        $i0 = 0;

     label2:
        if $i0 >= 100 goto label8;

        r4 = new java.io.File;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<init>();

        r2 = virtualinvoke r2.append($r3);

        r2 = virtualinvoke r2.append($i0);

        $r5 = virtualinvoke r2.toString();

        specialinvoke r4.<init>($r1, $r5);

     label3:
        $z0 = virtualinvoke r4.createNewFile();

     label4:
        if $z0 == 0 goto label5;

        return r4;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        $i0 = $i0 + 1;

        goto label2;

     label8:
        return null;

        catch java.io.IOException from label3 to label4 with label6;
    }

    public static java.nio.ByteBuffer mmap(android.content.Context, android.os.CancellationSignal, android.net.Uri)
    {
        java.lang.Throwable r10, $r11, r12, r13;
        android.content.Context r0;
        android.os.ParcelFileDescriptor $r4;
        android.net.Uri r2;
        long $l0;
        java.nio.channels.FileChannel$MapMode $r8;
        android.content.ContentResolver $r3;
        android.os.CancellationSignal r1;
        java.io.IOException r14;
        java.io.FileInputStream r5;
        java.io.FileDescriptor $r6;
        java.nio.channels.FileChannel $r7;
        java.nio.MappedByteBuffer $r9;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        $r3 = virtualinvoke r0.getContentResolver();

     label01:
        $r4 = virtualinvoke $r3.openFileDescriptor(r2, "r", r1);

     label02:
        if $r4 != null goto label05;

        if $r4 == null goto label24;

     label03:
        virtualinvoke $r4.close();

     label04:
        return null;

     label05:
        r5 = new java.io.FileInputStream;

        $r6 = virtualinvoke $r4.getFileDescriptor();

        specialinvoke r5.<init>($r6);

     label06:
        $r7 = virtualinvoke r5.getChannel();

        $l0 = virtualinvoke $r7.size();

        $r8 = java.nio.channels.FileChannel$MapMode.READ_ONLY;

        $r9 = virtualinvoke $r7.map($r8, 0L, $l0);

     label07:
        virtualinvoke r5.close();

     label08:
        if $r4 == null goto label25;

     label09:
        virtualinvoke $r4.close();

     label10:
        return $r9;

     label11:
        r10 := @caughtexception;

     label12:
        virtualinvoke r5.close();

     label13:
        goto label16;

     label14:
        $r11 := @caughtexception;

     label15:
        virtualinvoke r10.addSuppressed($r11);

     label16:
        throw r10;

     label17:
        r12 := @caughtexception;

        if $r4 == null goto label22;

     label18:
        virtualinvoke $r4.close();

     label19:
        goto label22;

     label20:
        r13 := @caughtexception;

     label21:
        virtualinvoke r12.addSuppressed(r13);

     label22:
        throw r12;

     label23:
        r14 := @caughtexception;

     label24:
        return null;

     label25:
        return $r9;

        catch java.io.IOException from label01 to label02 with label23;
        catch java.io.IOException from label03 to label04 with label23;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.io.IOException from label09 to label10 with label23;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.io.IOException from label21 to label23 with label23;
    }

    private static java.nio.ByteBuffer mmap(java.io.File)
    {
        java.lang.Throwable r5, $r6;
        long $l0;
        java.io.IOException r7;
        java.io.FileInputStream r1;
        java.nio.channels.FileChannel$MapMode $r3;
        java.io.File r0;
        java.nio.channels.FileChannel $r2;
        java.nio.MappedByteBuffer $r4;

        r0 := @parameter0;

        r1 = new java.io.FileInputStream;

     label01:
        specialinvoke r1.<init>(r0);

     label02:
        $r2 = virtualinvoke r1.getChannel();

        $l0 = virtualinvoke $r2.size();

        $r3 = java.nio.channels.FileChannel$MapMode.READ_ONLY;

        $r4 = virtualinvoke $r2.map($r3, 0L, $l0);

     label03:
        virtualinvoke r1.close();

     label04:
        return $r4;

     label05:
        r5 := @caughtexception;

     label06:
        virtualinvoke r1.close();

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

     label09:
        virtualinvoke r5.addSuppressed($r6);

     label10:
        throw r5;

     label11:
        r7 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label11 with label11;
    }

    public static java.util.Map readFontInfoIntoByteBuffer(android.content.Context, androidx.core.provider.FontsContractCompat$FontInfo[], android.os.CancellationSignal)
    {
        android.content.Context $r0;
        androidx.core.provider.FontsContractCompat$FontInfo r4;
        android.os.CancellationSignal $r2;
        android.net.Uri $r5;
        java.util.HashMap r3;
        java.nio.ByteBuffer $r6;
        androidx.core.provider.FontsContractCompat$FontInfo[] $r1;
        java.util.Map $r7;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0;

        $r1 := @parameter1;

        $r2 := @parameter2;

        r3 = new java.util.HashMap;

        specialinvoke r3.<init>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        r4 = $r1[$i1];

        $i2 = virtualinvoke r4.getResultCode();

        if $i2 == 0 goto label2;

        goto label4;

     label2:
        $r5 = virtualinvoke r4.getUri();

        $z0 = virtualinvoke r3.containsKey($r5);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r6 = androidx.core.graphics.TypefaceCompatUtil.mmap($r0, $r2, $r5);

        virtualinvoke r3.put($r5, $r6);

     label4:
        $i1 = $i1 + 1;

        goto label1;

     label5:
        $r7 = java.util.Collections.unmodifiableMap(r3);

        return $r7;
    }
}
