public final class androidx.work.Configuration extends java.lang.Object
{
    public static final int MIN_SCHEDULER_LIMIT;
    final java.lang.String mDefaultProcessName;
    final androidx.work.InitializationExceptionHandler mExceptionHandler;
    final java.util.concurrent.Executor mExecutor;
    final androidx.work.InputMergerFactory mInputMergerFactory;
    private final boolean mIsUsingDefaultTaskExecutor;
    final int mLoggingLevel;
    final int mMaxJobSchedulerId;
    final int mMaxSchedulerLimit;
    final int mMinJobSchedulerId;
    final androidx.work.RunnableScheduler mRunnableScheduler;
    final java.util.concurrent.Executor mTaskExecutor;
    final androidx.work.WorkerFactory mWorkerFactory;

    void <init>(androidx.work.Configuration$Builder)
    {
        java.util.concurrent.Executor $r2;
        androidx.work.WorkerFactory $r3;
        androidx.work.InitializationExceptionHandler $r7;
        androidx.work.impl.DefaultRunnableScheduler $r6;
        androidx.work.Configuration r0;
        androidx.work.InputMergerFactory $r4;
        androidx.work.Configuration$Builder $r1;
        int $i0;
        java.lang.String $r8;
        androidx.work.RunnableScheduler $r5;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        $r2 = $r1.mExecutor;

        if $r2 != null goto label01;

        $r2 = specialinvoke r0.createDefaultExecutor(0);

        r0.mExecutor = $r2;

        goto label02;

     label01:
        $r2 = $r1.mExecutor;

        r0.mExecutor = $r2;

     label02:
        $r2 = $r1.mTaskExecutor;

        if $r2 != null goto label03;

        r0.mIsUsingDefaultTaskExecutor = 1;

        $r2 = specialinvoke r0.createDefaultExecutor(1);

        r0.mTaskExecutor = $r2;

        goto label04;

     label03:
        r0.mIsUsingDefaultTaskExecutor = 0;

        $r2 = $r1.mTaskExecutor;

        r0.mTaskExecutor = $r2;

     label04:
        $r3 = $r1.mWorkerFactory;

        if $r3 != null goto label05;

        $r3 = androidx.work.WorkerFactory.getDefaultWorkerFactory();

        r0.mWorkerFactory = $r3;

        goto label06;

     label05:
        $r3 = $r1.mWorkerFactory;

        r0.mWorkerFactory = $r3;

     label06:
        $r4 = $r1.mInputMergerFactory;

        if $r4 != null goto label07;

        $r4 = androidx.work.InputMergerFactory.getDefaultInputMergerFactory();

        r0.mInputMergerFactory = $r4;

        goto label08;

     label07:
        $r4 = $r1.mInputMergerFactory;

        r0.mInputMergerFactory = $r4;

     label08:
        $r5 = $r1.mRunnableScheduler;

        if $r5 != null goto label09;

        $r6 = new androidx.work.impl.DefaultRunnableScheduler;

        specialinvoke $r6.<init>();

        r0.mRunnableScheduler = $r6;

        goto label10;

     label09:
        $r5 = $r1.mRunnableScheduler;

        r0.mRunnableScheduler = $r5;

     label10:
        $i0 = $r1.mLoggingLevel;

        r0.mLoggingLevel = $i0;

        $i0 = $r1.mMinJobSchedulerId;

        r0.mMinJobSchedulerId = $i0;

        $i0 = $r1.mMaxJobSchedulerId;

        r0.mMaxJobSchedulerId = $i0;

        $i0 = $r1.mMaxSchedulerLimit;

        r0.mMaxSchedulerLimit = $i0;

        $r7 = $r1.mExceptionHandler;

        r0.mExceptionHandler = $r7;

        $r8 = $r1.mDefaultProcessName;

        r0.mDefaultProcessName = $r8;

        return;
    }

    private java.util.concurrent.Executor createDefaultExecutor(boolean)
    {
        androidx.work.Configuration r0;
        java.lang.Runtime $r1;
        int $i0;
        java.util.concurrent.ThreadFactory $r2;
        java.util.concurrent.ExecutorService $r3;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = java.lang.Runtime.getRuntime();

        $i0 = virtualinvoke $r1.availableProcessors();

        $i0 = $i0 + -1;

        $i0 = java.lang.Math.min($i0, 4);

        $i0 = java.lang.Math.max(2, $i0);

        $r2 = specialinvoke r0.createDefaultThreadFactory($z0);

        $r3 = java.util.concurrent.Executors.newFixedThreadPool($i0, $r2);

        return $r3;
    }

    private java.util.concurrent.ThreadFactory createDefaultThreadFactory(boolean)
    {
        androidx.work.Configuration r0;
        boolean $z0;
        androidx.work.Configuration$1 $r1;

        r0 := @this;

        $z0 := @parameter0;

        $r1 = new androidx.work.Configuration$1;

        specialinvoke $r1.<init>(r0, $z0);

        return $r1;
    }

    public java.lang.String getDefaultProcessName()
    {
        androidx.work.Configuration r0;
        java.lang.String r1;

        r0 := @this;

        r1 = r0.mDefaultProcessName;

        return r1;
    }

    public androidx.work.InitializationExceptionHandler getExceptionHandler()
    {
        androidx.work.Configuration r0;
        androidx.work.InitializationExceptionHandler r1;

        r0 := @this;

        r1 = r0.mExceptionHandler;

        return r1;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        androidx.work.Configuration r0;
        java.util.concurrent.Executor r1;

        r0 := @this;

        r1 = r0.mExecutor;

        return r1;
    }

    public androidx.work.InputMergerFactory getInputMergerFactory()
    {
        androidx.work.Configuration r0;
        androidx.work.InputMergerFactory r1;

        r0 := @this;

        r1 = r0.mInputMergerFactory;

        return r1;
    }

    public int getMaxJobSchedulerId()
    {
        int i0;
        androidx.work.Configuration r0;

        r0 := @this;

        i0 = r0.mMaxJobSchedulerId;

        return i0;
    }

    public int getMaxSchedulerLimit()
    {
        int $i0;
        androidx.work.Configuration r0;

        r0 := @this;

        $i0 = android.os.Build$VERSION.SDK_INT;

        if $i0 != 23 goto label1;

        $i0 = r0.mMaxSchedulerLimit;

        $i0 = $i0 / 2;

        return $i0;

     label1:
        $i0 = r0.mMaxSchedulerLimit;

        return $i0;
    }

    public int getMinJobSchedulerId()
    {
        int i0;
        androidx.work.Configuration r0;

        r0 := @this;

        i0 = r0.mMinJobSchedulerId;

        return i0;
    }

    public int getMinimumLoggingLevel()
    {
        int i0;
        androidx.work.Configuration r0;

        r0 := @this;

        i0 = r0.mLoggingLevel;

        return i0;
    }

    public androidx.work.RunnableScheduler getRunnableScheduler()
    {
        androidx.work.Configuration r0;
        androidx.work.RunnableScheduler r1;

        r0 := @this;

        r1 = r0.mRunnableScheduler;

        return r1;
    }

    public java.util.concurrent.Executor getTaskExecutor()
    {
        androidx.work.Configuration r0;
        java.util.concurrent.Executor r1;

        r0 := @this;

        r1 = r0.mTaskExecutor;

        return r1;
    }

    public androidx.work.WorkerFactory getWorkerFactory()
    {
        androidx.work.Configuration r0;
        androidx.work.WorkerFactory r1;

        r0 := @this;

        r1 = r0.mWorkerFactory;

        return r1;
    }

    public boolean isUsingDefaultTaskExecutor()
    {
        androidx.work.Configuration r0;
        boolean z0;

        r0 := @this;

        z0 = r0.mIsUsingDefaultTaskExecutor;

        return z0;
    }
}
