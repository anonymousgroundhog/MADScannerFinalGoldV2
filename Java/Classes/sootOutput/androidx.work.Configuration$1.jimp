class androidx.work.Configuration$1 extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private final java.util.concurrent.atomic.AtomicInteger mThreadCount;
    final androidx.work.Configuration this$0;
    final boolean val$isTaskExecutor;

    void <init>(androidx.work.Configuration, boolean)
    {
        androidx.work.Configuration $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        androidx.work.Configuration$1 r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $z0 := @parameter1;

        r0.this$0 = $r1;

        r0.val$isTaskExecutor = $z0;

        specialinvoke r0.<init>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<init>(0);

        r0.mThreadCount = $r2;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        androidx.work.Configuration$1 r0;
        java.lang.Runnable $r1;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.lang.Thread $r2;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String r3;
        boolean z0;

        r0 := @this;

        $r1 := @parameter0;

        z0 = r0.val$isTaskExecutor;

        if z0 == 0 goto label1;

        r3 = "WM.task-";

        goto label2;

     label1:
        r3 = "androidx.work-";

     label2:
        $r2 = new java.lang.Thread;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r4 = virtualinvoke $r4.append(r3);

        $r5 = r0.mThreadCount;

        $i0 = virtualinvoke $r5.incrementAndGet();

        $r4 = virtualinvoke $r4.append($i0);

        r3 = virtualinvoke $r4.toString();

        specialinvoke $r2.<init>($r1, r3);

        return $r2;
    }
}
