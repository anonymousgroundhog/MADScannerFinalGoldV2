class androidx.lifecycle.ClassesInfoCache$MethodReference extends java.lang.Object
{
    final int mCallType;
    final java.lang.reflect.Method mMethod;

    void <init>(int, java.lang.reflect.Method)
    {
        int $i0;
        java.lang.reflect.Method $r1;
        androidx.lifecycle.ClassesInfoCache$MethodReference r0;

        r0 := @this;

        $i0 := @parameter0;

        $r1 := @parameter1;

        specialinvoke r0.<init>();

        r0.mCallType = $i0;

        r0.mMethod = $r1;

        virtualinvoke $r1.setAccessible(1);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.lifecycle.ClassesInfoCache$MethodReference r0, r4;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r6, $r7;
        java.lang.reflect.Method $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label3;

        $r2 = virtualinvoke r0.getClass();

        $r3 = virtualinvoke $r1.getClass();

        if $r2 == $r3 goto label2;

        return 0;

     label2:
        r4 = (androidx.lifecycle.ClassesInfoCache$MethodReference) $r1;

        $i0 = r0.mCallType;

        $i1 = r4.mCallType;

        if $i0 != $i1 goto label3;

        $r5 = r0.mMethod;

        $r6 = virtualinvoke $r5.getName();

        $r5 = r4.mMethod;

        $r7 = virtualinvoke $r5.getName();

        $z0 = virtualinvoke $r6.equals($r7);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        int $i0, $i1;
        java.lang.String $r2;
        java.lang.reflect.Method $r1;
        androidx.lifecycle.ClassesInfoCache$MethodReference r0;

        r0 := @this;

        $i0 = r0.mCallType;

        $i0 = $i0 * 31;

        $r1 = r0.mMethod;

        $r2 = virtualinvoke $r1.getName();

        $i1 = virtualinvoke $r2.hashCode();

        $i0 = $i0 + $i1;

        return $i0;
    }

    void invokeCallback(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle$Event, java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.lang.IllegalAccessException r7;
        java.lang.Object[] $r6;
        java.lang.RuntimeException $r8;
        androidx.lifecycle.ClassesInfoCache$MethodReference r0;
        androidx.lifecycle.Lifecycle$Event $r2;
        java.lang.reflect.InvocationTargetException r9;
        androidx.lifecycle.LifecycleOwner $r1;
        int i0;
        java.lang.Object $r3;
        java.lang.reflect.Method r5;

        r0 := @this;

        $r1 := @parameter0;

        $r2 := @parameter1;

        $r3 := @parameter2;

        i0 = r0.mCallType;

        lookupswitch(i0)
        {
            case 0: goto label08;
            case 1: goto label05;
            case 2: goto label02;
            default: goto label01;
        };

     label01:
        goto label10;

     label02:
        r5 = r0.mMethod;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r1;

        $r6[1] = $r2;

     label03:
        virtualinvoke r5.invoke($r3, $r6);

     label04:
        goto label10;

     label05:
        r5 = r0.mMethod;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

     label06:
        virtualinvoke r5.invoke($r3, $r6);

     label07:
        goto label10;

     label08:
        r5 = r0.mMethod;

        $r6 = newarray (java.lang.Object)[0];

     label09:
        virtualinvoke r5.invoke($r3, $r6);

     label10:
        return;

     label11:
        r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<init>(r7);

        throw $r8;

     label12:
        r9 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        $r4 = virtualinvoke r9.getCause();

        specialinvoke $r8.<init>("Failed to call observer method", $r4);

        throw $r8;

        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label12;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label12;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label12;
        catch java.lang.IllegalAccessException from label03 to label04 with label11;
        catch java.lang.IllegalAccessException from label06 to label07 with label11;
        catch java.lang.IllegalAccessException from label09 to label10 with label11;
    }
}
