public class androidx.fragment.app.FragmentManagerNonConfig extends java.lang.Object
{
    private final java.util.Map mChildNonConfigs;
    private final java.util.Collection mFragments;
    private final java.util.Map mViewModelStores;

    void <init>(java.util.Collection, java.util.Map, java.util.Map)
    {
        androidx.fragment.app.FragmentManagerNonConfig r0;
        java.util.Collection r1;
        java.util.Map r2, r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        specialinvoke r0.<init>();

        r0.mFragments = r1;

        r0.mChildNonConfigs = r2;

        r0.mViewModelStores = r3;

        return;
    }

    java.util.Map getChildNonConfigs()
    {
        androidx.fragment.app.FragmentManagerNonConfig r0;
        java.util.Map r1;

        r0 := @this;

        r1 = r0.mChildNonConfigs;

        return r1;
    }

    java.util.Collection getFragments()
    {
        androidx.fragment.app.FragmentManagerNonConfig r0;
        java.util.Collection r1;

        r0 := @this;

        r1 = r0.mFragments;

        return r1;
    }

    java.util.Map getViewModelStores()
    {
        androidx.fragment.app.FragmentManagerNonConfig r0;
        java.util.Map r1;

        r0 := @this;

        r1 = r0.mViewModelStores;

        return r1;
    }

    boolean isRetaining(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.FragmentManagerNonConfig r0;
        java.util.Collection $r2;
        androidx.fragment.app.Fragment $r1;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mFragments;

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r2.contains($r1);

        return $z0;
    }
}
