public class androidx.collection.LruCache extends java.lang.Object
{
    private int createCount;
    private int evictionCount;
    private int hitCount;
    private final java.util.LinkedHashMap map;
    private int maxSize;
    private int missCount;
    private int putCount;
    private int size;

    public void <init>(int)
    {
        java.util.LinkedHashMap $r1;
        androidx.collection.LruCache r0;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this;

        $i0 := @parameter0;

        specialinvoke r0.<init>();

        if $i0 <= 0 goto label1;

        r0.maxSize = $i0;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<init>(0, 0.75F, 1);

        r0.map = $r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<init>("maxSize <= 0");

        throw $r2;
    }

    private int safeSizeOf(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        androidx.collection.LruCache r0;
        int $i0;
        java.lang.Object r1, r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $i0 = virtualinvoke r0.sizeOf(r1, r2);

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r4 = virtualinvoke $r4.append("Negative size: ");

        $r4 = virtualinvoke $r4.append(r1);

        $r4 = virtualinvoke $r4.append("=");

        $r4 = virtualinvoke $r4.append(r2);

        $r5 = virtualinvoke $r4.toString();

        specialinvoke $r3.<init>($r5);

        throw $r3;
    }

    protected java.lang.Object create(java.lang.Object)
    {
        java.lang.Object r1;
        androidx.collection.LruCache r0;

        r0 := @this;

        r1 := @parameter0;

        return null;
    }

    public final int createCount()
    {
        java.lang.Throwable $r1;
        int i0;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.createCount;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void entryRemoved(boolean, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.collection.LruCache r0;
        java.lang.Object r1, r2, r3;
        boolean $z0;

        r0 := @this;

        $z0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        r3 := @parameter3;

        return;
    }

    public final void evictAll()
    {
        androidx.collection.LruCache r0;

        r0 := @this;

        virtualinvoke r0.trimToSize(-1);

        return;
    }

    public final int evictionCount()
    {
        java.lang.Throwable $r1;
        int i0;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.evictionCount;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.lang.Object get(java.lang.Object)
    {
        java.lang.Throwable $r5, r6;
        java.lang.NullPointerException r7;
        java.util.LinkedHashMap r2;
        androidx.collection.LruCache r0;
        int i0, $i1;
        java.lang.Object r1, $r3, $r4;

        r0 := @this;

        r1 := @parameter0;

        if r1 == null goto label17;

        entermonitor r0;

     label01:
        r2 = r0.map;

        $r3 = virtualinvoke r2.get(r1);

        if $r3 == null goto label03;

        i0 = r0.hitCount;

        i0 = i0 + 1;

        r0.hitCount = i0;

        exitmonitor r0;

     label02:
        return $r3;

     label03:
        i0 = r0.missCount;

        i0 = i0 + 1;

        r0.missCount = i0;

        exitmonitor r0;

     label04:
        $r3 = virtualinvoke r0.create(r1);

        if $r3 != null goto label05;

        return null;

     label05:
        entermonitor r0;

     label06:
        i0 = r0.createCount;

        i0 = i0 + 1;

        r0.createCount = i0;

        r2 = r0.map;

        $r4 = virtualinvoke r2.put(r1, $r3);

        if $r4 == null goto label07;

        r2 = r0.map;

        virtualinvoke r2.put(r1, $r4);

        goto label08;

     label07:
        i0 = r0.size;

        $i1 = specialinvoke r0.safeSizeOf(r1, $r3);

        i0 = i0 + $i1;

        r0.size = i0;

     label08:
        exitmonitor r0;

     label09:
        if $r4 == null goto label10;

        virtualinvoke r0.entryRemoved(0, r1, $r3, $r4);

        return $r4;

     label10:
        i0 = r0.maxSize;

        virtualinvoke r0.trimToSize(i0);

        return $r3;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r5;

     label14:
        r6 := @caughtexception;

     label15:
        exitmonitor r0;

     label16:
        throw r6;

     label17:
        r7 = new java.lang.NullPointerException;

        specialinvoke r7.<init>("key == null");

        throw r7;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public final int hitCount()
    {
        java.lang.Throwable $r1;
        int i0;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.hitCount;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final int maxSize()
    {
        java.lang.Throwable $r1;
        int i0;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.maxSize;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final int missCount()
    {
        java.lang.Throwable $r1;
        int i0;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.missCount;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable r5;
        java.lang.NullPointerException r6;
        java.util.LinkedHashMap r3;
        androidx.collection.LruCache r0;
        int i0, $i1;
        java.lang.Object r1, r2, $r4;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        if r1 == null goto label8;

        if r2 == null goto label8;

        entermonitor r0;

     label1:
        i0 = r0.putCount;

        i0 = i0 + 1;

        r0.putCount = i0;

        i0 = r0.size;

        $i1 = specialinvoke r0.safeSizeOf(r1, r2);

        i0 = i0 + $i1;

        r0.size = i0;

        r3 = r0.map;

        $r4 = virtualinvoke r3.put(r1, r2);

        if $r4 == null goto label2;

        i0 = r0.size;

        $i1 = specialinvoke r0.safeSizeOf(r1, $r4);

        i0 = i0 - $i1;

        r0.size = i0;

     label2:
        exitmonitor r0;

     label3:
        if $r4 == null goto label4;

        virtualinvoke r0.entryRemoved(0, r1, $r4, r2);

     label4:
        i0 = r0.maxSize;

        virtualinvoke r0.trimToSize(i0);

        return $r4;

     label5:
        r5 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw r5;

     label8:
        r6 = new java.lang.NullPointerException;

        specialinvoke r6.<init>("key == null || value == null");

        throw r6;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final int putCount()
    {
        java.lang.Throwable $r1;
        int i0;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.putCount;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        java.lang.Throwable r4;
        java.lang.NullPointerException r5;
        java.util.LinkedHashMap r2;
        androidx.collection.LruCache r0;
        int $i0, $i1;
        java.lang.Object r1, $r3;

        r0 := @this;

        r1 := @parameter0;

        if r1 == null goto label7;

        entermonitor r0;

     label1:
        r2 = r0.map;

        $r3 = virtualinvoke r2.remove(r1);

        if $r3 == null goto label2;

        $i0 = r0.size;

        $i1 = specialinvoke r0.safeSizeOf(r1, $r3);

        $i0 = $i0 - $i1;

        r0.size = $i0;

     label2:
        exitmonitor r0;

     label3:
        if $r3 == null goto label8;

        virtualinvoke r0.entryRemoved(0, r1, $r3, null);

        return $r3;

     label4:
        r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw r4;

     label7:
        r5 = new java.lang.NullPointerException;

        specialinvoke r5.<init>("key == null");

        throw r5;

     label8:
        return $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void resize(int)
    {
        java.lang.Throwable $r1;
        androidx.collection.LruCache r0;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this;

        $i0 := @parameter0;

        if $i0 <= 0 goto label6;

        entermonitor r0;

     label1:
        r0.maxSize = $i0;

        exitmonitor r0;

     label2:
        virtualinvoke r0.trimToSize($i0);

        return;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<init>("maxSize <= 0");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final int size()
    {
        java.lang.Throwable $r1;
        int i0;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.size;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected int sizeOf(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        androidx.collection.LruCache r0;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        return 1;
    }

    public final java.util.Map snapshot()
    {
        java.util.LinkedHashMap $r1, $r2;
        java.lang.Throwable $r3;
        androidx.collection.LruCache r0;

        r0 := @this;

        entermonitor r0;

     label1:
        $r2 = new java.util.LinkedHashMap;

        $r1 = r0.map;

        specialinvoke $r2.<init>($r1);

     label2:
        exitmonitor r0;

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.lang.String toString()
    {
        java.lang.Throwable r5;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        androidx.collection.LruCache r0;
        java.util.Locale $r1;
        int i0, i1;
        java.lang.String $r4;

        r0 := @this;

        entermonitor r0;

     label1:
        i0 = r0.hitCount;

        i1 = r0.missCount;

        i1 = i1 + i0;

        if i1 == 0 goto label2;

        i0 = i0 * 100;

        i0 = i0 / i1;

        goto label3;

     label2:
        i0 = 0;

     label3:
        $r1 = java.util.Locale.US;

        $r2 = newarray (java.lang.Object)[4];

        i1 = r0.maxSize;

        $r3 = java.lang.Integer.valueOf(i1);

        $r2[0] = $r3;

        i1 = r0.hitCount;

        $r3 = java.lang.Integer.valueOf(i1);

        $r2[1] = $r3;

        i1 = r0.missCount;

        $r3 = java.lang.Integer.valueOf(i1);

        $r2[2] = $r3;

        $r3 = java.lang.Integer.valueOf(i0);

        $r2[3] = $r3;

        $r4 = java.lang.String.format($r1, "LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]", $r2);

     label4:
        exitmonitor r0;

        return $r4;

     label5:
        r5 := @caughtexception;

        exitmonitor r0;

        throw r5;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void trimToSize(int)
    {
        java.lang.Throwable r11;
        java.lang.IllegalStateException r7;
        java.util.LinkedHashMap r1;
        int i0, i1, $i2;
        java.lang.String $r10;
        boolean $z0;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        androidx.collection.LruCache r0;
        java.lang.Object $r4, $r6;
        java.lang.StringBuilder r8;
        java.lang.Class $r9;

        r0 := @this;

        i0 := @parameter0;

     label01:
        entermonitor r0;

     label02:
        i1 = r0.size;

        if i1 < 0 goto label08;

        r1 = r0.map;

        $z0 = virtualinvoke r1.isEmpty();

        if $z0 == 0 goto label03;

        i1 = r0.size;

        if i1 != 0 goto label08;

     label03:
        i1 = r0.size;

        if i1 <= i0 goto label06;

        r1 = r0.map;

        $z0 = virtualinvoke r1.isEmpty();

        if $z0 == 0 goto label04;

        goto label06;

     label04:
        r1 = r0.map;

        $r2 = virtualinvoke r1.entrySet();

        $r3 = interfaceinvoke $r2.iterator();

        $r4 = interfaceinvoke $r3.next();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.getKey();

        $r6 = interfaceinvoke r5.getValue();

        r1 = r0.map;

        virtualinvoke r1.remove($r4);

        i1 = r0.size;

        $i2 = specialinvoke r0.safeSizeOf($r4, $r6);

        i1 = i1 - $i2;

        r0.size = i1;

        i1 = r0.evictionCount;

        i1 = i1 + 1;

        r0.evictionCount = i1;

        exitmonitor r0;

     label05:
        virtualinvoke r0.entryRemoved(1, $r4, $r6, null);

        goto label01;

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        r7 = new java.lang.IllegalStateException;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<init>();

        $r9 = virtualinvoke r0.getClass();

        $r10 = virtualinvoke $r9.getName();

        r8 = virtualinvoke r8.append($r10);

        r8 = virtualinvoke r8.append(".sizeOf() is reporting inconsistent results!");

        $r10 = virtualinvoke r8.toString();

        specialinvoke r7.<init>($r10);

        throw r7;

     label09:
        r11 := @caughtexception;

        exitmonitor r0;

     label10:
        goto label11;

     label11:
        throw r11;

        catch java.lang.Throwable from label02 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }
}
