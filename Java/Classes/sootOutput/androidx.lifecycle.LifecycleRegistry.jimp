public class androidx.lifecycle.LifecycleRegistry extends androidx.lifecycle.Lifecycle
{
    private int mAddingObserverCounter;
    private boolean mHandlingEvent;
    private final java.lang.ref.WeakReference mLifecycleOwner;
    private boolean mNewEventOccurred;
    private androidx.arch.core.internal.FastSafeIterableMap mObserverMap;
    private java.util.ArrayList mParentStates;
    private androidx.lifecycle.Lifecycle$State mState;

    public void <init>(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.Lifecycle$State $r5;
        androidx.lifecycle.LifecycleOwner $r1;
        androidx.arch.core.internal.FastSafeIterableMap $r2;
        java.lang.ref.WeakReference $r4;
        androidx.lifecycle.LifecycleRegistry r0;
        java.util.ArrayList $r3;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.<init>();

        $r2 = new androidx.arch.core.internal.FastSafeIterableMap;

        specialinvoke $r2.<init>();

        r0.mObserverMap = $r2;

        r0.mAddingObserverCounter = 0;

        r0.mHandlingEvent = 0;

        r0.mNewEventOccurred = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<init>();

        r0.mParentStates = $r3;

        $r4 = new java.lang.ref.WeakReference;

        specialinvoke $r4.<init>($r1);

        r0.mLifecycleOwner = $r4;

        $r5 = androidx.lifecycle.Lifecycle$State.INITIALIZED;

        r0.mState = $r5;

        return;
    }

    private void backwardPass(androidx.lifecycle.LifecycleOwner)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r6;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$Event $r9;
        androidx.lifecycle.Lifecycle$State r7, $r8;
        androidx.lifecycle.LifecycleOwner $r1;
        androidx.arch.core.internal.FastSafeIterableMap r2;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mObserverMap;

        $r3 = virtualinvoke r2.descendingIterator();

     label1:
        $z0 = interfaceinvoke $r3.hasNext();

        if $z0 == 0 goto label3;

        $z0 = r0.mNewEventOccurred;

        if $z0 != 0 goto label3;

        $r4 = interfaceinvoke $r3.next();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.getValue();

        r6 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r4;

     label2:
        r7 = r6.mState;

        $r8 = r0.mState;

        $i0 = virtualinvoke r7.compareTo($r8);

        if $i0 <= 0 goto label1;

        $z0 = r0.mNewEventOccurred;

        if $z0 != 0 goto label1;

        r2 = r0.mObserverMap;

        $r4 = interfaceinvoke r5.getKey();

        $z0 = virtualinvoke r2.contains($r4);

        if $z0 == 0 goto label1;

        r7 = r6.mState;

        $r9 = androidx.lifecycle.LifecycleRegistry.downEvent(r7);

        r7 = androidx.lifecycle.LifecycleRegistry.getStateAfter($r9);

        specialinvoke r0.pushParentState(r7);

        virtualinvoke r6.dispatchEvent($r1, $r9);

        specialinvoke r0.popParentState();

        goto label2;

     label3:
        return;
    }

    private androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)
    {
        java.util.Map$Entry $r3;
        androidx.lifecycle.LifecycleObserver $r1;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r6;
        androidx.lifecycle.LifecycleRegistry r0;
        java.util.ArrayList $r8;
        androidx.lifecycle.Lifecycle$State r4, r7, $r9;
        androidx.arch.core.internal.FastSafeIterableMap r2;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mObserverMap;

        $r3 = virtualinvoke r2.ceil($r1);

        r4 = null;

        if $r3 == null goto label1;

        $r5 = interfaceinvoke $r3.getValue();

        r6 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r5;

        r7 = r6.mState;

        goto label2;

     label1:
        r7 = null;

     label2:
        $r8 = r0.mParentStates;

        $z0 = virtualinvoke $r8.isEmpty();

        if $z0 != 0 goto label3;

        $r8 = r0.mParentStates;

        $i0 = virtualinvoke $r8.size();

        $i0 = $i0 + -1;

        $r5 = virtualinvoke $r8.get($i0);

        r4 = (androidx.lifecycle.Lifecycle$State) $r5;

     label3:
        $r9 = r0.mState;

        r7 = androidx.lifecycle.LifecycleRegistry.min($r9, r7);

        r4 = androidx.lifecycle.LifecycleRegistry.min(r7, r4);

        return r4;
    }

    private static androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.Lifecycle$State $r0;
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;
        androidx.lifecycle.Lifecycle$Event r5;

        $r0 := @parameter0;

        $r1 = androidx.lifecycle.LifecycleRegistry$1.$SwitchMap$androidx$lifecycle$Lifecycle$State;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("Unexpected state value ");

        $r3 = virtualinvoke $r3.append($r0);

        $r4 = virtualinvoke $r3.toString();

        specialinvoke $r2.<init>($r4);

        throw $r2;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<init>();

        throw $r2;

     label3:
        r5 = androidx.lifecycle.Lifecycle$Event.ON_PAUSE;

        return r5;

     label4:
        r5 = androidx.lifecycle.Lifecycle$Event.ON_STOP;

        return r5;

     label5:
        r5 = androidx.lifecycle.Lifecycle$Event.ON_DESTROY;

        return r5;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<init>();

        throw $r2;
    }

    private void forwardPass(androidx.lifecycle.LifecycleOwner)
    {
        java.util.Map$Entry r5;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r6;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$Event $r9;
        androidx.lifecycle.Lifecycle$State $r7, $r8;
        androidx.lifecycle.LifecycleOwner $r1;
        androidx.arch.core.internal.FastSafeIterableMap r2;
        int $i0;
        androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mObserverMap;

        $r3 = virtualinvoke r2.iteratorWithAdditions();

     label1:
        $z0 = interfaceinvoke $r3.hasNext();

        if $z0 == 0 goto label3;

        $z0 = r0.mNewEventOccurred;

        if $z0 != 0 goto label3;

        $r4 = interfaceinvoke $r3.next();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.getValue();

        r6 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r4;

     label2:
        $r7 = r6.mState;

        $r8 = r0.mState;

        $i0 = virtualinvoke $r7.compareTo($r8);

        if $i0 >= 0 goto label1;

        $z0 = r0.mNewEventOccurred;

        if $z0 != 0 goto label1;

        r2 = r0.mObserverMap;

        $r4 = interfaceinvoke r5.getKey();

        $z0 = virtualinvoke r2.contains($r4);

        if $z0 == 0 goto label1;

        $r7 = r6.mState;

        specialinvoke r0.pushParentState($r7);

        $r7 = r6.mState;

        $r9 = androidx.lifecycle.LifecycleRegistry.upEvent($r7);

        virtualinvoke r6.dispatchEvent($r1, $r9);

        specialinvoke r0.popParentState();

        goto label2;

     label3:
        return;
    }

    static androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event)
    {
        androidx.lifecycle.Lifecycle$State r5;
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;
        androidx.lifecycle.Lifecycle$Event $r0;

        $r0 := @parameter0;

        $r1 = androidx.lifecycle.LifecycleRegistry$1.$SwitchMap$androidx$lifecycle$Lifecycle$Event;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("Unexpected event value ");

        $r3 = virtualinvoke $r3.append($r0);

        $r4 = virtualinvoke $r3.toString();

        specialinvoke $r2.<init>($r4);

        throw $r2;

     label2:
        r5 = androidx.lifecycle.Lifecycle$State.DESTROYED;

        return r5;

     label3:
        r5 = androidx.lifecycle.Lifecycle$State.RESUMED;

        return r5;

     label4:
        r5 = androidx.lifecycle.Lifecycle$State.STARTED;

        return r5;

     label5:
        r5 = androidx.lifecycle.Lifecycle$State.CREATED;

        return r5;
    }

    private boolean isSynced()
    {
        java.util.Map$Entry $r3;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r5;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State $r1, r6;
        androidx.arch.core.internal.FastSafeIterableMap r2;
        int $i0;
        java.lang.Object $r4;

        r0 := @this;

        r2 = r0.mObserverMap;

        $i0 = virtualinvoke r2.size();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        r2 = r0.mObserverMap;

        $r3 = virtualinvoke r2.eldest();

        $r4 = interfaceinvoke $r3.getValue();

        r5 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r4;

        $r1 = r5.mState;

        r2 = r0.mObserverMap;

        $r3 = virtualinvoke r2.newest();

        $r4 = interfaceinvoke $r3.getValue();

        r5 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r4;

        r6 = r5.mState;

        if $r1 != r6 goto label2;

        $r1 = r0.mState;

        if $r1 != r6 goto label2;

        return 1;

     label2:
        return 0;
    }

    static androidx.lifecycle.Lifecycle$State min(androidx.lifecycle.Lifecycle$State, androidx.lifecycle.Lifecycle$State)
    {
        int $i0;
        androidx.lifecycle.Lifecycle$State $r0, $r1;

        $r0 := @parameter0;

        $r1 := @parameter1;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.compareTo($r0);

        if $i0 >= 0 goto label1;

        return $r1;

     label1:
        return $r0;
    }

    private void moveToState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.Lifecycle$State $r1, $r2;
        int $i0;
        androidx.lifecycle.LifecycleRegistry r0;
        boolean $z0;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mState;

        if $r2 != $r1 goto label1;

        return;

     label1:
        r0.mState = $r1;

        $z0 = r0.mHandlingEvent;

        if $z0 != 0 goto label3;

        $i0 = r0.mAddingObserverCounter;

        if $i0 == 0 goto label2;

        goto label3;

     label2:
        r0.mHandlingEvent = 1;

        specialinvoke r0.sync();

        r0.mHandlingEvent = 0;

        return;

     label3:
        r0.mNewEventOccurred = 1;

        return;
    }

    private void popParentState()
    {
        int $i0;
        androidx.lifecycle.LifecycleRegistry r0;
        java.util.ArrayList $r1;

        r0 := @this;

        $r1 = r0.mParentStates;

        $i0 = virtualinvoke $r1.size();

        $i0 = $i0 + -1;

        virtualinvoke $r1.remove($i0);

        return;
    }

    private void pushParentState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.Lifecycle$State $r1;
        androidx.lifecycle.LifecycleRegistry r0;
        java.util.ArrayList $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mParentStates;

        virtualinvoke $r2.add($r1);

        return;
    }

    private void sync()
    {
        java.lang.IllegalStateException r9;
        java.util.Map$Entry $r6;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState $r7;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State r4, $r8;
        androidx.lifecycle.LifecycleOwner r3;
        androidx.arch.core.internal.FastSafeIterableMap $r5;
        int $i0;
        java.lang.Object $r2;
        java.lang.ref.WeakReference r1;
        boolean $z0;

        r0 := @this;

        r1 = r0.mLifecycleOwner;

        $r2 = virtualinvoke r1.get();

        r3 = (androidx.lifecycle.LifecycleOwner) $r2;

        if r3 == null goto label4;

     label1:
        $z0 = specialinvoke r0.isSynced();

        if $z0 != 0 goto label3;

        r0.mNewEventOccurred = 0;

        r4 = r0.mState;

        $r5 = r0.mObserverMap;

        $r6 = virtualinvoke $r5.eldest();

        $r2 = interfaceinvoke $r6.getValue();

        $r7 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r2;

        $r8 = $r7.mState;

        $i0 = virtualinvoke r4.compareTo($r8);

        if $i0 >= 0 goto label2;

        specialinvoke r0.backwardPass(r3);

     label2:
        $r5 = r0.mObserverMap;

        $r6 = virtualinvoke $r5.newest();

        $z0 = r0.mNewEventOccurred;

        if $z0 != 0 goto label1;

        if $r6 == null goto label1;

        r4 = r0.mState;

        $r2 = interfaceinvoke $r6.getValue();

        $r7 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r2;

        $r8 = $r7.mState;

        $i0 = virtualinvoke r4.compareTo($r8);

        if $i0 <= 0 goto label1;

        specialinvoke r0.forwardPass(r3);

        goto label1;

     label3:
        r0.mNewEventOccurred = 0;

        return;

     label4:
        r9 = new java.lang.IllegalStateException;

        specialinvoke r9.<init>("LifecycleOwner of this LifecycleRegistry is alreadygarbage collected. It is too late to change lifecycle state.");

        goto label5;

     label5:
        throw r9;
    }

    private static androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.Lifecycle$State $r0;
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;
        androidx.lifecycle.Lifecycle$Event r5;

        $r0 := @parameter0;

        $r1 = androidx.lifecycle.LifecycleRegistry$1.$SwitchMap$androidx$lifecycle$Lifecycle$State;

        $i0 = virtualinvoke $r0.ordinal();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            case 5: goto label5;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r3 = virtualinvoke $r3.append("Unexpected state value ");

        $r3 = virtualinvoke $r3.append($r0);

        $r4 = virtualinvoke $r3.toString();

        specialinvoke $r2.<init>($r4);

        throw $r2;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<init>();

        throw $r2;

     label3:
        r5 = androidx.lifecycle.Lifecycle$Event.ON_RESUME;

        return r5;

     label4:
        r5 = androidx.lifecycle.Lifecycle$Event.ON_START;

        return r5;

     label5:
        r5 = androidx.lifecycle.Lifecycle$Event.ON_CREATE;

        return r5;
    }

    public void addObserver(androidx.lifecycle.LifecycleObserver)
    {
        androidx.lifecycle.LifecycleObserver $r1;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r4, r7;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$Event $r10;
        androidx.lifecycle.Lifecycle$State r2, r3;
        androidx.lifecycle.LifecycleOwner r9;
        androidx.arch.core.internal.FastSafeIterableMap r5;
        int i0;
        java.lang.Object $r6;
        java.lang.ref.WeakReference r8;
        boolean z0, $z1;

        r0 := @this;

        $r1 := @parameter0;

        r2 = r0.mState;

        r3 = androidx.lifecycle.Lifecycle$State.DESTROYED;

        if r2 != r3 goto label01;

        r2 = androidx.lifecycle.Lifecycle$State.DESTROYED;

        goto label02;

     label01:
        r2 = androidx.lifecycle.Lifecycle$State.INITIALIZED;

     label02:
        r4 = new androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        specialinvoke r4.<init>($r1, r2);

        r5 = r0.mObserverMap;

        $r6 = virtualinvoke r5.putIfAbsent($r1, r4);

        r7 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r6;

        if r7 == null goto label03;

        return;

     label03:
        r8 = r0.mLifecycleOwner;

        $r6 = virtualinvoke r8.get();

        r9 = (androidx.lifecycle.LifecycleOwner) $r6;

        if r9 != null goto label04;

        return;

     label04:
        i0 = r0.mAddingObserverCounter;

        if i0 != 0 goto label06;

        z0 = r0.mHandlingEvent;

        if z0 == 0 goto label05;

        goto label06;

     label05:
        z0 = 0;

        goto label07;

     label06:
        z0 = 1;

     label07:
        r2 = specialinvoke r0.calculateTargetState($r1);

        i0 = r0.mAddingObserverCounter;

        i0 = i0 + 1;

        r0.mAddingObserverCounter = i0;

     label08:
        r3 = r4.mState;

        i0 = virtualinvoke r3.compareTo(r2);

        if i0 >= 0 goto label09;

        r5 = r0.mObserverMap;

        $z1 = virtualinvoke r5.contains($r1);

        if $z1 == 0 goto label09;

        r2 = r4.mState;

        specialinvoke r0.pushParentState(r2);

        r2 = r4.mState;

        $r10 = androidx.lifecycle.LifecycleRegistry.upEvent(r2);

        virtualinvoke r4.dispatchEvent(r9, $r10);

        specialinvoke r0.popParentState();

        r2 = specialinvoke r0.calculateTargetState($r1);

        goto label08;

     label09:
        if z0 != 0 goto label10;

        specialinvoke r0.sync();

     label10:
        i0 = r0.mAddingObserverCounter;

        i0 = i0 - 1;

        r0.mAddingObserverCounter = i0;

        return;
    }

    public androidx.lifecycle.Lifecycle$State getCurrentState()
    {
        androidx.lifecycle.Lifecycle$State r1;
        androidx.lifecycle.LifecycleRegistry r0;

        r0 := @this;

        r1 = r0.mState;

        return r1;
    }

    public int getObserverCount()
    {
        int $i0;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.arch.core.internal.FastSafeIterableMap $r1;

        r0 := @this;

        $r1 = r0.mObserverMap;

        $i0 = virtualinvoke $r1.size();

        return $i0;
    }

    public void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)
    {
        androidx.lifecycle.Lifecycle$State $r2;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$Event $r1;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = androidx.lifecycle.LifecycleRegistry.getStateAfter($r1);

        specialinvoke r0.moveToState($r2);

        return;
    }

    public void markState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.Lifecycle$State $r1;
        androidx.lifecycle.LifecycleRegistry r0;

        r0 := @this;

        $r1 := @parameter0;

        virtualinvoke r0.setCurrentState($r1);

        return;
    }

    public void removeObserver(androidx.lifecycle.LifecycleObserver)
    {
        androidx.lifecycle.LifecycleObserver $r1;
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.arch.core.internal.FastSafeIterableMap $r2;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mObserverMap;

        virtualinvoke $r2.remove($r1);

        return;
    }

    public void setCurrentState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.Lifecycle$State $r1;
        androidx.lifecycle.LifecycleRegistry r0;

        r0 := @this;

        $r1 := @parameter0;

        specialinvoke r0.moveToState($r1);

        return;
    }
}
