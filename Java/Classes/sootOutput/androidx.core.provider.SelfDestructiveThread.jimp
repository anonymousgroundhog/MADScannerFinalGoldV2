public class androidx.core.provider.SelfDestructiveThread extends java.lang.Object
{
    private static final int MSG_DESTRUCTION;
    private static final int MSG_INVOKE_RUNNABLE;
    private android.os.Handler$Callback mCallback;
    private final int mDestructAfterMillisec;
    private int mGeneration;
    private android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private final int mPriority;
    private android.os.HandlerThread mThread;
    private final java.lang.String mThreadName;

    public void <init>(java.lang.String, int, int)
    {
        androidx.core.provider.SelfDestructiveThread$1 $r3;
        int $i0, $i1;
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this;

        $r1 := @parameter0;

        $i0 := @parameter1;

        $i1 := @parameter2;

        specialinvoke r0.<init>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<init>();

        r0.mLock = $r2;

        $r3 = new androidx.core.provider.SelfDestructiveThread$1;

        specialinvoke $r3.<init>(r0);

        r0.mCallback = $r3;

        r0.mThreadName = $r1;

        r0.mPriority = $i0;

        r0.mDestructAfterMillisec = $i1;

        r0.mGeneration = 0;

        return;
    }

    private void post(java.lang.Runnable)
    {
        java.lang.Throwable $r9;
        android.os.Handler$Callback $r7;
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Runnable $r1;
        android.os.Message $r8;
        android.os.HandlerThread $r3;
        android.os.Handler $r5;
        android.os.Looper $r6;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @this;

        $r1 := @parameter0;

        $r2 = r0.mLock;

        entermonitor $r2;

     label1:
        $r3 = r0.mThread;

        if $r3 != null goto label2;

        $r3 = new android.os.HandlerThread;

        $r4 = r0.mThreadName;

        $i0 = r0.mPriority;

        specialinvoke $r3.<init>($r4, $i0);

        r0.mThread = $r3;

        virtualinvoke $r3.start();

        $r5 = new android.os.Handler;

        $r3 = r0.mThread;

        $r6 = virtualinvoke $r3.getLooper();

        $r7 = r0.mCallback;

        specialinvoke $r5.<init>($r6, $r7);

        r0.mHandler = $r5;

        $i0 = r0.mGeneration;

        $i0 = $i0 + 1;

        r0.mGeneration = $i0;

     label2:
        $r5 = r0.mHandler;

        virtualinvoke $r5.removeMessages(0);

        $r5 = r0.mHandler;

        $r8 = virtualinvoke $r5.obtainMessage(1, $r1);

        virtualinvoke $r5.sendMessage($r8);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getGeneration()
    {
        java.lang.Throwable $r2;
        int i0;
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Object $r1;

        r0 := @this;

        $r1 = r0.mLock;

        entermonitor $r1;

     label1:
        i0 = r0.mGeneration;

        exitmonitor $r1;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isRunning()
    {
        java.lang.Throwable $r3;
        android.os.HandlerThread $r2;
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mLock;

        entermonitor $r1;

     label1:
        $r2 = r0.mThread;

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void onDestruction()
    {
        java.lang.Throwable $r4;
        android.os.HandlerThread $r3;
        android.os.Handler $r2;
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this;

        $r1 = r0.mLock;

        entermonitor $r1;

     label1:
        $r2 = r0.mHandler;

        $z0 = virtualinvoke $r2.hasMessages(1);

        if $z0 == 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 = r0.mThread;

        virtualinvoke $r3.quit();

        r0.mThread = null;

        r0.mHandler = null;

        exitmonitor $r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void onInvokeRunnable(java.lang.Runnable)
    {
        java.lang.Throwable $r5;
        androidx.core.provider.SelfDestructiveThread r0;
        long $l1;
        java.lang.Runnable $r1;
        android.os.Message $r3;
        android.os.Handler $r4;
        int $i0;
        java.lang.Object $r2;

        r0 := @this;

        $r1 := @parameter0;

        interfaceinvoke $r1.run();

        $r2 = r0.mLock;

        entermonitor $r2;

     label1:
        $r4 = r0.mHandler;

        virtualinvoke $r4.removeMessages(0);

        $r4 = r0.mHandler;

        $r3 = virtualinvoke $r4.obtainMessage(0);

        $i0 = r0.mDestructAfterMillisec;

        $l1 = (long) $i0;

        virtualinvoke $r4.sendMessageDelayed($r3, $l1);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void postAndReply(java.util.concurrent.Callable, androidx.core.provider.SelfDestructiveThread$ReplyCallback)
    {
        androidx.core.provider.SelfDestructiveThread$ReplyCallback r2;
        androidx.core.provider.SelfDestructiveThread$2 $r3;
        android.os.Handler $r4;
        androidx.core.provider.SelfDestructiveThread r0;
        java.util.concurrent.Callable r1;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r4 = androidx.core.provider.CalleeHandler.create();

        $r3 = new androidx.core.provider.SelfDestructiveThread$2;

        specialinvoke $r3.<init>(r0, r1, $r4, r2);

        specialinvoke r0.post($r3);

        return;
    }

    public java.lang.Object postAndWait(java.util.concurrent.Callable, int) throws java.lang.InterruptedException
    {
        java.lang.Throwable r9;
        androidx.core.provider.SelfDestructiveThread$3 $r13;
        androidx.core.provider.SelfDestructiveThread r0;
        java.util.concurrent.atomic.AtomicBoolean r4, $r12;
        java.util.concurrent.Callable r1;
        long $l1, $l2;
        java.util.concurrent.atomic.AtomicReference r2, $r11;
        byte $b3;
        int i0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock r3, $r10;
        java.util.concurrent.TimeUnit r7;
        java.util.concurrent.locks.Condition $r5;
        java.lang.InterruptedException $r8, $r14;
        java.lang.Object $r6;

        r0 := @this;

        r1 := @parameter0;

        i0 := @parameter1;

        $r10 = new java.util.concurrent.locks.ReentrantLock;

        r3 = $r10;

        specialinvoke $r10.<init>();

        $r5 = virtualinvoke r3.newCondition();

        $r11 = new java.util.concurrent.atomic.AtomicReference;

        r2 = $r11;

        specialinvoke $r11.<init>();

        $r12 = new java.util.concurrent.atomic.AtomicBoolean;

        r4 = $r12;

        specialinvoke $r12.<init>(1);

        $r13 = new androidx.core.provider.SelfDestructiveThread$3;

        specialinvoke $r13.<init>(r0, r2, r1, r3, r4, $r5);

        specialinvoke r0.post($r13);

        virtualinvoke r3.lock();

     label01:
        $z0 = virtualinvoke r4.get();

     label02:
        if $z0 != 0 goto label05;

     label03:
        $r6 = virtualinvoke r2.get();

     label04:
        virtualinvoke r3.unlock();

        return $r6;

     label05:
        r7 = java.util.concurrent.TimeUnit.MILLISECONDS;

     label06:
        $l1 = (long) i0;

     label07:
        $l1 = virtualinvoke r7.toNanos($l1);

     label08:
        $l2 = interfaceinvoke $r5.awaitNanos($l1);

     label09:
        $l1 = $l2;

        goto label11;

     label10:
        $r8 := @caughtexception;

     label11:
        $z0 = virtualinvoke r4.get();

     label12:
        if $z0 != 0 goto label15;

     label13:
        $r6 = virtualinvoke r2.get();

     label14:
        virtualinvoke r3.unlock();

        return $r6;

     label15:
        $b3 = $l1 cmp 0L;

        i0 = (int) $b3;

        if i0 <= 0 goto label16;

        goto label08;

     label16:
        $r14 = new java.lang.InterruptedException;

     label17:
        specialinvoke $r14.<init>("timeout");

        throw $r14;

     label18:
        r9 := @caughtexception;

        virtualinvoke r3.unlock();

        goto label19;

     label19:
        throw r9;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
    }
}
